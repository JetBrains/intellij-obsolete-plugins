// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _OgnlLexer.flex

/* Generated code. Do not modify it. */
package com.intellij.lang.ognl.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;

import com.intellij.psi.TokenType;
import com.intellij.lang.ognl.OgnlTypes;


public class _OgnlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NESTED_BRACE = 2;
  public static final int EXPR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100\1\u5c00\1\u5d00\1\u5e00"+
    "\1\u5f00\42\u1f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\24\u1f00"+
    "\1\u6300\1\u6400\1\u1f00\1\u6500\1\u6600\1\u6700\1\u6800\2\u1f00"+
    "\1\u6900\5\u1f00\1\u6a00\1\u6b00\1\u6c00\5\u1f00\1\u6d00\1\u6e00"+
    "\2\u1f00\1\u6f00\1\u1f00\1\u7000\14\u1f00\1\u7100\4\u1f00\246\u0100"+
    "\1\u7200\20\u0100\1\u7300\1\u7400\25\u0100\1\u7500\34\u0100\1\u7600"+
    "\14\u1f00\2\u0100\1\u7700\5\u1f00\23\u5d00\1\u7800\u0aec\u1f00\1\u7900"+
    "\1\u7a00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\2\16\0\4\3"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\11\25\1\26\1\3\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\2\34\1\36\2\34\1\37\22\34"+
    "\1\40\1\41\1\42\1\43\1\0\1\3\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\2\34"+
    "\1\55\1\34\1\56\1\57\1\34\1\60\1\61\1\62"+
    "\1\63\1\64\1\34\1\65\1\66\2\34\1\67\1\70"+
    "\1\71\1\72\41\0\2\3\4\0\4\3\1\34\2\3"+
    "\1\0\7\3\1\34\4\3\1\34\5\3\27\34\1\3"+
    "\37\34\1\3\u01ca\34\4\3\14\34\16\3\5\34\7\3"+
    "\1\34\1\3\1\34\21\3\160\0\5\34\1\3\2\34"+
    "\2\3\4\34\1\3\1\34\6\3\1\34\1\3\3\34"+
    "\1\3\1\34\1\3\24\34\1\3\123\34\1\3\213\34"+
    "\1\3\5\0\2\3\246\34\1\3\46\34\2\3\1\34"+
    "\6\3\51\34\6\3\1\0\1\3\55\0\1\3\1\0"+
    "\1\3\2\0\1\3\2\0\1\3\1\0\10\3\33\34"+
    "\4\3\4\34\15\3\6\0\5\3\1\0\4\3\13\0"+
    "\1\3\1\0\3\3\53\34\37\0\4\3\2\34\1\0"+
    "\143\34\1\3\1\34\10\0\1\3\6\0\2\34\2\0"+
    "\1\3\4\0\2\34\12\0\3\34\2\3\1\34\17\3"+
    "\1\0\1\34\1\0\36\34\33\0\2\3\131\34\13\0"+
    "\1\34\16\3\12\0\41\34\11\0\2\34\4\3\1\34"+
    "\2\3\3\0\26\34\4\0\1\34\11\0\1\34\3\0"+
    "\1\34\5\0\22\3\31\34\3\0\4\3\13\34\65\3"+
    "\25\34\1\3\10\34\12\0\13\3\61\0\66\34\3\0"+
    "\1\34\22\0\1\34\7\0\12\34\2\0\2\3\12\0"+
    "\1\3\20\34\3\0\1\3\10\34\2\3\2\34\2\3"+
    "\26\34\1\3\7\34\1\3\1\34\3\3\4\34\2\3"+
    "\1\0\1\34\7\0\2\3\2\0\2\3\3\0\1\34"+
    "\10\3\1\0\4\3\2\34\1\3\3\34\2\0\2\3"+
    "\12\0\2\34\2\0\7\3\1\0\1\34\1\3\1\0"+
    "\2\3\3\0\1\3\6\34\4\3\2\34\2\3\26\34"+
    "\1\3\7\34\1\3\2\34\1\3\2\34\1\3\2\34"+
    "\2\3\1\0\1\3\5\0\4\3\2\0\2\3\3\0"+
    "\3\3\1\0\7\3\4\34\1\3\1\34\7\3\14\0"+
    "\3\34\1\0\13\3\3\0\1\3\11\34\1\3\3\34"+
    "\1\3\26\34\1\3\7\34\1\3\2\34\1\3\5\34"+
    "\2\3\1\0\1\34\10\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\34\17\3\2\34\2\0\2\3\12\0\1\3"+
    "\1\0\7\3\1\34\6\0\1\3\3\0\1\3\10\34"+
    "\2\3\2\34\2\3\26\34\1\3\7\34\1\3\2\34"+
    "\1\3\5\34\2\3\1\0\1\34\7\0\2\3\2\0"+
    "\2\3\3\0\7\3\3\0\4\3\2\34\1\3\3\34"+
    "\2\0\2\3\12\0\1\3\1\34\20\3\1\0\1\34"+
    "\1\3\6\34\3\3\3\34\1\3\4\34\3\3\2\34"+
    "\1\3\1\34\1\3\2\34\3\3\2\34\3\3\3\34"+
    "\3\3\14\34\4\3\5\0\3\3\3\0\1\3\4\0"+
    "\2\3\1\34\6\3\1\0\16\3\12\0\11\3\1\0"+
    "\6\3\5\0\10\34\1\3\3\34\1\3\27\34\1\3"+
    "\20\34\3\3\1\34\7\0\1\3\3\0\1\3\4\0"+
    "\7\3\2\0\1\3\3\34\5\3\2\34\2\0\2\3"+
    "\12\0\20\3\1\34\3\0\1\3\10\34\1\3\3\34"+
    "\1\3\27\34\1\3\12\34\1\3\5\34\2\3\1\0"+
    "\1\34\7\0\1\3\3\0\1\3\4\0\7\3\2\0"+
    "\7\3\1\34\1\3\2\34\2\0\2\3\12\0\1\3"+
    "\2\34\15\3\5\0\10\34\1\3\3\34\1\3\51\34"+
    "\2\0\1\34\7\0\1\3\3\0\1\3\4\0\1\34"+
    "\5\3\3\34\1\0\7\3\3\34\2\0\2\3\12\0"+
    "\12\3\6\34\1\3\3\0\1\3\22\34\3\3\30\34"+
    "\1\3\11\34\1\3\1\34\2\3\7\34\3\3\1\0"+
    "\4\3\6\0\1\3\1\0\1\3\10\0\6\3\12\0"+
    "\2\3\2\0\15\3\60\34\1\0\2\34\7\0\4\3"+
    "\1\0\7\34\10\0\1\3\12\0\47\3\2\34\1\3"+
    "\1\34\1\3\5\34\1\3\30\34\1\3\1\34\1\3"+
    "\12\34\1\0\2\34\11\0\1\34\2\3\5\34\1\3"+
    "\1\34\1\3\6\0\2\3\12\0\2\3\4\34\40\3"+
    "\1\34\27\3\2\0\6\3\12\0\13\3\1\0\1\3"+
    "\1\0\1\3\1\0\4\3\2\0\10\34\1\3\44\34"+
    "\4\3\24\0\1\3\2\0\5\34\13\0\1\3\44\0"+
    "\11\3\1\0\71\3\53\34\24\0\1\34\12\0\6\3"+
    "\6\34\4\0\4\34\3\0\1\34\3\0\2\34\7\0"+
    "\3\34\4\0\15\34\14\0\1\34\17\0\2\3\46\34"+
    "\1\3\1\34\5\3\1\34\2\3\53\34\1\3\115\34"+
    "\1\3\4\34\2\3\7\34\1\3\1\34\1\3\4\34"+
    "\2\3\51\34\1\3\4\34\2\3\41\34\1\3\4\34"+
    "\2\3\7\34\1\3\1\34\1\3\4\34\2\3\17\34"+
    "\1\3\71\34\1\3\4\34\2\3\103\34\2\3\3\0"+
    "\40\3\20\34\20\3\126\34\2\3\6\34\3\3\u016c\34"+
    "\2\3\21\34\1\3\32\34\5\3\113\34\3\3\3\0"+
    "\10\34\7\3\15\34\1\3\4\34\3\0\13\3\22\34"+
    "\3\0\13\3\22\34\2\0\14\3\15\34\1\3\3\34"+
    "\1\3\2\0\14\3\64\34\40\0\3\3\1\34\3\3"+
    "\1\0\1\34\1\0\2\3\12\0\41\3\4\0\1\3"+
    "\12\0\6\3\131\34\7\3\5\34\2\0\42\34\1\0"+
    "\1\34\5\3\106\34\12\3\37\34\1\3\14\0\4\3"+
    "\14\0\12\3\12\0\36\34\2\3\5\34\13\3\54\34"+
    "\4\3\32\34\6\3\12\0\46\3\27\34\5\0\4\3"+
    "\65\34\12\0\1\3\35\0\2\3\13\0\6\3\12\0"+
    "\15\3\1\34\10\3\16\0\1\3\2\0\77\3\5\0"+
    "\57\34\21\0\7\34\4\3\12\0\21\3\11\0\14\3"+
    "\3\0\36\34\15\0\2\34\12\0\54\34\16\0\14\3"+
    "\44\34\24\0\10\3\12\0\3\3\3\34\12\0\44\34"+
    "\2\3\11\34\7\3\53\34\2\3\3\34\20\3\3\0"+
    "\1\3\25\0\4\34\1\0\6\34\1\0\2\34\3\0"+
    "\1\34\5\3\300\34\72\0\1\3\5\0\26\34\2\3"+
    "\6\34\2\3\46\34\2\3\6\34\2\3\10\34\1\3"+
    "\1\34\1\3\1\34\1\3\1\34\1\3\37\34\2\3"+
    "\65\34\1\3\7\34\1\3\1\34\3\3\3\34\1\3"+
    "\7\34\3\3\4\34\2\3\6\34\4\3\15\34\5\3"+
    "\3\34\1\3\7\34\16\3\5\0\32\3\5\0\20\3"+
    "\2\0\23\3\1\0\13\3\5\0\1\3\12\0\1\3"+
    "\1\34\15\3\1\34\20\3\15\34\3\3\40\0\20\3"+
    "\15\0\4\3\1\0\3\3\14\0\21\3\1\34\4\3"+
    "\1\34\2\3\12\34\1\3\1\34\3\3\5\34\6\3"+
    "\1\34\1\3\1\34\1\3\1\34\1\3\4\34\1\3"+
    "\13\34\2\3\4\34\5\3\5\34\4\3\1\34\21\3"+
    "\43\0\2\34\4\0\u0177\3\57\34\1\3\57\34\1\3"+
    "\205\34\6\3\4\34\3\0\2\34\14\3\46\34\1\3"+
    "\1\34\5\3\1\34\2\3\70\34\7\3\1\34\17\3"+
    "\1\0\27\34\11\3\7\34\1\3\7\34\1\3\7\34"+
    "\1\3\7\34\1\3\7\34\1\3\7\34\1\3\7\34"+
    "\1\3\7\34\1\3\40\0\57\3\1\34\325\3\2\34"+
    "\1\0\31\3\17\0\1\3\5\34\2\3\3\0\2\34"+
    "\4\3\126\34\2\3\2\0\2\3\3\34\1\3\132\34"+
    "\1\3\4\34\5\3\53\34\1\3\136\34\21\3\33\34"+
    "\5\0\60\3\306\34\12\0\100\3\360\34\15\0\3\3"+
    "\215\34\103\3\56\34\2\3\15\34\3\3\20\34\12\0"+
    "\2\34\24\3\57\34\1\0\4\3\12\0\1\3\37\34"+
    "\2\0\106\34\14\0\45\3\11\34\2\3\147\34\2\3"+
    "\65\34\2\3\5\34\4\0\52\3\2\0\13\34\1\0"+
    "\3\34\1\0\4\34\1\0\27\34\5\0\4\3\1\0"+
    "\13\3\1\0\7\3\64\34\14\3\2\0\62\34\22\0"+
    "\12\3\12\0\6\3\22\0\6\34\3\3\1\34\1\3"+
    "\2\34\13\0\34\34\10\0\2\3\27\34\15\0\14\3"+
    "\35\34\3\3\4\0\57\34\16\0\16\3\1\34\12\0"+
    "\6\3\5\34\1\0\12\34\12\0\5\34\1\3\51\34"+
    "\16\0\11\3\3\34\1\0\10\34\2\0\2\3\12\0"+
    "\6\3\27\34\3\3\1\34\3\0\62\34\1\0\1\34"+
    "\3\0\2\34\2\0\5\34\2\0\1\34\1\0\1\34"+
    "\30\3\3\34\2\3\13\34\5\0\2\3\3\34\2\0"+
    "\12\3\6\34\2\3\6\34\2\3\6\34\11\3\7\34"+
    "\1\3\7\34\1\3\53\34\1\3\14\34\2\0\6\3"+
    "\163\34\10\0\1\3\2\0\2\3\12\0\6\3\244\34"+
    "\14\3\27\34\4\3\61\34\4\3\156\34\2\3\152\34"+
    "\46\3\7\34\14\3\5\34\5\3\1\34\1\0\12\34"+
    "\1\3\15\34\1\3\5\34\1\3\1\34\1\3\2\34"+
    "\1\3\2\34\1\3\154\34\41\3\153\34\22\3\100\34"+
    "\2\3\66\34\50\3\14\34\1\0\3\3\20\0\20\3"+
    "\20\0\3\3\2\0\30\3\3\0\31\3\1\0\6\3"+
    "\5\34\1\3\207\34\2\3\1\0\4\3\1\0\13\3"+
    "\12\0\7\3\32\34\4\3\1\0\1\3\32\34\13\3"+
    "\131\34\3\3\6\34\2\3\6\34\2\3\6\34\2\3"+
    "\3\34\3\3\2\0\3\3\2\0\22\3\3\0\4\3"+
    "\14\34\1\3\32\34\1\3\23\34\1\3\2\34\1\3"+
    "\17\34\2\3\16\34\42\3\173\34\105\3\65\0\210\3"+
    "\1\0\202\3\35\34\3\3\61\34\17\3\1\0\37\3"+
    "\40\34\15\3\24\34\1\0\10\34\1\0\5\3\46\34"+
    "\5\0\5\3\36\34\2\3\44\34\4\3\10\34\1\3"+
    "\5\0\52\3\236\34\2\3\12\0\6\3\44\34\4\3"+
    "\44\34\4\3\50\34\10\3\64\34\234\3\67\34\11\3"+
    "\26\34\12\3\10\34\230\3\6\34\2\3\1\34\1\3"+
    "\54\34\1\3\2\34\3\3\1\34\2\3\27\34\12\3"+
    "\27\34\11\3\37\34\101\3\23\34\1\3\2\34\12\3"+
    "\26\34\12\3\32\34\106\3\70\34\6\3\2\34\100\3"+
    "\1\34\3\0\1\3\2\0\5\3\4\0\4\34\1\3"+
    "\3\34\1\3\35\34\2\3\3\0\4\3\1\0\40\3"+
    "\35\34\3\3\35\34\43\3\10\34\1\3\34\34\2\0"+
    "\31\3\66\34\12\3\26\34\12\3\23\34\15\3\22\34"+
    "\156\3\111\34\67\3\63\34\15\3\63\34\15\3\44\34"+
    "\4\0\10\3\12\0\u0146\3\52\0\1\3\2\0\3\3"+
    "\2\0\116\3\35\34\12\3\1\34\10\3\26\34\13\0"+
    "\137\3\25\0\33\3\27\34\11\3\3\0\65\34\17\0"+
    "\37\3\12\0\17\3\4\0\55\34\13\0\2\3\1\0"+
    "\17\3\1\0\2\3\31\34\7\3\12\0\6\3\3\0"+
    "\44\34\16\0\1\3\12\0\4\3\1\34\3\0\10\3"+
    "\43\34\1\0\2\3\1\34\11\3\3\0\60\34\16\0"+
    "\4\34\4\3\4\0\1\3\14\0\1\34\1\3\1\34"+
    "\43\3\22\34\1\3\31\34\14\0\6\3\1\0\101\3"+
    "\7\34\1\3\1\34\1\3\4\34\1\3\17\34\1\3"+
    "\12\34\7\3\57\34\14\0\5\3\12\0\6\3\4\0"+
    "\1\3\10\34\2\3\2\34\2\3\26\34\1\3\7\34"+
    "\1\3\2\34\1\3\5\34\1\3\2\0\1\34\7\0"+
    "\2\3\2\0\2\3\3\0\2\3\1\34\6\3\1\0"+
    "\5\3\5\34\2\0\2\3\7\0\3\3\5\0\213\3"+
    "\65\34\22\0\4\34\5\3\12\0\4\3\1\0\1\34"+
    "\2\0\36\3\60\34\24\0\2\34\1\3\1\34\10\3"+
    "\12\0\246\3\57\34\7\0\2\3\11\0\27\3\4\34"+
    "\2\0\42\3\60\34\21\0\3\3\1\34\13\3\12\0"+
    "\46\3\53\34\15\0\1\34\7\3\12\0\66\3\33\34"+
    "\2\3\17\0\4\3\12\0\306\3\54\34\17\0\145\3"+
    "\100\34\12\0\25\3\1\34\7\0\2\3\1\0\2\3"+
    "\10\0\1\3\2\0\1\3\36\0\1\3\2\0\2\3"+
    "\11\0\14\3\12\0\106\3\10\34\2\3\47\34\7\0"+
    "\2\3\7\0\1\34\1\3\1\34\1\0\33\3\1\34"+
    "\12\0\50\34\7\0\1\34\4\0\10\3\1\0\10\3"+
    "\1\34\13\0\56\34\20\0\3\3\1\34\42\3\71\34"+
    "\7\3\11\34\1\3\45\34\10\0\1\3\10\0\1\34"+
    "\17\3\12\0\30\3\36\34\2\3\26\0\1\3\16\0"+
    "\111\3\7\34\1\3\2\34\1\3\46\34\6\0\3\3"+
    "\1\0\1\3\2\0\1\3\7\0\1\34\1\0\10\3"+
    "\12\0\6\3\6\34\1\3\2\34\1\3\40\34\5\0"+
    "\1\3\2\0\1\3\5\0\1\34\7\3\12\0\u0136\3"+
    "\23\34\4\0\271\3\1\0\54\3\4\0\37\3\232\34"+
    "\146\3\157\0\21\3\304\34\274\3\57\34\1\3\11\0"+
    "\307\3\107\34\271\3\71\34\7\3\37\34\1\3\12\0"+
    "\146\3\36\34\2\3\5\0\13\3\60\34\7\0\11\3"+
    "\4\34\14\3\12\0\11\3\25\34\5\3\23\34\260\3"+
    "\100\34\200\3\113\34\4\3\1\0\1\34\67\0\7\3"+
    "\4\0\15\34\100\3\2\34\1\3\1\34\1\0\13\3"+
    "\2\0\16\3\370\34\10\3\363\34\u01e3\0\52\3\11\0"+
    "\367\3\37\34\61\3\3\34\21\3\4\34\10\3\u018c\34"+
    "\4\3\153\34\5\3\15\34\3\3\11\34\7\3\12\34"+
    "\3\3\2\0\1\3\4\0\301\3\5\0\3\3\26\0"+
    "\2\3\7\0\36\3\4\0\224\3\3\0\273\3\125\34"+
    "\1\3\107\34\1\3\2\34\2\3\1\34\2\3\2\34"+
    "\2\3\4\34\1\3\14\34\1\3\1\34\1\3\7\34"+
    "\1\3\101\34\1\3\4\34\2\3\10\34\1\3\7\34"+
    "\1\3\34\34\1\3\4\34\1\3\5\34\1\3\1\34"+
    "\3\3\7\34\1\3\u0154\34\2\3\31\34\1\3\31\34"+
    "\1\3\37\34\1\3\31\34\1\3\37\34\1\3\31\34"+
    "\1\3\37\34\1\3\31\34\1\3\37\34\1\3\31\34"+
    "\1\3\10\34\2\3\151\0\4\3\62\0\10\3\1\0"+
    "\16\3\1\0\26\3\5\0\1\3\17\0\120\3\7\0"+
    "\1\3\21\0\2\3\7\0\1\3\2\0\1\3\5\0"+
    "\325\3\55\34\3\3\7\0\7\34\2\3\12\0\4\3"+
    "\1\34\u0171\3\54\34\16\0\5\3\1\0\305\34\13\3"+
    "\7\0\51\3\104\34\7\0\1\34\4\3\12\0\u0156\3"+
    "\1\0\117\3\4\34\1\3\33\34\1\3\2\34\1\3"+
    "\1\34\2\3\1\34\1\3\12\34\1\3\4\34\1\3"+
    "\1\34\1\3\1\34\6\3\1\34\4\3\1\34\1\3"+
    "\1\34\1\3\1\34\1\3\3\34\1\3\2\34\1\3"+
    "\1\34\2\3\1\34\1\3\1\34\1\3\1\34\1\3"+
    "\1\34\1\3\1\34\1\3\2\34\1\3\1\34\2\3"+
    "\4\34\1\3\7\34\1\3\4\34\1\3\4\34\1\3"+
    "\1\34\1\3\12\34\1\3\21\34\5\3\3\34\1\3"+
    "\5\34\1\3\21\34\u0134\3\12\0\6\3\327\34\7\0"+
    "\42\3\65\34\13\3\336\34\2\3\u0182\34\16\3\u0131\34"+
    "\37\3\36\34\342\3\113\0\266\3\1\0\36\3\140\0"+
    "\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31488];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\15\31\1\35\1\36"+
    "\1\37\1\7\1\40\1\41\2\4\1\42\1\43\2\11"+
    "\1\44\1\0\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\3\31\1\53\1\31\1\54\1\55\1\56\3\31"+
    "\1\57\4\31\1\60\1\61\1\44\1\62\1\63\1\31"+
    "\1\64\1\31\1\65\1\31\1\66\1\67\1\70\1\71"+
    "\1\31\1\72\1\73\2\31\1\74\1\75\2\31\1\0"+
    "\1\76\1\77\1\100\1\101\1\31\1\0\1\31\1\102"+
    "\3\31\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[117];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\166\0\166"+
    "\0\u0162\0\u019d\0\u01d8\0\166\0\166\0\166\0\166\0\166"+
    "\0\166\0\u0213\0\166\0\u024e\0\u0289\0\166\0\u02c4\0\u02ff"+
    "\0\u033a\0\166\0\166\0\u0375\0\166\0\166\0\166\0\u03b0"+
    "\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588"+
    "\0\u05c3\0\u05fe\0\u0639\0\u0674\0\166\0\u06af\0\166\0\166"+
    "\0\166\0\166\0\166\0\u06ea\0\166\0\166\0\166\0\u0725"+
    "\0\u0760\0\u079b\0\u07d6\0\166\0\166\0\166\0\166\0\166"+
    "\0\u0811\0\u084c\0\u0887\0\u08c2\0\u0375\0\u08fd\0\u0938\0\u0973"+
    "\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0375\0\u0a9a\0\u0ad5\0\u0b10"+
    "\0\u0b4b\0\166\0\166\0\u0b86\0\166\0\u0375\0\u0bc1\0\u0375"+
    "\0\u0bfc\0\u0375\0\u0c37\0\u0375\0\u0375\0\u0375\0\u0c72\0\u0cad"+
    "\0\u0375\0\u0375\0\u0ce8\0\u0d23\0\u0375\0\u0375\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0375\0\u0375\0\u0375\0\u0375\0\u0e0f\0\u0e4a\0\u0e85"+
    "\0\166\0\u0ec0\0\u0efb\0\u0f36\0\u0375";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[117];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\4\34\1\35\1\3\1\36\1\37"+
    "\1\40\1\41\2\34\1\42\1\43\1\44\1\34\1\45"+
    "\1\46\1\47\1\50\2\34\1\51\1\52\1\53\1\34"+
    "\1\54\1\55\1\56\1\3\1\57\1\3\2\4\1\3"+
    "\1\4\1\5\1\6\1\7\1\10\1\60\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\4\34\1\35\1\3\1\36\1\37\1\40\1\41\2\34"+
    "\1\42\1\43\1\44\1\34\1\45\1\46\1\47\1\50"+
    "\2\34\1\51\1\52\1\53\1\34\1\54\1\55\1\56"+
    "\1\61\1\57\74\0\2\4\1\0\1\4\116\0\1\62"+
    "\42\0\2\6\1\0\3\6\1\63\32\6\1\64\31\6"+
    "\67\0\1\65\15\0\1\66\60\0\2\13\1\0\10\13"+
    "\1\67\25\13\1\70\31\13\24\0\2\71\67\0\1\71"+
    "\1\0\2\72\10\0\1\73\1\74\10\0\1\73\2\0"+
    "\1\74\41\0\1\71\1\0\2\25\10\0\1\73\1\74"+
    "\10\0\1\73\2\0\1\74\46\0\1\75\1\76\72\0"+
    "\1\77\72\0\1\100\1\101\41\0\1\34\7\0\1\34"+
    "\13\0\2\34\6\0\4\34\4\0\23\34\4\0\1\34"+
    "\7\0\1\34\13\0\2\34\6\0\4\34\4\0\12\34"+
    "\1\102\10\34\4\0\1\34\7\0\1\34\13\0\2\34"+
    "\6\0\4\34\4\0\1\103\12\34\1\104\7\34\4\0"+
    "\1\34\7\0\1\34\13\0\2\34\6\0\4\34\4\0"+
    "\14\34\1\105\6\34\4\0\1\34\7\0\1\34\13\0"+
    "\2\34\6\0\4\34\4\0\1\106\22\34\4\0\1\34"+
    "\7\0\1\34\13\0\2\34\6\0\4\34\4\0\17\34"+
    "\1\107\3\34\4\0\1\34\7\0\1\34\13\0\2\34"+
    "\6\0\4\34\4\0\12\34\1\110\10\34\4\0\1\34"+
    "\7\0\1\34\13\0\2\34\6\0\4\34\4\0\17\34"+
    "\1\111\3\34\4\0\1\34\7\0\1\34\13\0\2\34"+
    "\6\0\4\34\4\0\4\34\1\112\6\34\1\113\4\34"+
    "\1\114\2\34\4\0\1\34\7\0\1\34\13\0\2\34"+
    "\6\0\4\34\4\0\15\34\1\115\5\34\4\0\1\34"+
    "\7\0\1\34\13\0\2\34\6\0\4\34\4\0\7\34"+
    "\1\116\13\34\4\0\1\34\7\0\1\34\13\0\2\34"+
    "\6\0\4\34\4\0\15\34\1\117\5\34\4\0\1\34"+
    "\7\0\1\34\13\0\2\34\6\0\4\34\4\0\16\34"+
    "\1\120\4\34\4\0\1\34\7\0\1\34\13\0\2\34"+
    "\6\0\4\34\4\0\13\34\1\121\7\34\74\0\1\122"+
    "\2\0\2\6\1\0\70\6\2\13\1\0\70\13\24\0"+
    "\2\71\7\0\1\123\1\73\6\0\1\123\2\0\1\73"+
    "\44\0\1\71\1\0\2\72\10\0\1\73\11\0\1\73"+
    "\41\0\1\124\1\0\1\124\2\0\2\124\7\0\1\123"+
    "\7\0\1\123\56\0\1\125\41\0\1\34\7\0\1\34"+
    "\13\0\2\34\6\0\4\34\4\0\3\34\1\126\17\34"+
    "\4\0\1\34\7\0\1\34\13\0\2\34\6\0\4\34"+
    "\4\0\12\34\1\127\10\34\4\0\1\34\7\0\1\34"+
    "\13\0\2\34\6\0\4\34\4\0\15\34\1\130\5\34"+
    "\4\0\1\34\7\0\1\34\13\0\2\34\6\0\4\34"+
    "\4\0\11\34\1\131\11\34\4\0\1\34\7\0\1\34"+
    "\13\0\2\34\6\0\4\34\4\0\4\34\1\132\16\34"+
    "\4\0\1\34\7\0\1\34\13\0\2\34\6\0\4\34"+
    "\4\0\16\34\1\133\4\34\4\0\1\34\7\0\1\34"+
    "\13\0\2\34\6\0\4\34\4\0\4\34\1\134\16\34"+
    "\4\0\1\34\7\0\1\34\13\0\2\34\6\0\4\34"+
    "\4\0\14\34\1\135\4\34\1\136\1\34\4\0\1\34"+
    "\7\0\1\34\13\0\2\34\6\0\4\34\4\0\17\34"+
    "\1\137\3\34\4\0\1\34\7\0\1\34\13\0\2\34"+
    "\6\0\4\34\4\0\11\34\1\140\11\34\4\0\1\34"+
    "\7\0\1\34\13\0\2\34\6\0\4\34\4\0\11\34"+
    "\1\141\3\34\1\142\5\34\4\0\1\34\7\0\1\34"+
    "\13\0\2\34\6\0\4\34\4\0\20\34\1\143\2\34"+
    "\4\0\1\34\7\0\1\34\13\0\2\34\6\0\4\34"+
    "\4\0\7\34\1\144\13\34\4\0\1\34\7\0\1\34"+
    "\13\0\2\34\6\0\4\34\4\0\15\34\1\145\5\34"+
    "\30\0\2\124\7\0\1\123\7\0\1\123\25\0\1\34"+
    "\7\0\1\34\13\0\2\34\6\0\4\34\4\0\3\34"+
    "\1\146\17\34\4\0\1\34\7\0\1\34\13\0\2\34"+
    "\6\0\4\34\4\0\16\34\1\147\4\34\4\0\1\34"+
    "\7\0\1\34\13\0\2\34\6\0\4\34\4\0\17\34"+
    "\1\150\3\34\4\0\1\34\3\0\1\151\3\0\1\34"+
    "\13\0\2\34\6\0\4\34\4\0\23\34\4\0\1\34"+
    "\7\0\1\34\13\0\2\34\6\0\4\34\4\0\11\34"+
    "\1\152\11\34\4\0\1\34\7\0\1\34\13\0\2\34"+
    "\6\0\4\34\4\0\4\34\1\153\16\34\4\0\1\34"+
    "\7\0\1\34\13\0\2\34\6\0\4\34\4\0\15\34"+
    "\1\154\5\34\4\0\1\34\7\0\1\34\13\0\2\34"+
    "\6\0\4\34\4\0\4\34\1\155\16\34\4\0\1\34"+
    "\7\0\1\34\13\0\2\34\6\0\4\34\4\0\1\156"+
    "\22\34\60\0\1\157\16\0\1\34\7\0\1\34\13\0"+
    "\2\34\6\0\4\34\4\0\12\34\1\160\10\34\62\0"+
    "\1\161\14\0\1\34\7\0\1\34\13\0\2\34\6\0"+
    "\4\34\4\0\2\34\1\162\20\34\4\0\1\34\7\0"+
    "\1\34\13\0\2\34\6\0\4\34\4\0\4\34\1\163"+
    "\16\34\4\0\1\34\7\0\1\34\13\0\2\34\6\0"+
    "\4\34\4\0\13\34\1\164\7\34\4\0\1\34\7\0"+
    "\1\34\13\0\2\34\6\0\4\34\4\0\5\34\1\165"+
    "\15\34\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3953];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\2\11\3\1\6\11\1\1\1\11"+
    "\2\1\1\11\3\1\2\11\1\1\3\11\15\1\1\11"+
    "\1\1\5\11\1\1\3\11\2\1\1\0\1\1\5\11"+
    "\21\1\2\11\1\1\1\11\23\1\1\0\5\1\1\0"+
    "\1\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[117];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  public _OgnlLexer(){
    this((java.io.Reader)null);
  }

  private static final class State {
    final int lBraceCount;
    final int state;

    private State(int state, int lBraceCount) {
        this.state = state;
        this.lBraceCount = lBraceCount;
    }

    @Override
    public String toString() {
        return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
    }
  }

  private final Stack<State> myStateStack = new Stack<>();
  private int myLeftBraceCount;

  protected void resetInternal() {
    myLeftBraceCount = 0;
    myStateStack.clear();
  }

  private void pushState(int newState) {
    myStateStack.push(new State(yystate(), myLeftBraceCount));
    myLeftBraceCount = 0;
    yybegin(newState);
  }

  private void popState() {
    if (myStateStack.empty()) return;

    State state = myStateStack.pop();
    myLeftBraceCount = state.lBraceCount;
    yybegin(state.state);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _OgnlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  resetInternal();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 68: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 69: break;
          case 3:
            { return OgnlTypes.NEGATE;
            }
          // fall through
          case 70: break;
          case 4:
            { return OgnlTypes.STRING_LITERAL;
            }
          // fall through
          case 71: break;
          case 5:
            { return OgnlTypes.HASH;
            }
          // fall through
          case 72: break;
          case 6:
            { return OgnlTypes.DOLLAR;
            }
          // fall through
          case 73: break;
          case 7:
            { return OgnlTypes.MODULO;
            }
          // fall through
          case 74: break;
          case 8:
            { return OgnlTypes.AND;
            }
          // fall through
          case 75: break;
          case 9:
            { return OgnlTypes.CHARACTER_LITERAL;
            }
          // fall through
          case 76: break;
          case 10:
            { return OgnlTypes.LPARENTH;
            }
          // fall through
          case 77: break;
          case 11:
            { return OgnlTypes.RPARENTH;
            }
          // fall through
          case 78: break;
          case 12:
            { return OgnlTypes.MULTIPLY;
            }
          // fall through
          case 79: break;
          case 13:
            { return OgnlTypes.PLUS;
            }
          // fall through
          case 80: break;
          case 14:
            { return OgnlTypes.COMMA;
            }
          // fall through
          case 81: break;
          case 15:
            { return OgnlTypes.MINUS;
            }
          // fall through
          case 82: break;
          case 16:
            { return OgnlTypes.DOT;
            }
          // fall through
          case 83: break;
          case 17:
            { return OgnlTypes.DIVISION;
            }
          // fall through
          case 84: break;
          case 18:
            { return OgnlTypes.INTEGER_LITERAL;
            }
          // fall through
          case 85: break;
          case 19:
            { return OgnlTypes.COLON;
            }
          // fall through
          case 86: break;
          case 20:
            { return OgnlTypes.LESS;
            }
          // fall through
          case 87: break;
          case 21:
            { return OgnlTypes.EQ;
            }
          // fall through
          case 88: break;
          case 22:
            { return OgnlTypes.GREATER;
            }
          // fall through
          case 89: break;
          case 23:
            { return OgnlTypes.QUESTION;
            }
          // fall through
          case 90: break;
          case 24:
            { return OgnlTypes.AT;
            }
          // fall through
          case 91: break;
          case 25:
            { return OgnlTypes.IDENTIFIER;
            }
          // fall through
          case 92: break;
          case 26:
            { return OgnlTypes.LBRACKET;
            }
          // fall through
          case 93: break;
          case 27:
            { return OgnlTypes.RBRACKET;
            }
          // fall through
          case 94: break;
          case 28:
            { return OgnlTypes.XOR;
            }
          // fall through
          case 95: break;
          case 29:
            { myLeftBraceCount++;
  pushState(NESTED_BRACE);
  return OgnlTypes.LBRACE;
            }
          // fall through
          case 96: break;
          case 30:
            { return OgnlTypes.OR;
            }
          // fall through
          case 97: break;
          case 31:
            { return OgnlTypes.NOT;
            }
          // fall through
          case 98: break;
          case 32:
            { popState();
  if (myLeftBraceCount == 0)  {
    return OgnlTypes.EXPRESSION_END;
  }

  myLeftBraceCount--;
  return OgnlTypes.RBRACE;
            }
          // fall through
          case 99: break;
          case 33:
            { return OgnlTypes.NOT_EQUAL;
            }
          // fall through
          case 100: break;
          case 34:
            { pushState(EXPR);
  return OgnlTypes.EXPRESSION_START;
            }
          // fall through
          case 101: break;
          case 35:
            { return OgnlTypes.AND_AND;
            }
          // fall through
          case 102: break;
          case 36:
            { return OgnlTypes.DOUBLE_LITERAL;
            }
          // fall through
          case 103: break;
          case 37:
            { return OgnlTypes.BIG_INTEGER_LITERAL;
            }
          // fall through
          case 104: break;
          case 38:
            { return OgnlTypes.SHIFT_LEFT;
            }
          // fall through
          case 105: break;
          case 39:
            { return OgnlTypes.LESS_EQUAL;
            }
          // fall through
          case 106: break;
          case 40:
            { return OgnlTypes.EQUAL;
            }
          // fall through
          case 107: break;
          case 41:
            { return OgnlTypes.GREATER_EQUAL;
            }
          // fall through
          case 108: break;
          case 42:
            { return OgnlTypes.SHIFT_RIGHT;
            }
          // fall through
          case 109: break;
          case 43:
            { return OgnlTypes.EQ_KEYWORD;
            }
          // fall through
          case 110: break;
          case 44:
            { return OgnlTypes.GT_KEYWORD;
            }
          // fall through
          case 111: break;
          case 45:
            { return OgnlTypes.IN_KEYWORD;
            }
          // fall through
          case 112: break;
          case 46:
            { return OgnlTypes.LT_KEYWORD;
            }
          // fall through
          case 113: break;
          case 47:
            { return OgnlTypes.OR_KEYWORD;
            }
          // fall through
          case 114: break;
          case 48:
            { return OgnlTypes.OR_OR;
            }
          // fall through
          case 115: break;
          case 49:
            { return OgnlTypes.BIG_DECIMAL_LITERAL;
            }
          // fall through
          case 116: break;
          case 50:
            { return OgnlTypes.SHIFT_RIGHT_LOGICAL;
            }
          // fall through
          case 117: break;
          case 51:
            { return OgnlTypes.AND_KEYWORD;
            }
          // fall through
          case 118: break;
          case 52:
            { return OgnlTypes.BOR_KEYWORD;
            }
          // fall through
          case 119: break;
          case 53:
            { return OgnlTypes.GT_EQ_KEYWORD;
            }
          // fall through
          case 120: break;
          case 54:
            { return OgnlTypes.LT_EQ_KEYWORD;
            }
          // fall through
          case 121: break;
          case 55:
            { return OgnlTypes.NEQ_KEYWORD;
            }
          // fall through
          case 122: break;
          case 56:
            { return OgnlTypes.NEW_KEYWORD;
            }
          // fall through
          case 123: break;
          case 57:
            { return OgnlTypes.NOT_KEYWORD;
            }
          // fall through
          case 124: break;
          case 58:
            { return OgnlTypes.SHIFT_LEFT_KEYWORD;
            }
          // fall through
          case 125: break;
          case 59:
            { return OgnlTypes.SHIFT_RIGHT_KEYWORD;
            }
          // fall through
          case 126: break;
          case 60:
            { return OgnlTypes.XOR_KEYWORD;
            }
          // fall through
          case 127: break;
          case 61:
            { return OgnlTypes.BAND_KEYWORD;
            }
          // fall through
          case 128: break;
          case 62:
            { return OgnlTypes.NULL_KEYWORD;
            }
          // fall through
          case 129: break;
          case 63:
            { return OgnlTypes.TRUE_KEYWORD;
            }
          // fall through
          case 130: break;
          case 64:
            { return OgnlTypes.SHIFT_RIGHT_LOGICAL_KEYWORD;
            }
          // fall through
          case 131: break;
          case 65:
            { return OgnlTypes.FALSE_KEYWORD;
            }
          // fall through
          case 132: break;
          case 66:
            { return OgnlTypes.NOT_IN_KEYWORD;
            }
          // fall through
          case 133: break;
          case 67:
            { return OgnlTypes.INSTANCEOF_KEYWORD;
            }
          // fall through
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
