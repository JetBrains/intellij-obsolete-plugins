<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ Copyright 2011 The authors
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE struts PUBLIC
  "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
  "http://struts.apache.org/dtds/struts-2.0.dtd">

<!-- Basic DOM tests -->

<struts>

  <!-- BEAN =================================================================================================== -->

  <bean class="MyClass"/>
  <bean class="<error descr="Cannot resolve class 'INVALID_VALUE'">INVALID_VALUE</error>"/>

  <bean class="<error descr="Interface is not allowed">MyInterface</error>"/>

  <bean class="MyInterfaceImpl" type="MyInterface"/>


  <bean class="MyClass" scope="default"/>
  <bean class="MyClass" scope="singleton"/>
  <bean class="MyClass" scope="request"/>
  <bean class="MyClass" scope="session"/>
  <bean class="MyClass" scope="thread"/>
  <bean class="MyClass" scope="<error descr="Unknown enum value 'INVALID_VALUE'">INVALID_VALUE</error>"/>

  <bean class="MyClass" static="false"/>
  <bean class="MyClass" static="true"/>
  <bean class="MyClass" static="<error descr="Cannot resolve symbol 'INVALID_VALUE'">INVALID_VALUE</error>"/>

  <bean class="MyClass" optional="false"/>
  <bean class="MyClass" optional="true"/>
  <bean class="MyClass" optional="<error descr="Cannot resolve symbol 'INVALID_VALUE'">INVALID_VALUE</error>"/>

  <bean class="MyClass" name="myBean"/>
  <bean class="MyClass" name=<error descr="Value must not be empty">""</error>/>
  <bean class="MyClass" name="<error descr="Value must not be empty"> </error>"/>

  <!-- TODO must be unique within same "type"-elements -->
  <bean class="MyClass" name="DUPLICATED_NAME"/>
  <bean class="MyClass" name="DUPLICATED_NAME"/>


  <!-- PACKAGE =================================================================================================== -->

  <!-- "name" -->
  <package name="validName"/>
  <package name=<error descr="Value must not be empty">""</error>/>
  <package name="<error descr="Value must not be empty"> </error>"/>
  <package name="<error descr="Struts Package with such name already exists">DUPLICATED_NAME</error>"/>
  <package name="<error descr="Struts Package with such name already exists">DUPLICATED_NAME</error>"/>

  <!-- "namespace" -->
  <package name="emptyName" namespace=<error descr="Namespace must start with '/'"><error descr="Value must not be empty">""</error></error>/>
  <package name="emptyName2" namespace="<error descr="Namespace must start with '/'"><error descr="Value must not be empty"> </error></error>"/>
  <package name="doesNotStartWithSlash" namespace="<error descr="Namespace must start with '/'">INVALID_VALUE</error>"/>

  <!-- "abstract" -->
  <package name="validName3" abstract="true"/>
  <package name="validName3_1" abstract="false"/>
  <package name="validName3_2" abstract="<error descr="Cannot resolve symbol 'INVALID_VALUE'">INVALID_VALUE</error>"/>

  <!-- "extends" -->
  <package name="extendingPackage" extends="validName3"/>
  <package name="extendingPackageExtendsInvalid" extends="<error descr="Cannot resolve Struts Package 'INVALID_VALUE'">INVALID_VALUE</error>"/>

  <package name="multiplePackages" extends="emptyName,validName3"/>
  <package name="multiplePackagesInvalid" extends="emptyName,<error descr="Cannot resolve Struts Package 'INVALID_VALUE'">INVALID_VALUE</error>"/>

  <!-- DEFAULT-ACTION-REF  ====================================================================================== -->

  <package name="defaultActionRef">
    <default-action-ref name="myDefaultAction"/>
    <action name="myDefaultAction"/>
  </package>

  <package name="defaultActionRefInvalid">
    <default-action-ref name="<error descr="Cannot resolve Struts Action 'INVALID_VALUE'">INVALID_VALUE</error>"/>
  </package>


  <!-- DEFAULT-INTERCEPTOR-REF ================================================================================== -->

  <package name="defaultInterceptorRef">
    <interceptors>
      <interceptor-stack name="myLocalInterceptorStack">
      </interceptor-stack>
    </interceptors>

    <default-interceptor-ref name="myLocalInterceptorStack"/>
  </package>

  <package name="defaultInterceptorRefError">
    <default-interceptor-ref name="<error descr="Cannot resolve interceptor-stack 'INVALID_VALUE'">INVALID_VALUE</error>"/>
  </package>
  
  <package name="defaultInterceptorRefExtends" extends="defaultInterceptorRef">
    <default-interceptor-ref name="myLocalInterceptorStack"/>
  </package>

  <!-- ACTION =================================================================================================== -->

  <!-- "name" -->
  <package name="action1">
    <action name="validName"/>
    <action name=<error descr="Value must not be empty">""</error>/>
    <action name="<error descr="Value must not be empty"> </error>"/>
    <action name="<error descr="Struts Action with such name already exists">DUPLICATED_NAME</error>"/>
    <action name="<error descr="Struts Action with such name already exists">DUPLICATED_NAME</error>"/>
  </package>

  <!-- "class" -->
  <package name="action4">
    <action name="validName" class="MyClass"/>
    <action name="validWildcard*" class="My{0}WildcardClass"/>
    <action name="validNameButNoWildcard" class="<error descr="Cannot resolve class 'My{0}WildcardClass'">My{0}WildcardClass</error>"/>
    <action name="unknownClass" class="<error descr="Cannot resolve class 'INVALID_VALUE'">INVALID_VALUE</error>"/>
    <action name="interfaceNotAllowed" class='<error descr="Interface is not allowed">MyInterface</error>'/>
    <action name="abstractClassNotAllowed" class='<error descr="Abstract class is not allowed">MyAbstractClass</error>'/>
  </package>

  <!-- "method" -->
  <package name="action6">
    <action name="actionMethod" class="MyClass" method="validActionMethod"/>
    <action name="actionMethodWithException" class="MyClass" method="validActionMethodWithException"/>
    <action name="actionMethodGetterButNoField" class="MyClass" method="getValidActionMethodNoUnderlyingField"/>
    <action name="actionMethodReturnResult" class="MyClass" method="validActionMethodResult"/>
    <action name="doNotHighlightMethodWithWildcard" class="MyClass" method="{0}"/>

    <action name="nonExistingActionMethod" class="MyClass" method="<error descr="Cannot resolve action-method 'INVALID_VALUE'">INVALID_VALUE</error>"/>
    <action name="invalidActionMethodDueToWrongReturnType" class="MyClass"
            method="<error descr="Cannot resolve action-method 'invalidActionMethodDueToWrongReturnType'">invalidActionMethodDueToWrongReturnType</error>"/>
    <action name="invalidActionMethodIsSimplePropertyGetter" class="MyClass"
            method="<error descr="Cannot resolve action-method 'getMyField'">getMyField</error>"/>
  </package>


  <!-- RESULT, locations are tested in "path" =================================================================== -->

  <package name="testResult">
    
    <result-types>
      <result-type name="dispatcher" class="org.apache.struts2.dispatcher.ServletDispatcherResult" default="true"/>
    </result-types>

    <!-- "name" -->
    <action name="testResultNames">
      <!-- default name = success, cannot have two -->
      <<error descr="Result with such name already exists">result</error>>testResultNames.action</result>
      <<error descr="Result with such name already exists">result</error>>testResultNames.action</result>

      <result name="<error descr="Result with such name already exists">DUPLICATED_NAME</error>">testResultNames.action</result>
      <result name="<error descr="Result with such name already exists">DUPLICATED_NAME</error>">testResultNames.action</result>
    </action>

    <!-- "type" -->
    <action name="testResultTypeAttribute">
      <result name="validEmptyResultType">testResultNames.action</result>
      <result name="validResultType" type="dispatcher">testResultNames.action</result>
      <result name="invalidResultType" type="<error descr="Cannot resolve result-type 'INVALID_VALUE'">INVALID_VALUE</error>">testResultNames.action</result>
    </action>

  </package>


  <!-- RESULT-TYPE ============================================================================================== -->

  <package name="testResultType">
    <result-types>

      <!-- "class" -->
      <result-type name="validSubClass" class="org.apache.struts2.dispatcher.ServletDispatcherResult"/>
      <result-type name="invalidSubClass" class="<error descr="'MyClass' is not assignable to 'com.opensymphony.xwork2.Result'">MyClass</error>"/>

      <!-- "name" -->
      <!-- must be non-empty -->
      <result-type name=<error descr="Value must not be empty">""</error> class="org.apache.struts2.dispatcher.ServletDispatcherResult"/>

      <result-type name="<error descr="Result Type with such name already exists">DUPLICATED_NAME</error>" class="org.apache.struts2.dispatcher.ServletDispatcherResult"/>
      <result-type name="<error descr="Result Type with such name already exists">DUPLICATED_NAME</error>" class="org.apache.struts2.dispatcher.ServletDispatcherResult"/>

      <!-- default TODO only one "true" per package allowed -->
      <result-type name="validDefaultValue_true" class="org.apache.struts2.dispatcher.ServletDispatcherResult" default="true"/>
      <result-type name="validDefaultValue_false" class="org.apache.struts2.dispatcher.ServletDispatcherResult" default="false"/>
    </result-types>

  </package>

  <!-- access <result-type> inherited via "extends" -->
  <package name="extendResultType" extends="testResultType">

    <action name="testExtends">
      <result name="result1" type="validSubClass"/>

      <result name="result2" type="<error descr="Cannot resolve result-type 'INVALID_VALUE'">INVALID_VALUE</error>"/>
    </action>

  </package>

</struts>