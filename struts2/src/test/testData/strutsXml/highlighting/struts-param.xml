<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
    "http://struts.apache.org/dtds/struts-2.0.dtd">

<!-- tests for nested <param> -->

<struts>

  <!-- ACTION ============================================================= -->

  <package name="testActionParams">

    <action name="testParams" class="MyClass">
      <param name="param1">someValue</param>
      <param name="nested.nestedString">someValue</param>
      <param name="<error descr="Cannot resolve property ''"></error>"/>
      <param name="<error descr="Cannot resolve property 'INVALID_VALUE'">INVALID_VALUE</error>"/>

      <!-- type-checking -->
      <param name="nested.nestedBool">false</param>
      <param name="nested.nestedInt"><error descr="Cannot convert string 'INVALID_VALUE' to target class 'int'">INVALID_VALUE</error></param>
    </action>

    <action name="testDuplicateParams" class="MyClass">
      <param name="<error descr="Parameter with such name already exists">param1</error>">someValue</param>
      <param name="<error descr="Parameter with such name already exists">param1</error>">someValue2</param>
    </action>

    <action name="testParamValueWithExpressionIsSkipped" class="MyClass">
      <param name="nested.nestedBool">${true}</param>
    </action>

  </package>


  <!-- RESULT ============================================================ -->

  <package name="testResultParams">

    <result-types>
      <result-type name="not_default" class="com.opensymphony.xwork2.ActionChainResult" default="false"/>
      <result-type name="dispatcher" class="org.apache.struts2.dispatcher.ServletDispatcherResult" default="true"/>
    </result-types>

    <!-- result-type: explicit reference -->
    <action name="testResultParams">
      <result type="dispatcher">testResultParams.action
        <param name="parse">true</param>
        <param name="encode">true</param>
        <param name="<error descr="Cannot resolve property 'INVALID_VALUE'">INVALID_VALUE</error>"/>
      </result>
    </action>

    <!-- result-type: package-local default -->
    <action name="testResultParamsDefault">
      <result>testResultParams.action
        <param name="parse">true</param>
        <param name="encode">true</param>
        <param name="<error descr="Cannot resolve property 'INVALID_VALUE'">INVALID_VALUE</error>"/>
      </result>
    </action>


    <!-- property from Action-class -->
    <action name="testActionProperty" class="MyClass">
      <result>
        <param name="param1">fieldValue</param>
        <param name="<error descr="Cannot resolve property 'INVALID_VALUE'">INVALID_VALUE</error>">INVALID_VALUE</param>
      </result>
    </action>

  </package>


  <!-- default result-type from parent package -->
  <package name="testResultParamsDefaultFromExtended" extends="testResultParams">

    <action name="testResultParamsDefault">
      <result>testResultParams.action
        <param name="parse">true</param>
        <param name="encode">true</param>
        <param name="<error descr="Cannot resolve property 'INVALID_VALUE'">INVALID_VALUE</error>"/>
      </result>
    </action>

  </package>


  <!-- result-types pointing to action: allow any <param> "name" (STRPL-85) ======== -->
  <package name="testResultParamsWithActionResultType">
    <result-types>
      <result-type name="redirectAction" class="org.apache.struts2.dispatcher.ServletActionRedirectResult"/>
    </result-types>

    <action name="testResultParamsWithActionResultType">
      <result name="actionResult" type="redirectAction">
        <param name="actionName">value</param>
        <param name="anything">value</param>
        <param name="nothing">value</param>
      </result>
    </action>
  </package>

  <!-- same as before with inherited default result-type -->
  <package name="testResultParamsWithInheritedActionResultType" extends="testResultParamsWithActionResultType">
    <action name="testResultParamsWithActionResultType">
      <result name="actionResult">
        <param name="actionName">value</param>
        <param name="anything">value</param>
        <param name="nothing">value</param>
      </result>
    </action>
  </package>


  <!-- <result-type> ===================================================== -->
  <package name="testResultTypeParams">
     <result-types>
      <result-type name="redirectAction" class="org.apache.struts2.dispatcher.ServletActionRedirectResult">
        <param name="parse">true</param>
        <param name="<error descr="Cannot resolve property 'INVALID_VALUE'">INVALID_VALUE</error>">something</param>
        <param name="encode"><error descr="Cannot convert string 'INVALID_VALUE' to target class 'boolean'">INVALID_VALUE</error></param>
      </result-type>
    </result-types>
  </package>


  <!-- GLOBAL-RESULT ===================================================== -->

  <package name="testGlobalResultParams">

    <result-types>
      <result-type name="dispatcher" class="org.apache.struts2.dispatcher.ServletDispatcherResult" default="true"/>
    </result-types>

    <global-results>
      <result type="dispatcher">testAction.action
        <param name="parse">true</param>
        <param name="encode">true</param>
        <param name="<error descr="Cannot resolve property 'INVALID_VALUE'">INVALID_VALUE</error>"/>
      </result>
    </global-results>

    <action name="testAction"/>

  </package>


  <!-- INTERCEPTOR     =================================================== -->
  <package name="interceptorParams">
    <interceptors>
      <interceptor name="validation" class="org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor">
        <param name="declarative">false</param>
        <param name="<error descr="Cannot resolve property 'INVALID_VALUE'">INVALID_VALUE</error>">INVALID_VALUE</param>
      </interceptor>
    </interceptors>
  </package>


  <!-- INTERCEPTOR-REF =================================================== -->

  <package name="testInterceptorRefParams">

    <interceptors>

      <interceptor name="validation" class="org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor"/>

      <interceptor-stack name="testStack">
        <interceptor-ref name="validation">
          <param name="excludeMethods">someMethodName</param>
          <param name="<error descr="Cannot resolve property 'INVALID_VALUE'">INVALID_VALUE</error>"/>
        </interceptor-ref>
      </interceptor-stack>

      <!-- <param> referencing interceptor from stack, IDEA-68134 -->
      <interceptor-stack name="referencingStack">
        <interceptor-ref name="testStack">
          <param name="validation.excludeMethods">someMethodNames</param>
          <param name="validation.<error descr="Cannot resolve property ''"></error>">someMethodNames</param>
          <param name="validation.<error descr="Cannot resolve property 'INVALID_VALUE'">INVALID_VALUE</error>"/>

          <param name="<error descr="Cannot resolve interceptor 'INVALID_VALUE' in interceptor-stack 'testStack'">INVALID_VALUE</error>.property"></param>
        </interceptor-ref>
      </interceptor-stack>

    </interceptors>

  </package>

</struts>