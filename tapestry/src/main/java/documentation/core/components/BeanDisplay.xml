<element xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../presentation.xsd">
    <description>
        Used to display the properties of a bean, using an underlying org.apache.tapestry.beaneditor.BeanModel. The output is a series of div elements for the property names and property values.\
        Only properties that have a known data type are displayed.
    </description>

    <parameters>
        <parameter name="model">
            The model that identifies the parameters to be displayed, their order, and every other aspect. If not specified, a default bean model will be created from the type of the object bound\
            to the object parameter.
        </parameter>
        <parameter name="object">
            The object to be rendered; if not explicitly bound, a default binding to a property whose name matches this component's id will be used.
        </parameter>
        <parameter name="overrides">
            Where to search for local overrides of property display blocks as block parameters. Further, the container of the overrides is used as the source for overridden validation \
            messages. This is normally the component itself, but when the component is used within a BeanEditForm, it will be the BeanEditForm's block parameter that will be searched.
        </parameter>
        <parameter name="remove">
            A comma-separated list of property names to be removed from the org.apache.tapestry.beaneditor.BeanModel. The names are case-insensitive.
        </parameter>
        <parameter name="reorder">
            A comma-separated list of property names indicating the order in which the properties should be presented. The names are case insensitive. Any properties not indicated in the list \
            will be appended to the end of the display order.
        </parameter>
    </parameters>

    <examples>
       <![CDATA[
<p>
    The bean to display will be a property of the containing page. In this example we are making
    the bean a persistent property, but there are other options. Presumably, some other page
    obtains the bean and invokes the setBean() method.
</p>

<p>
    You may pass override parameters for specific properties, in which case you have control
    over how that property will be rendered. As an example, we'll render the lastName as upper-case.
</p>

<div class="section">MyBean.java</div>

<div class="source"><pre>
public class MyBean<br/>
{<br/>
    private long _id;<br/>
<br/>
    private String _firstName;<br/>
<br/>
    private String _lastName;<br/>
<br/>
    private int _age;<br/>
<br/>
    public long getId() { return _id; }<br/>
<br/>
    @NonVisual<br/>
    public void setId(long id) { _id = id; }<br/>
<br/>
    public String getFirstName() { return _firstName; }<br/>
<br/>
    public void setFirstName(String firstName) { _firstName = firstName; }<br/>
<br/>
    public String getLastName() { return _lastName; }<br/>
<br/>
    public void setLastName(String lastName) { _lastName = lastName; }<br/>
<br/>
    public int getAge() { return _age; }<br/>
<br/>
    public void setAge(int age) { _age = age; }<br/>
}</pre>
</div>

<p>The @NonVisual annotation prevents the id from being displayed.</p>

<div class="section">MyPage.java</div>

<div class="source"><pre>
public class MyPage<br/>
{<br/>
    @Persist<br/>
    private MyBean _bean;<br/>
<br/>
    public MyBean getBean()<br/>
    {<br/>
      return _bean;<br/>
    }<br/>
<br/>
    public void setBean(MyBean bean)<br/>
    {<br/>
      _bean = bean;<br/>
    }<br/>
}</pre>
</div>

<div class="section">MyPage.tml</div>

<div class="source"><pre>
&lt;html xmlns:t="http://tapestry.apache.org/schema/tapestry_5_1_0.xsd"&gt;<br/>
    &lt;body&gt;<br/>
        &lt;h1&gt;My Bean&lt;/h1&gt;<br/>
        &lt;t:beandisplay object="bean"&gt;<br/>
            &lt;t:parameter name="lastname"&gt;<br/>
                ${bean.lastname.toUpperCase()}<br/>
            &lt;/t:parameter&gt;<br/>
        &lt;/t:beandisplay&gt;<br/>
    &lt;/body&gt;<br/>
&lt;/html&gt;<br/>

</pre>
</div>

<p>
    The
    <code>&lt;t:parameter&gt;</code>
    element
    is an
    <i>override</i>
    for the property. The name is
    matched against a property of the bean.
</p>

<p>

    Here we are leveraging the ability to invoke methods as part of a property expression.
    We are also highlighting Tapestry's case insensitivity ("lastname" vs. "lastName"), though
    that does not yet apply to method names of beans.
</p>
	]]>
    </examples>

    <notes>
        <![CDATA[
<p>
    You can re-order the properties using the reorder parameter:
</p>

<div class="source">
    <pre>&lt;t:beandisplay object="bean" reorder="lastname,firstname"/&gt;</pre>
</div>

<p>
    You can accomplish the same thing by changing the order of the
    getter methods in the bean class (that sets the default order).
</p>

<p>
    You can also remove properties with the remove parameter, which is equivalent to the
    @NonVisual annotation.
</p>

<p>
    You might find
    <code>&lt;t:beandisplay object="this"/&gt;</code>
    useful on occasion. It will display all the properties of the current page.
</p>
	]]>
    </notes>
</element>