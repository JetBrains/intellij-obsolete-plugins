<?xml version='1.0'?>
<signatures version='1.0'>
<struct type='{_CFAllocatorContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;allocate&quot;^?&quot;reallocate&quot;^?&quot;deallocate&quot;^?&quot;preferredSize&quot;^?}' name='CFAllocatorContext'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^v' name='info' declared_type='void*'/>
<field type='^?' name='retain' declared_type='CFAllocatorRetainCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='CFAllocatorReleaseCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFAllocatorCopyDescriptionCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' name='allocate' declared_type='CFAllocatorAllocateCallBack' function_pointer='true'>
<arg type='l' declared_type='CFIndex'/>
<arg type='L' declared_type='CFOptionFlags'/>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
<field type='^?' name='reallocate' declared_type='CFAllocatorReallocateCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<arg type='l' declared_type='CFIndex'/>
<arg type='L' declared_type='CFOptionFlags'/>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
<field type='^?' name='deallocate' declared_type='CFAllocatorDeallocateCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='preferredSize' declared_type='CFAllocatorPreferredSizeCallBack' function_pointer='true'>
<arg type='l' declared_type='CFIndex'/>
<arg type='L' declared_type='CFOptionFlags'/>
<arg type='^v' declared_type='void*'/>
<retval type='l' declared_type='CFIndex'/>
</field>
</struct>
<struct type='{_CFArrayCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?}' name='CFArrayCallBacks'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^?' name='retain' declared_type='CFArrayRetainCallBack' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='CFArrayReleaseCallBack' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFArrayCopyDescriptionCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' name='equal' declared_type='CFArrayEqualCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</field>
</struct>
<struct type='{_CFBagCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}' name='CFBagCallBacks'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^?' name='retain' declared_type='CFBagRetainCallBack' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='CFBagReleaseCallBack' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFBagCopyDescriptionCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' name='equal' declared_type='CFBagEqualCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</field>
<field type='^?' name='hash' declared_type='CFBagHashCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='L' declared_type='CFHashCode'/>
</field>
</struct>
<struct type='{_CFBinaryHeapCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;compare&quot;^?}' name='CFBinaryHeapCallBacks'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^?' name='retain' declared_type='void *(*)(CFAllocatorRef, void *)' const='true' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='void (*)(CFAllocatorRef, void *)' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFStringRef (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' name='compare' declared_type='CFComparisonResult (*)(void *, void *, void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='l' declared_type='CFComparisonResult'/>
</field>
</struct>
<struct type='{_CFBinaryHeapCompareContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFBinaryHeapCompareContext'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^v' name='info' declared_type='void*'/>
<field type='^?' name='retain' declared_type='void *(*)(void *)' const='true' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='void (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFStringRef (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFDictionaryKeyCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}' name='CFDictionaryKeyCallBacks'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^?' name='retain' declared_type='CFDictionaryRetainCallBack' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='CFDictionaryReleaseCallBack' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFDictionaryCopyDescriptionCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' name='equal' declared_type='CFDictionaryEqualCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</field>
<field type='^?' name='hash' declared_type='CFDictionaryHashCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='L' declared_type='CFHashCode'/>
</field>
</struct>
<struct type='{_CFDictionaryValueCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?}' name='CFDictionaryValueCallBacks'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^?' name='retain' declared_type='CFDictionaryRetainCallBack' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='CFDictionaryReleaseCallBack' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFDictionaryCopyDescriptionCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' name='equal' declared_type='CFDictionaryEqualCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</field>
</struct>
<struct type='{_CFFileDescriptorContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFFileDescriptorContext'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^v' name='info' declared_type='void*'/>
<field type='^?' name='retain' declared_type='void *(*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
<field type='^?' name='release' declared_type='void (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFStringRef (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFGregorianDate=&quot;year&quot;i&quot;month&quot;c&quot;day&quot;c&quot;hour&quot;c&quot;minute&quot;c&quot;second&quot;d}' name='CFGregorianDate'>
<field type='l' name='year' declared_type='SInt32'/>
<field type='c' name='month' declared_type='SInt8'/>
<field type='c' name='day' declared_type='SInt8'/>
<field type='c' name='hour' declared_type='SInt8'/>
<field type='c' name='minute' declared_type='SInt8'/>
<field type='d' name='second' declared_type='double'/>
</struct>
<struct type='{_CFGregorianUnits=&quot;years&quot;i&quot;months&quot;i&quot;days&quot;i&quot;hours&quot;i&quot;minutes&quot;i&quot;seconds&quot;d}' name='CFGregorianUnits'>
<field type='l' name='years' declared_type='SInt32'/>
<field type='l' name='months' declared_type='SInt32'/>
<field type='l' name='days' declared_type='SInt32'/>
<field type='l' name='hours' declared_type='SInt32'/>
<field type='l' name='minutes' declared_type='SInt32'/>
<field type='d' name='seconds' declared_type='double'/>
</struct>
<struct type='{_CFMachPortContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFMachPortContext'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^v' name='info' declared_type='void*'/>
<field type='^?' name='retain' declared_type='void *(*)(void *)' const='true' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='void (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFStringRef (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFMessagePortContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFMessagePortContext'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^v' name='info' declared_type='void*'/>
<field type='^?' name='retain' declared_type='void *(*)(void *)' const='true' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='void (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFStringRef (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFRange=&quot;location&quot;i&quot;length&quot;i}' name='CFRange'>
<field type='l' name='location' declared_type='CFIndex'/>
<field type='l' name='length' declared_type='CFIndex'/>
</struct>
<struct type='{_CFRunLoopObserverContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFRunLoopObserverContext'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^v' name='info' declared_type='void*'/>
<field type='^?' name='retain' declared_type='void *(*)(void *)' const='true' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='void (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFStringRef (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFRunLoopSourceContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?&quot;schedule&quot;^?&quot;cancel&quot;^?&quot;perform&quot;^?}' name='CFRunLoopSourceContext'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^v' name='info' declared_type='void*'/>
<field type='^?' name='retain' declared_type='void *(*)(void *)' const='true' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='void (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFStringRef (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' name='equal' declared_type='Boolean (*)(void *, void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</field>
<field type='^?' name='hash' declared_type='CFHashCode (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='L' declared_type='CFHashCode'/>
</field>
<field type='^?' name='schedule' declared_type='void (*)(void *, CFRunLoopRef, CFStringRef)' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef'/>
<arg type='^{__CFString=}' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='cancel' declared_type='void (*)(void *, CFRunLoopRef, CFStringRef)' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef'/>
<arg type='^{__CFString=}' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='perform' declared_type='void (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
</struct>
<struct type='{_CFRunLoopSourceContext1=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?&quot;getPort&quot;^?&quot;perform&quot;^?}' name='CFRunLoopSourceContext1'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^v' name='info' declared_type='void*'/>
<field type='^?' name='retain' declared_type='void *(*)(void *)' const='true' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='void (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFStringRef (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' name='equal' declared_type='Boolean (*)(void *, void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</field>
<field type='^?' name='hash' declared_type='CFHashCode (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='L' declared_type='CFHashCode'/>
</field>
<field type='^?' name='getPort' declared_type='mach_port_t (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='I' declared_type='mach_port_t'/>
</field>
<field type='^?' name='perform' declared_type='void *(*)(void *, CFIndex, CFAllocatorRef, void *)' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<arg type='l' declared_type='CFIndex'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
</struct>
<struct type='{_CFRunLoopTimerContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFRunLoopTimerContext'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^v' name='info' declared_type='void*'/>
<field type='^?' name='retain' declared_type='void *(*)(void *)' const='true' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='void (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFStringRef (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFSetCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}' name='CFSetCallBacks'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^?' name='retain' declared_type='CFSetRetainCallBack' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='CFSetReleaseCallBack' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFSetCopyDescriptionCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' name='equal' declared_type='CFSetEqualCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</field>
<field type='^?' name='hash' declared_type='CFSetHashCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='L' declared_type='CFHashCode'/>
</field>
</struct>
<struct type='{_CFSocketContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFSocketContext'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^v' name='info' declared_type='void*'/>
<field type='^?' name='retain' declared_type='void *(*)(void *)' const='true' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='void (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFStringRef (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFSocketSignature=&quot;protocolFamily&quot;i&quot;socketType&quot;i&quot;protocol&quot;i&quot;address&quot;^{__CFData}}' name='CFSocketSignature'>
<field type='l' name='protocolFamily' declared_type='SInt32'/>
<field type='l' name='socketType' declared_type='SInt32'/>
<field type='l' name='protocol' declared_type='SInt32'/>
<field type='^{__CFData=}' name='address' declared_type='CFDataRef'/>
</struct>
<struct type='{_CFStreamClientContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFStreamClientContext'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^v' name='info' declared_type='void*'/>
<field type='^?' name='retain' declared_type='void *(*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
<field type='^?' name='release' declared_type='void (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFStringRef (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFStreamError=&quot;domain&quot;i&quot;error&quot;i}' name='CFStreamError'>
<field type='l' name='domain' declared_type='CFIndex'/>
<field type='l' name='error' declared_type='SInt32'/>
</struct>
<struct type='{_CFStringInlineBuffer=&quot;buffer&quot;[64S]&quot;theString&quot;^{__CFString}&quot;directBuffer&quot;^S&quot;rangeToBuffer&quot;{_CFRange=&quot;location&quot;i&quot;length&quot;i}&quot;bufferedRangeStart&quot;i&quot;bufferedRangeEnd&quot;i}' name='CFStringInlineBuffer'>
<field type='[64S]' name='buffer' declared_type='UniChar*'/>
<field type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<field type='^S' name='directBuffer' declared_type='UniChar*' const='true'/>
<field type='{_CFRange=&quot;location&quot;i&quot;length&quot;i}' name='rangeToBuffer' declared_type='CFRange'/>
<field type='l' name='bufferedRangeStart' declared_type='CFIndex'/>
<field type='l' name='bufferedRangeEnd' declared_type='CFIndex'/>
</struct>
<struct type='{_CFSwappedFloat32=&quot;v&quot;I}' name='CFSwappedFloat32'>
<field type='I' name='v' declared_type='uint32_t'/>
</struct>
<struct type='{_CFSwappedFloat64=&quot;v&quot;Q}' name='CFSwappedFloat64'>
<field type='Q' name='v' declared_type='uint64_t'/>
</struct>
<struct type='{_CFTreeContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFTreeContext'>
<field type='l' name='version' declared_type='CFIndex'/>
<field type='^v' name='info' declared_type='void*'/>
<field type='^?' name='retain' declared_type='CFTreeRetainCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' name='release' declared_type='CFTreeReleaseCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' name='copyDescription' declared_type='CFTreeCopyDescriptionCallBack' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFUUIDBytes=&quot;byte0&quot;C&quot;byte1&quot;C&quot;byte2&quot;C&quot;byte3&quot;C&quot;byte4&quot;C&quot;byte5&quot;C&quot;byte6&quot;C&quot;byte7&quot;C&quot;byte8&quot;C&quot;byte9&quot;C&quot;byte10&quot;C&quot;byte11&quot;C&quot;byte12&quot;C&quot;byte13&quot;C&quot;byte14&quot;C&quot;byte15&quot;C}' name='CFUUIDBytes'>
<field type='C' name='byte0' declared_type='UInt8'/>
<field type='C' name='byte1' declared_type='UInt8'/>
<field type='C' name='byte2' declared_type='UInt8'/>
<field type='C' name='byte3' declared_type='UInt8'/>
<field type='C' name='byte4' declared_type='UInt8'/>
<field type='C' name='byte5' declared_type='UInt8'/>
<field type='C' name='byte6' declared_type='UInt8'/>
<field type='C' name='byte7' declared_type='UInt8'/>
<field type='C' name='byte8' declared_type='UInt8'/>
<field type='C' name='byte9' declared_type='UInt8'/>
<field type='C' name='byte10' declared_type='UInt8'/>
<field type='C' name='byte11' declared_type='UInt8'/>
<field type='C' name='byte12' declared_type='UInt8'/>
<field type='C' name='byte13' declared_type='UInt8'/>
<field type='C' name='byte14' declared_type='UInt8'/>
<field type='C' name='byte15' declared_type='UInt8'/>
</struct>
<struct type='{IUnknownVTbl=&quot;_reserved&quot;^v&quot;QueryInterface&quot;^?&quot;AddRef&quot;^?&quot;Release&quot;^?}' name='IUnknownVTbl'>
<field type='^v' name='_reserved' declared_type='void*'/>
<field type='^?' name='QueryInterface' declared_type='HRESULT (*)(void *, REFIID, LPVOID *)' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<arg type='{_REFIID=CCCCCCCCCCCCCCCC}' declared_type='REFIID'/>
<arg type='^^v' declared_type='LPVOID*'/>
<retval type='l' declared_type='HRESULT'/>
</field>
<field type='^?' name='AddRef' declared_type='ULONG (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='L' declared_type='ULONG'/>
</field>
<field type='^?' name='Release' declared_type='ULONG (*)(void *)' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='L' declared_type='ULONG'/>
</field>
</struct>
<struct type='{_REFIID=&quot;byte0&quot;C&quot;byte1&quot;C&quot;byte2&quot;C&quot;byte3&quot;C&quot;byte4&quot;C&quot;byte5&quot;C&quot;byte6&quot;C&quot;byte7&quot;C&quot;byte8&quot;C&quot;byte9&quot;C&quot;byte10&quot;C&quot;byte11&quot;C&quot;byte12&quot;C&quot;byte13&quot;C&quot;byte14&quot;C&quot;byte15&quot;C}' name='REFIID'>
<field type='C' name='byte0' declared_type='UInt8'/>
<field type='C' name='byte1' declared_type='UInt8'/>
<field type='C' name='byte2' declared_type='UInt8'/>
<field type='C' name='byte3' declared_type='UInt8'/>
<field type='C' name='byte4' declared_type='UInt8'/>
<field type='C' name='byte5' declared_type='UInt8'/>
<field type='C' name='byte6' declared_type='UInt8'/>
<field type='C' name='byte7' declared_type='UInt8'/>
<field type='C' name='byte8' declared_type='UInt8'/>
<field type='C' name='byte9' declared_type='UInt8'/>
<field type='C' name='byte10' declared_type='UInt8'/>
<field type='C' name='byte11' declared_type='UInt8'/>
<field type='C' name='byte12' declared_type='UInt8'/>
<field type='C' name='byte13' declared_type='UInt8'/>
<field type='C' name='byte14' declared_type='UInt8'/>
<field type='C' name='byte15' declared_type='UInt8'/>
</struct>
<cftype type='^{__CFAllocator=}' name='CFAllocatorRef'/>
<cftype type='^{__CFArray=}' name='CFArrayRef'/>
<cftype type='^{__CFAttributedString=}' name='CFAttributedStringRef'/>
<cftype type='^{__CFBag=}' name='CFBagRef'/>
<cftype type='^{__CFBinaryHeap=}' name='CFBinaryHeapRef'/>
<cftype type='^{__CFBitVector=}' name='CFBitVectorRef'/>
<cftype type='^{__CFBoolean=}' name='CFBooleanRef'/>
<cftype type='^{__CFBundle=}' name='CFBundleRef'/>
<cftype type='^{__CFCalendar=}' name='CFCalendarRef'/>
<cftype type='^{__CFCharacterSet=}' name='CFCharacterSetRef'/>
<cftype type='^{__CFData=}' name='CFDataRef'/>
<cftype type='^{__CFDateFormatter=}' name='CFDateFormatterRef'/>
<cftype type='^{__CFDate=}' name='CFDateRef'/>
<cftype type='^{__CFDictionary=}' name='CFDictionaryRef'/>
<cftype type='^{__CFError=}' name='CFErrorRef'/>
<cftype type='^{__CFFileDescriptor=}' name='CFFileDescriptorRef'/>
<cftype type='^{__CFFileSecurity=}' name='CFFileSecurityRef'/>
<cftype type='^{__CFLocale=}' name='CFLocaleRef'/>
<cftype type='^{__CFMachPort=}' name='CFMachPortRef'/>
<cftype type='^{__CFMessagePort=}' name='CFMessagePortRef'/>
<cftype type='^{__CFArray=}' name='CFMutableArrayRef'/>
<cftype type='^{__CFAttributedString=}' name='CFMutableAttributedStringRef'/>
<cftype type='^{__CFBag=}' name='CFMutableBagRef'/>
<cftype type='^{__CFBitVector=}' name='CFMutableBitVectorRef'/>
<cftype type='^{__CFCharacterSet=}' name='CFMutableCharacterSetRef'/>
<cftype type='^{__CFData=}' name='CFMutableDataRef'/>
<cftype type='^{__CFDictionary=}' name='CFMutableDictionaryRef'/>
<cftype type='^{__CFSet=}' name='CFMutableSetRef'/>
<cftype type='^{__CFString=}' name='CFMutableStringRef'/>
<cftype type='^{__CFNotificationCenter=}' name='CFNotificationCenterRef'/>
<cftype type='^{__CFNull=}' name='CFNullRef'/>
<cftype type='^{__CFNumberFormatter=}' name='CFNumberFormatterRef'/>
<cftype type='^{__CFNumber=}' name='CFNumberRef'/>
<cftype type='^{__CFPlugInInstance=}' name='CFPlugInInstanceRef'/>
<cftype type='^{__CFBundle=}' name='CFPlugInRef'/>
<cftype type='^{__CFReadStream=}' name='CFReadStreamRef'/>
<cftype type='^{__CFRunLoopObserver=}' name='CFRunLoopObserverRef'/>
<cftype type='^{__CFRunLoop=}' name='CFRunLoopRef'/>
<cftype type='^{__CFRunLoopSource=}' name='CFRunLoopSourceRef'/>
<cftype type='^{__CFRunLoopTimer=}' name='CFRunLoopTimerRef'/>
<cftype type='^{__CFSet=}' name='CFSetRef'/>
<cftype type='^{__CFSocket=}' name='CFSocketRef'/>
<cftype type='^{__CFString=}' name='CFStringRef'/>
<cftype type='^{__CFStringTokenizer=}' name='CFStringTokenizerRef'/>
<cftype type='^{__CFTimeZone=}' name='CFTimeZoneRef'/>
<cftype type='^{__CFTree=}' name='CFTreeRef'/>
<cftype type='^{__CFURLEnumerator=}' name='CFURLEnumeratorRef'/>
<cftype type='^{__CFURL=}' name='CFURLRef'/>
<cftype type='^{__CFUUID=}' name='CFUUIDRef'/>
<cftype type='^{__CFWriteStream=}' name='CFWriteStreamRef'/>
<constant type='d' name='kCFAbsoluteTimeIntervalSince1904' declared_type='CFTimeInterval' const='true'/>
<constant type='d' name='kCFAbsoluteTimeIntervalSince1970' declared_type='CFTimeInterval' const='true'/>
<constant type='^{__CFAllocator=}' name='kCFAllocatorDefault' declared_type='CFAllocatorRef' const='true'/>
<constant type='^{__CFAllocator=}' name='kCFAllocatorMalloc' declared_type='CFAllocatorRef' const='true'/>
<constant type='^{__CFAllocator=}' name='kCFAllocatorMallocZone' declared_type='CFAllocatorRef' const='true'/>
<constant type='^{__CFAllocator=}' name='kCFAllocatorNull' declared_type='CFAllocatorRef' const='true'/>
<constant type='^{__CFAllocator=}' name='kCFAllocatorSystemDefault' declared_type='CFAllocatorRef' const='true'/>
<constant type='^{__CFAllocator=}' name='kCFAllocatorUseContext' declared_type='CFAllocatorRef' const='true'/>
<constant type='^{__CFBoolean=}' name='kCFBooleanFalse' declared_type='CFBooleanRef' const='true'/>
<constant type='^{__CFBoolean=}' name='kCFBooleanTrue' declared_type='CFBooleanRef' const='true'/>
<constant type='^{__CFString=}' name='kCFBuddhistCalendar' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFBundleDevelopmentRegionKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFBundleExecutableKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFBundleIdentifierKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFBundleInfoDictionaryVersionKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFBundleLocalizationsKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFBundleNameKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFBundleVersionKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFChineseCalendar' declared_type='CFStringRef' const='true'/>
<constant type='{_CFBagCallBacks=i^?^?^?^?^?}' name='kCFCopyStringBagCallBacks' declared_type='CFBagCallBacks' const='true'/>
<constant type='{_CFDictionaryKeyCallBacks=i^?^?^?^?^?}' name='kCFCopyStringDictionaryKeyCallBacks' declared_type='CFDictionaryKeyCallBacks' const='true'/>
<constant type='{_CFSetCallBacks=i^?^?^?^?^?}' name='kCFCopyStringSetCallBacks' declared_type='CFSetCallBacks' const='true'/>
<constant type='d' name='kCFCoreFoundationVersionNumber' declared_type='double'/>
<constant type='^{__CFString=}' name='kCFDateFormatterAMSymbol' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterCalendar' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterCalendarName' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterDefaultDate' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterDefaultFormat' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterDoesRelativeDateFormattingKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterEraSymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterGregorianStartDate' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterIsLenient' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterLongEraSymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterMonthSymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterPMSymbol' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterQuarterSymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterShortMonthSymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterShortQuarterSymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterShortStandaloneMonthSymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterShortStandaloneQuarterSymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterShortStandaloneWeekdaySymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterShortWeekdaySymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterStandaloneMonthSymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterStandaloneQuarterSymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterStandaloneWeekdaySymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterTimeZone' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterTwoDigitStartDate' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterVeryShortMonthSymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterVeryShortStandaloneMonthSymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterVeryShortStandaloneWeekdaySymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterVeryShortWeekdaySymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFDateFormatterWeekdaySymbols' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFErrorDescriptionKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFErrorDomainCocoa' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFErrorDomainMach' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFErrorDomainOSStatus' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFErrorDomainPOSIX' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFErrorFilePathKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFErrorLocalizedDescriptionKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFErrorLocalizedFailureReasonKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFErrorLocalizedRecoverySuggestionKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFErrorURLKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFErrorUnderlyingErrorKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFGregorianCalendar' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFHebrewCalendar' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFISO8601Calendar' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFIndianCalendar' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFIslamicCalendar' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFIslamicCivilCalendar' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFJapaneseCalendar' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleAlternateQuotationBeginDelimiterKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleAlternateQuotationEndDelimiterKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleCalendar' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleCalendarIdentifier' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleCollationIdentifier' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleCollatorIdentifier' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleCountryCode' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleCurrencyCode' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleCurrencySymbol' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleCurrentLocaleDidChangeNotification' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleDecimalSeparator' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleExemplarCharacterSet' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleGroupingSeparator' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleIdentifier' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleLanguageCode' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleMeasurementSystem' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleQuotationBeginDelimiterKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleQuotationEndDelimiterKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleScriptCode' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleUsesMetricSystem' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFLocaleVariantCode' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFNull=}' name='kCFNull' declared_type='CFNullRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterAlwaysShowDecimalSeparator' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterCurrencyCode' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterCurrencyDecimalSeparator' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterCurrencyGroupingSeparator' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterCurrencySymbol' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterDecimalSeparator' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterDefaultFormat' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterExponentSymbol' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterFormatWidth' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterGroupingSeparator' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterGroupingSize' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterInfinitySymbol' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterInternationalCurrencySymbol' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterIsLenient' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterMaxFractionDigits' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterMaxIntegerDigits' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterMaxSignificantDigits' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterMinFractionDigits' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterMinIntegerDigits' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterMinSignificantDigits' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterMinusSign' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterMultiplier' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterNaNSymbol' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterNegativePrefix' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterNegativeSuffix' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterPaddingCharacter' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterPaddingPosition' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterPerMillSymbol' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterPercentSymbol' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterPlusSign' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterPositivePrefix' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterPositiveSuffix' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterRoundingIncrement' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterRoundingMode' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterSecondaryGroupingSize' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterUseGroupingSeparator' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterUseSignificantDigits' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFNumberFormatterZeroSymbol' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFNumber=}' name='kCFNumberNaN' declared_type='CFNumberRef' const='true'/>
<constant type='^{__CFNumber=}' name='kCFNumberNegativeInfinity' declared_type='CFNumberRef' const='true'/>
<constant type='^{__CFNumber=}' name='kCFNumberPositiveInfinity' declared_type='CFNumberRef' const='true'/>
<constant type='^{__CFString=}' name='kCFPersianCalendar' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFPlugInDynamicRegisterFunctionKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFPlugInDynamicRegistrationKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFPlugInFactoriesKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFPlugInTypesKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFPlugInUnloadFunctionKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFPreferencesAnyApplication' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFPreferencesAnyHost' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFPreferencesAnyUser' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFPreferencesCurrentApplication' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFPreferencesCurrentHost' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFPreferencesCurrentUser' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFRepublicOfChinaCalendar' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFRunLoopCommonModes' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFRunLoopDefaultMode' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFSocketCommandKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFSocketErrorKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFSocketNameKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFSocketRegisterCommand' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFSocketResultKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFSocketRetrieveCommand' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFSocketValueKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStreamPropertyAppendToFile' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStreamPropertyDataWritten' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStreamPropertyFileCurrentOffset' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStreamPropertySocketNativeHandle' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStreamPropertySocketRemoteHostName' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStreamPropertySocketRemotePortNumber' declared_type='CFStringRef' const='true'/>
<constant type='{_CFBinaryHeapCallBacks=i^?^?^?^?}' name='kCFStringBinaryHeapCallBacks' declared_type='CFBinaryHeapCallBacks' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformFullwidthHalfwidth' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformHiraganaKatakana' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformLatinArabic' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformLatinCyrillic' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformLatinGreek' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformLatinHangul' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformLatinHebrew' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformLatinHiragana' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformLatinKatakana' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformLatinThai' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformMandarinLatin' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformStripCombiningMarks' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformStripDiacritics' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformToLatin' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformToUnicodeName' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFStringTransformToXMLHex' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFTimeZoneSystemTimeZoneDidChangeNotification' declared_type='CFStringRef' const='true'/>
<constant type='{_CFArrayCallBacks=i^?^?^?^?}' name='kCFTypeArrayCallBacks' declared_type='CFArrayCallBacks' const='true'/>
<constant type='{_CFBagCallBacks=i^?^?^?^?^?}' name='kCFTypeBagCallBacks' declared_type='CFBagCallBacks' const='true'/>
<constant type='{_CFDictionaryKeyCallBacks=i^?^?^?^?^?}' name='kCFTypeDictionaryKeyCallBacks' declared_type='CFDictionaryKeyCallBacks' const='true'/>
<constant type='{_CFDictionaryValueCallBacks=i^?^?^?^?}' name='kCFTypeDictionaryValueCallBacks' declared_type='CFDictionaryValueCallBacks' const='true'/>
<constant type='{_CFSetCallBacks=i^?^?^?^?^?}' name='kCFTypeSetCallBacks' declared_type='CFSetCallBacks' const='true'/>
<constant type='^{__CFString=}' name='kCFURLAttributeModificationDateKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLContentAccessDateKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLContentModificationDateKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLCreationDateKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLCustomIconKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLEffectiveIconKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileAllocatedSizeKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileDirectoryContents' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileExists' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileLastModificationTime' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileLength' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileOwnerID' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFilePOSIXMode' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileResourceIdentifierKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileResourceTypeBlockSpecial' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileResourceTypeCharacterSpecial' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileResourceTypeDirectory' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileResourceTypeKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileResourceTypeNamedPipe' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileResourceTypeRegular' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileResourceTypeSocket' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileResourceTypeSymbolicLink' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileResourceTypeUnknown' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileSecurityKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLFileSizeKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLHTTPStatusCode' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLHTTPStatusLine' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLHasHiddenExtensionKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLIsAliasFileKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLIsDirectoryKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLIsExcludedFromBackupKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLIsExecutableKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLIsHiddenKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLIsMountTriggerKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLIsPackageKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLIsReadableKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLIsRegularFileKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLIsSymbolicLinkKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLIsSystemImmutableKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLIsUbiquitousItemKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLIsUserImmutableKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLIsVolumeKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLIsWritableKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLKeysOfUnsetValuesKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLLabelColorKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLLabelNumberKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLLinkCountKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLLocalizedLabelKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLLocalizedNameKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLLocalizedTypeDescriptionKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLNameKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLParentDirectoryURLKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLPreferredIOBlockSizeKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLTotalFileAllocatedSizeKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLTotalFileSizeKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLTypeIdentifierKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLUbiquitousItemHasUnresolvedConflictsKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLUbiquitousItemIsDownloadedKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLUbiquitousItemIsDownloadingKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLUbiquitousItemIsUploadedKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLUbiquitousItemIsUploadingKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLUbiquitousItemPercentDownloadedKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLUbiquitousItemPercentUploadedKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeAvailableCapacityKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeCreationDateKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeIdentifierKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeIsAutomountedKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeIsBrowsableKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeIsEjectableKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeIsInternalKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeIsJournalingKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeIsLocalKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeIsReadOnlyKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeIsRemovableKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeLocalizedFormatDescriptionKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeLocalizedNameKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeMaximumFileSizeKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeNameKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeResourceCountKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeSupportsAdvisoryFileLockingKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeSupportsCasePreservedNamesKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeSupportsCaseSensitiveNamesKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeSupportsExtendedSecurityKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeSupportsHardLinksKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeSupportsJournalingKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeSupportsPersistentIDsKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeSupportsRenamingKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeSupportsRootDirectoryDatesKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeSupportsSparseFilesKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeSupportsSymbolicLinksKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeSupportsVolumeSizesKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeSupportsZeroRunsKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeTotalCapacityKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeURLForRemountingKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeURLKey' declared_type='CFStringRef' const='true'/>
<constant type='^{__CFString=}' name='kCFURLVolumeUUIDStringKey' declared_type='CFStringRef' const='true'/>
<enum name='CFByteOrderBigEndian' value='2'/>
<enum name='CFByteOrderLittleEndian' value='1'/>
<enum name='CFByteOrderUnknown' value='0'/>
<enum name='CFNotificationSuspensionBehaviorCoalesce' value='2'/>
<enum name='CFNotificationSuspensionBehaviorDeliverImmediately' value='4'/>
<enum name='CFNotificationSuspensionBehaviorDrop' value='1'/>
<enum name='CFNotificationSuspensionBehaviorHold' value='3'/>
<enum name='CF_USE_OSBYTEORDER_H' value='1'/>
<enum name='COREFOUNDATION_CFPLUGINCOM_SEPARATE' value='1'/>
<enum name='E_ABORT' value='-2147483641'/>
<enum name='E_ACCESSDENIED' value='-2147483639'/>
<enum name='E_FAIL' value='-2147483640'/>
<enum name='E_HANDLE' value='-2147483642'/>
<enum name='E_INVALIDARG' value='-2147483645'/>
<enum name='E_NOINTERFACE' value='-2147483644'/>
<enum name='E_NOTIMPL' value='-2147483647'/>
<enum name='E_OUTOFMEMORY' value='-2147483646'/>
<enum name='E_POINTER' value='-2147483643'/>
<enum name='E_UNEXPECTED' value='-2147418113'/>
<enum name='FALSE' value='0'/>
<enum name='SEVERITY_ERROR' value='1'/>
<enum name='SEVERITY_SUCCESS' value='0'/>
<enum name='S_FALSE' value='1'/>
<enum name='S_OK' value='0'/>
<enum name='TRUE' value='1'/>
<enum name='kCFBookmarkResolutionWithoutMountingMask' value='512'/>
<enum name='kCFBookmarkResolutionWithoutUIMask' value='256'/>
<enum name='kCFBundleExecutableArchitectureI386' value='7'/>
<enum name='kCFBundleExecutableArchitecturePPC' value='18'/>
<enum name='kCFBundleExecutableArchitecturePPC64' value='16777234'/>
<enum name='kCFBundleExecutableArchitectureX86_64' value='16777223'/>
<enum name='kCFCalendarComponentsWrap' value='1'/>
<enum name='kCFCalendarUnitDay' value='16'/>
<enum name='kCFCalendarUnitEra' value='2'/>
<enum name='kCFCalendarUnitHour' value='32'/>
<enum name='kCFCalendarUnitMinute' value='64'/>
<enum name='kCFCalendarUnitMonth' value='8'/>
<enum name='kCFCalendarUnitQuarter' value='2048'/>
<enum name='kCFCalendarUnitSecond' value='128'/>
<enum name='kCFCalendarUnitWeek' value='256'/>
<enum name='kCFCalendarUnitWeekOfMonth' value='4096'/>
<enum name='kCFCalendarUnitWeekOfYear' value='8192'/>
<enum name='kCFCalendarUnitWeekday' value='512'/>
<enum name='kCFCalendarUnitWeekdayOrdinal' value='1024'/>
<enum name='kCFCalendarUnitYear' value='4'/>
<enum name='kCFCalendarUnitYearForWeekOfYear' value='16384'/>
<enum name='kCFCharacterSetAlphaNumeric' value='10'/>
<enum name='kCFCharacterSetCapitalizedLetter' value='13'/>
<enum name='kCFCharacterSetControl' value='1'/>
<enum name='kCFCharacterSetDecimalDigit' value='4'/>
<enum name='kCFCharacterSetDecomposable' value='9'/>
<enum name='kCFCharacterSetIllegal' value='12'/>
<enum name='kCFCharacterSetLetter' value='5'/>
<enum name='kCFCharacterSetLowercaseLetter' value='6'/>
<enum name='kCFCharacterSetNewline' value='15'/>
<enum name='kCFCharacterSetNonBase' value='8'/>
<enum name='kCFCharacterSetPunctuation' value='11'/>
<enum name='kCFCharacterSetSymbol' value='14'/>
<enum name='kCFCharacterSetUppercaseLetter' value='7'/>
<enum name='kCFCharacterSetWhitespace' value='2'/>
<enum name='kCFCharacterSetWhitespaceAndNewline' value='3'/>
<enum name='kCFCompareAnchored' value='8'/>
<enum name='kCFCompareBackwards' value='4'/>
<enum name='kCFCompareCaseInsensitive' value='1'/>
<enum name='kCFCompareDiacriticInsensitive' value='128'/>
<enum name='kCFCompareEqualTo' value='0'/>
<enum name='kCFCompareForcedOrdering' value='512'/>
<enum name='kCFCompareGreaterThan' value='1'/>
<enum name='kCFCompareLessThan' value='-1'/>
<enum name='kCFCompareLocalized' value='32'/>
<enum name='kCFCompareNonliteral' value='16'/>
<enum name='kCFCompareNumerically' value='64'/>
<enum name='kCFCompareWidthInsensitive' value='256'/>
<enum name='kCFCoreFoundationVersionNumber10_0' value='196.40'/>
<enum name='kCFCoreFoundationVersionNumber10_0_3' value='196.50'/>
<enum name='kCFCoreFoundationVersionNumber10_1' value='226.00'/>
<enum name='kCFCoreFoundationVersionNumber10_1_1' value='226.00'/>
<enum name='kCFCoreFoundationVersionNumber10_1_2' value='227.20'/>
<enum name='kCFCoreFoundationVersionNumber10_1_3' value='227.20'/>
<enum name='kCFCoreFoundationVersionNumber10_1_4' value='227.30'/>
<enum name='kCFCoreFoundationVersionNumber10_2' value='263.00'/>
<enum name='kCFCoreFoundationVersionNumber10_2_1' value='263.10'/>
<enum name='kCFCoreFoundationVersionNumber10_2_2' value='263.10'/>
<enum name='kCFCoreFoundationVersionNumber10_2_3' value='263.30'/>
<enum name='kCFCoreFoundationVersionNumber10_2_4' value='263.30'/>
<enum name='kCFCoreFoundationVersionNumber10_2_5' value='263.50'/>
<enum name='kCFCoreFoundationVersionNumber10_2_6' value='263.50'/>
<enum name='kCFCoreFoundationVersionNumber10_2_7' value='263.50'/>
<enum name='kCFCoreFoundationVersionNumber10_2_8' value='263.50'/>
<enum name='kCFCoreFoundationVersionNumber10_3' value='299.00'/>
<enum name='kCFCoreFoundationVersionNumber10_3_1' value='299.00'/>
<enum name='kCFCoreFoundationVersionNumber10_3_2' value='299.00'/>
<enum name='kCFCoreFoundationVersionNumber10_3_3' value='299.30'/>
<enum name='kCFCoreFoundationVersionNumber10_3_4' value='299.31'/>
<enum name='kCFCoreFoundationVersionNumber10_3_5' value='299.31'/>
<enum name='kCFCoreFoundationVersionNumber10_3_6' value='299.32'/>
<enum name='kCFCoreFoundationVersionNumber10_3_7' value='299.33'/>
<enum name='kCFCoreFoundationVersionNumber10_3_8' value='299.33'/>
<enum name='kCFCoreFoundationVersionNumber10_3_9' value='299.35'/>
<enum name='kCFCoreFoundationVersionNumber10_4' value='368.00'/>
<enum name='kCFCoreFoundationVersionNumber10_4_1' value='368.10'/>
<enum name='kCFCoreFoundationVersionNumber10_4_10' value='368.28'/>
<enum name='kCFCoreFoundationVersionNumber10_4_11' value='368.31'/>
<enum name='kCFCoreFoundationVersionNumber10_4_2' value='368.11'/>
<enum name='kCFCoreFoundationVersionNumber10_4_3' value='368.18'/>
<enum name='kCFCoreFoundationVersionNumber10_4_4_Intel' value='368.26'/>
<enum name='kCFCoreFoundationVersionNumber10_4_4_PowerPC' value='368.25'/>
<enum name='kCFCoreFoundationVersionNumber10_4_5_Intel' value='368.26'/>
<enum name='kCFCoreFoundationVersionNumber10_4_5_PowerPC' value='368.25'/>
<enum name='kCFCoreFoundationVersionNumber10_4_6_Intel' value='368.26'/>
<enum name='kCFCoreFoundationVersionNumber10_4_6_PowerPC' value='368.25'/>
<enum name='kCFCoreFoundationVersionNumber10_4_7' value='368.27'/>
<enum name='kCFCoreFoundationVersionNumber10_4_8' value='368.27'/>
<enum name='kCFCoreFoundationVersionNumber10_4_9' value='368.28'/>
<enum name='kCFCoreFoundationVersionNumber10_5' value='476.00'/>
<enum name='kCFCoreFoundationVersionNumber10_5_1' value='476.00'/>
<enum name='kCFCoreFoundationVersionNumber10_5_2' value='476.10'/>
<enum name='kCFCoreFoundationVersionNumber10_5_3' value='476.13'/>
<enum name='kCFCoreFoundationVersionNumber10_5_4' value='476.14'/>
<enum name='kCFCoreFoundationVersionNumber10_5_5' value='476.15'/>
<enum name='kCFCoreFoundationVersionNumber10_5_6' value='476.17'/>
<enum name='kCFCoreFoundationVersionNumber10_5_7' value='476.18'/>
<enum name='kCFCoreFoundationVersionNumber10_5_8' value='476.19'/>
<enum name='kCFCoreFoundationVersionNumber10_6' value='550.00'/>
<enum name='kCFCoreFoundationVersionNumber10_6_1' value='550.00'/>
<enum name='kCFCoreFoundationVersionNumber10_6_2' value='550.13'/>
<enum name='kCFCoreFoundationVersionNumber10_6_3' value='550.19'/>
<enum name='kCFCoreFoundationVersionNumber10_6_4' value='550.29'/>
<enum name='kCFCoreFoundationVersionNumber10_6_5' value='550.42'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_4_0' value='550.32'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_4_1' value='550.38'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_4_2' value='550.52'/>
<enum name='kCFCoreFoundationVersionNumber_iPhoneOS_2_0' value='478.23'/>
<enum name='kCFCoreFoundationVersionNumber_iPhoneOS_2_1' value='478.26'/>
<enum name='kCFCoreFoundationVersionNumber_iPhoneOS_2_2' value='478.29'/>
<enum name='kCFCoreFoundationVersionNumber_iPhoneOS_3_0' value='478.47'/>
<enum name='kCFCoreFoundationVersionNumber_iPhoneOS_3_1' value='478.52'/>
<enum name='kCFCoreFoundationVersionNumber_iPhoneOS_3_2' value='478.61'/>
<enum name='kCFDataSearchAnchored' value='2'/>
<enum name='kCFDataSearchBackwards' value='1'/>
<enum name='kCFDateFormatterFullStyle' value='4'/>
<enum name='kCFDateFormatterLongStyle' value='3'/>
<enum name='kCFDateFormatterMediumStyle' value='2'/>
<enum name='kCFDateFormatterNoStyle' value='0'/>
<enum name='kCFDateFormatterShortStyle' value='1'/>
<enum name='kCFFileDescriptorReadCallBack' value='1'/>
<enum name='kCFFileDescriptorWriteCallBack' value='2'/>
<enum name='kCFGregorianAllUnits' value='16777215'/>
<enum name='kCFGregorianUnitsDays' value='4'/>
<enum name='kCFGregorianUnitsHours' value='8'/>
<enum name='kCFGregorianUnitsMinutes' value='16'/>
<enum name='kCFGregorianUnitsMonths' value='2'/>
<enum name='kCFGregorianUnitsSeconds' value='32'/>
<enum name='kCFGregorianUnitsYears' value='1'/>
<enum name='kCFLocaleLanguageDirectionBottomToTop' value='4'/>
<enum name='kCFLocaleLanguageDirectionLeftToRight' value='1'/>
<enum name='kCFLocaleLanguageDirectionRightToLeft' value='2'/>
<enum name='kCFLocaleLanguageDirectionTopToBottom' value='3'/>
<enum name='kCFLocaleLanguageDirectionUnknown' value='0'/>
<enum name='kCFMessagePortBecameInvalidError' value='-5'/>
<enum name='kCFMessagePortIsInvalid' value='-3'/>
<enum name='kCFMessagePortReceiveTimeout' value='-2'/>
<enum name='kCFMessagePortSendTimeout' value='-1'/>
<enum name='kCFMessagePortSuccess' value='0'/>
<enum name='kCFMessagePortTransportError' value='-4'/>
<enum name='kCFNotFound' value='-1'/>
<enum name='kCFNotificationDeliverImmediately' value='1'/>
<enum name='kCFNotificationPostToAllSessions' value='2'/>
<enum name='kCFNumberCFIndexType' value='14'/>
<enum name='kCFNumberCGFloatType' value='16'/>
<enum name='kCFNumberCharType' value='7'/>
<enum name='kCFNumberDoubleType' value='13'/>
<enum name='kCFNumberFloat32Type' value='5'/>
<enum name='kCFNumberFloat64Type' value='6'/>
<enum name='kCFNumberFloatType' value='12'/>
<enum name='kCFNumberFormatterCurrencyStyle' value='2'/>
<enum name='kCFNumberFormatterDecimalStyle' value='1'/>
<enum name='kCFNumberFormatterNoStyle' value='0'/>
<enum name='kCFNumberFormatterPadAfterPrefix' value='1'/>
<enum name='kCFNumberFormatterPadAfterSuffix' value='3'/>
<enum name='kCFNumberFormatterPadBeforePrefix' value='0'/>
<enum name='kCFNumberFormatterPadBeforeSuffix' value='2'/>
<enum name='kCFNumberFormatterParseIntegersOnly' value='1'/>
<enum name='kCFNumberFormatterPercentStyle' value='3'/>
<enum name='kCFNumberFormatterRoundCeiling' value='0'/>
<enum name='kCFNumberFormatterRoundDown' value='2'/>
<enum name='kCFNumberFormatterRoundFloor' value='1'/>
<enum name='kCFNumberFormatterRoundHalfDown' value='5'/>
<enum name='kCFNumberFormatterRoundHalfEven' value='4'/>
<enum name='kCFNumberFormatterRoundHalfUp' value='6'/>
<enum name='kCFNumberFormatterRoundUp' value='3'/>
<enum name='kCFNumberFormatterScientificStyle' value='4'/>
<enum name='kCFNumberFormatterSpellOutStyle' value='5'/>
<enum name='kCFNumberIntType' value='9'/>
<enum name='kCFNumberLongLongType' value='11'/>
<enum name='kCFNumberLongType' value='10'/>
<enum name='kCFNumberMaxType' value='16'/>
<enum name='kCFNumberNSIntegerType' value='15'/>
<enum name='kCFNumberSInt16Type' value='2'/>
<enum name='kCFNumberSInt32Type' value='3'/>
<enum name='kCFNumberSInt64Type' value='4'/>
<enum name='kCFNumberSInt8Type' value='1'/>
<enum name='kCFNumberShortType' value='8'/>
<enum name='kCFPropertyListBinaryFormat_v1_0' value='200'/>
<enum name='kCFPropertyListImmutable' value='0'/>
<enum name='kCFPropertyListMutableContainers' value='1'/>
<enum name='kCFPropertyListMutableContainersAndLeaves' value='2'/>
<enum name='kCFPropertyListOpenStepFormat' value='1'/>
<enum name='kCFPropertyListReadCorruptError' value='3840'/>
<enum name='kCFPropertyListReadStreamError' value='3842'/>
<enum name='kCFPropertyListReadUnknownVersionError' value='3841'/>
<enum name='kCFPropertyListWriteStreamError' value='3851'/>
<enum name='kCFPropertyListXMLFormat_v1_0' value='100'/>
<enum name='kCFRunLoopAfterWaiting' value='64'/>
<enum name='kCFRunLoopAllActivities' value='268435455'/>
<enum name='kCFRunLoopBeforeSources' value='4'/>
<enum name='kCFRunLoopBeforeTimers' value='2'/>
<enum name='kCFRunLoopBeforeWaiting' value='32'/>
<enum name='kCFRunLoopEntry' value='1'/>
<enum name='kCFRunLoopExit' value='128'/>
<enum name='kCFRunLoopRunFinished' value='1'/>
<enum name='kCFRunLoopRunHandledSource' value='4'/>
<enum name='kCFRunLoopRunStopped' value='2'/>
<enum name='kCFRunLoopRunTimedOut' value='3'/>
<enum name='kCFSocketAcceptCallBack' value='2'/>
<enum name='kCFSocketAutomaticallyReenableAcceptCallBack' value='2'/>
<enum name='kCFSocketAutomaticallyReenableDataCallBack' value='3'/>
<enum name='kCFSocketAutomaticallyReenableReadCallBack' value='1'/>
<enum name='kCFSocketAutomaticallyReenableWriteCallBack' value='8'/>
<enum name='kCFSocketCloseOnInvalidate' value='128'/>
<enum name='kCFSocketConnectCallBack' value='4'/>
<enum name='kCFSocketDataCallBack' value='3'/>
<enum name='kCFSocketError' value='-1'/>
<enum name='kCFSocketLeaveErrors' value='64'/>
<enum name='kCFSocketNoCallBack' value='0'/>
<enum name='kCFSocketReadCallBack' value='1'/>
<enum name='kCFSocketSuccess' value='0'/>
<enum name='kCFSocketTimeout' value='-2'/>
<enum name='kCFSocketWriteCallBack' value='8'/>
<enum name='kCFStreamErrorDomainCustom' value='-1'/>
<enum name='kCFStreamErrorDomainMacOSStatus' value='2'/>
<enum name='kCFStreamErrorDomainPOSIX' value='1'/>
<enum name='kCFStreamEventCanAcceptBytes' value='4'/>
<enum name='kCFStreamEventEndEncountered' value='16'/>
<enum name='kCFStreamEventErrorOccurred' value='8'/>
<enum name='kCFStreamEventHasBytesAvailable' value='2'/>
<enum name='kCFStreamEventNone' value='0'/>
<enum name='kCFStreamEventOpenCompleted' value='1'/>
<enum name='kCFStreamStatusAtEnd' value='5'/>
<enum name='kCFStreamStatusClosed' value='6'/>
<enum name='kCFStreamStatusError' value='7'/>
<enum name='kCFStreamStatusNotOpen' value='0'/>
<enum name='kCFStreamStatusOpen' value='2'/>
<enum name='kCFStreamStatusOpening' value='1'/>
<enum name='kCFStreamStatusReading' value='3'/>
<enum name='kCFStreamStatusWriting' value='4'/>
<enum name='kCFStringEncodingANSEL' value='1537'/>
<enum name='kCFStringEncodingASCII' value='1536'/>
<enum name='kCFStringEncodingBig5' value='2563'/>
<enum name='kCFStringEncodingBig5_E' value='2569'/>
<enum name='kCFStringEncodingBig5_HKSCS_1999' value='2566'/>
<enum name='kCFStringEncodingCNS_11643_92_P1' value='1617'/>
<enum name='kCFStringEncodingCNS_11643_92_P2' value='1618'/>
<enum name='kCFStringEncodingCNS_11643_92_P3' value='1619'/>
<enum name='kCFStringEncodingDOSArabic' value='1049'/>
<enum name='kCFStringEncodingDOSBalticRim' value='1030'/>
<enum name='kCFStringEncodingDOSCanadianFrench' value='1048'/>
<enum name='kCFStringEncodingDOSChineseSimplif' value='1057'/>
<enum name='kCFStringEncodingDOSChineseTrad' value='1059'/>
<enum name='kCFStringEncodingDOSCyrillic' value='1043'/>
<enum name='kCFStringEncodingDOSGreek' value='1029'/>
<enum name='kCFStringEncodingDOSGreek1' value='1041'/>
<enum name='kCFStringEncodingDOSGreek2' value='1052'/>
<enum name='kCFStringEncodingDOSHebrew' value='1047'/>
<enum name='kCFStringEncodingDOSIcelandic' value='1046'/>
<enum name='kCFStringEncodingDOSJapanese' value='1056'/>
<enum name='kCFStringEncodingDOSKorean' value='1058'/>
<enum name='kCFStringEncodingDOSLatin1' value='1040'/>
<enum name='kCFStringEncodingDOSLatin2' value='1042'/>
<enum name='kCFStringEncodingDOSLatinUS' value='1024'/>
<enum name='kCFStringEncodingDOSNordic' value='1050'/>
<enum name='kCFStringEncodingDOSPortuguese' value='1045'/>
<enum name='kCFStringEncodingDOSRussian' value='1051'/>
<enum name='kCFStringEncodingDOSThai' value='1053'/>
<enum name='kCFStringEncodingDOSTurkish' value='1044'/>
<enum name='kCFStringEncodingEBCDIC_CP037' value='3074'/>
<enum name='kCFStringEncodingEBCDIC_US' value='3073'/>
<enum name='kCFStringEncodingEUC_CN' value='2352'/>
<enum name='kCFStringEncodingEUC_JP' value='2336'/>
<enum name='kCFStringEncodingEUC_KR' value='2368'/>
<enum name='kCFStringEncodingEUC_TW' value='2353'/>
<enum name='kCFStringEncodingGBK_95' value='1585'/>
<enum name='kCFStringEncodingGB_18030_2000' value='1586'/>
<enum name='kCFStringEncodingGB_2312_80' value='1584'/>
<enum name='kCFStringEncodingHZ_GB_2312' value='2565'/>
<enum name='kCFStringEncodingISOLatin1' value='513'/>
<enum name='kCFStringEncodingISOLatin10' value='528'/>
<enum name='kCFStringEncodingISOLatin2' value='514'/>
<enum name='kCFStringEncodingISOLatin3' value='515'/>
<enum name='kCFStringEncodingISOLatin4' value='516'/>
<enum name='kCFStringEncodingISOLatin5' value='521'/>
<enum name='kCFStringEncodingISOLatin6' value='522'/>
<enum name='kCFStringEncodingISOLatin7' value='525'/>
<enum name='kCFStringEncodingISOLatin8' value='526'/>
<enum name='kCFStringEncodingISOLatin9' value='527'/>
<enum name='kCFStringEncodingISOLatinArabic' value='518'/>
<enum name='kCFStringEncodingISOLatinCyrillic' value='517'/>
<enum name='kCFStringEncodingISOLatinGreek' value='519'/>
<enum name='kCFStringEncodingISOLatinHebrew' value='520'/>
<enum name='kCFStringEncodingISOLatinThai' value='523'/>
<enum name='kCFStringEncodingISO_2022_CN' value='2096'/>
<enum name='kCFStringEncodingISO_2022_CN_EXT' value='2097'/>
<enum name='kCFStringEncodingISO_2022_JP' value='2080'/>
<enum name='kCFStringEncodingISO_2022_JP_1' value='2082'/>
<enum name='kCFStringEncodingISO_2022_JP_2' value='2081'/>
<enum name='kCFStringEncodingISO_2022_JP_3' value='2083'/>
<enum name='kCFStringEncodingISO_2022_KR' value='2112'/>
<enum name='kCFStringEncodingInvalidId' value='4294967295'/>
<enum name='kCFStringEncodingJIS_C6226_78' value='1572'/>
<enum name='kCFStringEncodingJIS_X0201_76' value='1568'/>
<enum name='kCFStringEncodingJIS_X0208_83' value='1569'/>
<enum name='kCFStringEncodingJIS_X0208_90' value='1570'/>
<enum name='kCFStringEncodingJIS_X0212_90' value='1571'/>
<enum name='kCFStringEncodingKOI8_R' value='2562'/>
<enum name='kCFStringEncodingKOI8_U' value='2568'/>
<enum name='kCFStringEncodingKSC_5601_87' value='1600'/>
<enum name='kCFStringEncodingKSC_5601_92_Johab' value='1601'/>
<enum name='kCFStringEncodingMacArabic' value='4'/>
<enum name='kCFStringEncodingMacArmenian' value='24'/>
<enum name='kCFStringEncodingMacBengali' value='13'/>
<enum name='kCFStringEncodingMacBurmese' value='19'/>
<enum name='kCFStringEncodingMacCeltic' value='39'/>
<enum name='kCFStringEncodingMacCentralEurRoman' value='29'/>
<enum name='kCFStringEncodingMacChineseSimp' value='25'/>
<enum name='kCFStringEncodingMacChineseTrad' value='2'/>
<enum name='kCFStringEncodingMacCroatian' value='36'/>
<enum name='kCFStringEncodingMacCyrillic' value='7'/>
<enum name='kCFStringEncodingMacDevanagari' value='9'/>
<enum name='kCFStringEncodingMacDingbats' value='34'/>
<enum name='kCFStringEncodingMacEthiopic' value='28'/>
<enum name='kCFStringEncodingMacExtArabic' value='31'/>
<enum name='kCFStringEncodingMacFarsi' value='140'/>
<enum name='kCFStringEncodingMacGaelic' value='40'/>
<enum name='kCFStringEncodingMacGeorgian' value='23'/>
<enum name='kCFStringEncodingMacGreek' value='6'/>
<enum name='kCFStringEncodingMacGujarati' value='11'/>
<enum name='kCFStringEncodingMacGurmukhi' value='10'/>
<enum name='kCFStringEncodingMacHFS' value='255'/>
<enum name='kCFStringEncodingMacHebrew' value='5'/>
<enum name='kCFStringEncodingMacIcelandic' value='37'/>
<enum name='kCFStringEncodingMacInuit' value='236'/>
<enum name='kCFStringEncodingMacJapanese' value='1'/>
<enum name='kCFStringEncodingMacKannada' value='16'/>
<enum name='kCFStringEncodingMacKhmer' value='20'/>
<enum name='kCFStringEncodingMacKorean' value='3'/>
<enum name='kCFStringEncodingMacLaotian' value='22'/>
<enum name='kCFStringEncodingMacMalayalam' value='17'/>
<enum name='kCFStringEncodingMacMongolian' value='27'/>
<enum name='kCFStringEncodingMacOriya' value='12'/>
<enum name='kCFStringEncodingMacRoman' value='0'/>
<enum name='kCFStringEncodingMacRomanLatin1' value='2564'/>
<enum name='kCFStringEncodingMacRomanian' value='38'/>
<enum name='kCFStringEncodingMacSinhalese' value='18'/>
<enum name='kCFStringEncodingMacSymbol' value='33'/>
<enum name='kCFStringEncodingMacTamil' value='14'/>
<enum name='kCFStringEncodingMacTelugu' value='15'/>
<enum name='kCFStringEncodingMacThai' value='21'/>
<enum name='kCFStringEncodingMacTibetan' value='26'/>
<enum name='kCFStringEncodingMacTurkish' value='35'/>
<enum name='kCFStringEncodingMacUkrainian' value='152'/>
<enum name='kCFStringEncodingMacVT100' value='252'/>
<enum name='kCFStringEncodingMacVietnamese' value='30'/>
<enum name='kCFStringEncodingNextStepJapanese' value='2818'/>
<enum name='kCFStringEncodingNextStepLatin' value='2817'/>
<enum name='kCFStringEncodingNonLossyASCII' value='3071'/>
<enum name='kCFStringEncodingShiftJIS' value='2561'/>
<enum name='kCFStringEncodingShiftJIS_X0213' value='1576'/>
<enum name='kCFStringEncodingShiftJIS_X0213_00' value='1576'/>
<enum name='kCFStringEncodingShiftJIS_X0213_MenKuTen' value='1577'/>
<enum name='kCFStringEncodingUTF16' value='256'/>
<enum name='kCFStringEncodingUTF16BE' value='268435712'/>
<enum name='kCFStringEncodingUTF16LE' value='335544576'/>
<enum name='kCFStringEncodingUTF32' value='201326848'/>
<enum name='kCFStringEncodingUTF32BE' value='402653440'/>
<enum name='kCFStringEncodingUTF32LE' value='469762304'/>
<enum name='kCFStringEncodingUTF7' value='67109120'/>
<enum name='kCFStringEncodingUTF7_IMAP' value='2576'/>
<enum name='kCFStringEncodingUTF8' value='134217984'/>
<enum name='kCFStringEncodingUnicode' value='256'/>
<enum name='kCFStringEncodingVISCII' value='2567'/>
<enum name='kCFStringEncodingWindowsArabic' value='1286'/>
<enum name='kCFStringEncodingWindowsBalticRim' value='1287'/>
<enum name='kCFStringEncodingWindowsCyrillic' value='1282'/>
<enum name='kCFStringEncodingWindowsGreek' value='1283'/>
<enum name='kCFStringEncodingWindowsHebrew' value='1285'/>
<enum name='kCFStringEncodingWindowsKoreanJohab' value='1296'/>
<enum name='kCFStringEncodingWindowsLatin1' value='1280'/>
<enum name='kCFStringEncodingWindowsLatin2' value='1281'/>
<enum name='kCFStringEncodingWindowsLatin5' value='1284'/>
<enum name='kCFStringEncodingWindowsVietnamese' value='1288'/>
<enum name='kCFStringNormalizationFormC' value='2'/>
<enum name='kCFStringNormalizationFormD' value='0'/>
<enum name='kCFStringNormalizationFormKC' value='3'/>
<enum name='kCFStringNormalizationFormKD' value='1'/>
<enum name='kCFStringTokenizerAttributeLanguage' value='131072'/>
<enum name='kCFStringTokenizerAttributeLatinTranscription' value='65536'/>
<enum name='kCFStringTokenizerTokenHasDerivedSubTokensMask' value='4'/>
<enum name='kCFStringTokenizerTokenHasHasNumbersMask' value='8'/>
<enum name='kCFStringTokenizerTokenHasNonLettersMask' value='16'/>
<enum name='kCFStringTokenizerTokenHasSubTokensMask' value='2'/>
<enum name='kCFStringTokenizerTokenIsCJWordMask' value='32'/>
<enum name='kCFStringTokenizerTokenNone' value='0'/>
<enum name='kCFStringTokenizerTokenNormal' value='1'/>
<enum name='kCFStringTokenizerUnitLineBreak' value='3'/>
<enum name='kCFStringTokenizerUnitParagraph' value='2'/>
<enum name='kCFStringTokenizerUnitSentence' value='1'/>
<enum name='kCFStringTokenizerUnitWord' value='0'/>
<enum name='kCFStringTokenizerUnitWordBoundary' value='4'/>
<enum name='kCFTimeZoneNameStyleDaylightSaving' value='2'/>
<enum name='kCFTimeZoneNameStyleGeneric' value='4'/>
<enum name='kCFTimeZoneNameStyleShortDaylightSaving' value='3'/>
<enum name='kCFTimeZoneNameStyleShortGeneric' value='5'/>
<enum name='kCFTimeZoneNameStyleShortStandard' value='1'/>
<enum name='kCFTimeZoneNameStyleStandard' value='0'/>
<enum name='kCFURLBookmarkCreationMinimalBookmarkMask' value='512'/>
<enum name='kCFURLBookmarkCreationPreferFileIDResolutionMask' value='256'/>
<enum name='kCFURLBookmarkCreationSuitableForBookmarkFile' value='1024'/>
<enum name='kCFURLComponentFragment' value='12'/>
<enum name='kCFURLComponentHost' value='8'/>
<enum name='kCFURLComponentNetLocation' value='2'/>
<enum name='kCFURLComponentParameterString' value='10'/>
<enum name='kCFURLComponentPassword' value='6'/>
<enum name='kCFURLComponentPath' value='3'/>
<enum name='kCFURLComponentPort' value='9'/>
<enum name='kCFURLComponentQuery' value='11'/>
<enum name='kCFURLComponentResourceSpecifier' value='4'/>
<enum name='kCFURLComponentScheme' value='1'/>
<enum name='kCFURLComponentUser' value='5'/>
<enum name='kCFURLComponentUserInfo' value='7'/>
<enum name='kCFURLEnumeratorDefaultBehavior' value='0'/>
<enum name='kCFURLEnumeratorDescendRecursively' value='1'/>
<enum name='kCFURLEnumeratorDirectoryPostOrderSuccess' value='4'/>
<enum name='kCFURLEnumeratorEnd' value='2'/>
<enum name='kCFURLEnumeratorError' value='3'/>
<enum name='kCFURLEnumeratorGenerateFileReferenceURLs' value='4'/>
<enum name='kCFURLEnumeratorIncludeDirectoriesPostOrder' value='32'/>
<enum name='kCFURLEnumeratorIncludeDirectoriesPreOrder' value='16'/>
<enum name='kCFURLEnumeratorSkipInvisibles' value='2'/>
<enum name='kCFURLEnumeratorSkipPackageContents' value='8'/>
<enum name='kCFURLEnumeratorSuccess' value='1'/>
<enum name='kCFURLHFSPathStyle' value='1'/>
<enum name='kCFURLImproperArgumentsError' value='-15'/>
<enum name='kCFURLPOSIXPathStyle' value='0'/>
<enum name='kCFURLPropertyKeyUnavailableError' value='-17'/>
<enum name='kCFURLRemoteHostUnavailableError' value='-14'/>
<enum name='kCFURLResourceAccessViolationError' value='-13'/>
<enum name='kCFURLResourceNotFoundError' value='-12'/>
<enum name='kCFURLTimeoutError' value='-18'/>
<enum name='kCFURLUnknownError' value='-10'/>
<enum name='kCFURLUnknownPropertyKeyError' value='-16'/>
<enum name='kCFURLUnknownSchemeError' value='-11'/>
<enum name='kCFURLWindowsPathStyle' value='2'/>
<function name='CFAbsoluteTimeAddGregorianUnits'>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<arg type='{_CFGregorianUnits=iiiiid}' name='units' declared_type='CFGregorianUnits'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFAbsoluteTimeGetCurrent'>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFAbsoluteTimeGetDayOfWeek'>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<retval type='l' declared_type='SInt32'/>
</function>
<function name='CFAbsoluteTimeGetDayOfYear'>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<retval type='l' declared_type='SInt32'/>
</function>
<function name='CFAbsoluteTimeGetDifferenceAsGregorianUnits'>
<arg type='d' name='at1' declared_type='CFAbsoluteTime'/>
<arg type='d' name='at2' declared_type='CFAbsoluteTime'/>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<arg type='L' name='unitFlags' declared_type='CFOptionFlags'/>
<retval type='{_CFGregorianUnits=iiiiid}' declared_type='CFGregorianUnits'/>
</function>
<function name='CFAbsoluteTimeGetGregorianDate'>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<retval type='{_CFGregorianDate=iccccd}' declared_type='CFGregorianDate'/>
</function>
<function name='CFAbsoluteTimeGetWeekOfYear'>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<retval type='l' declared_type='SInt32'/>
</function>
<function name='CFAllocatorAllocate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='size' declared_type='CFIndex'/>
<arg type='L' name='hint' declared_type='CFOptionFlags'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFAllocatorCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{_CFAllocatorContext=i^v^?^?^?^?^?^?^?}' name='context' declared_type='CFAllocatorContext*'/>
<retval type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
</function>
<function name='CFAllocatorDeallocate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^v' name='ptr' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAllocatorGetContext'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{_CFAllocatorContext=i^v^?^?^?^?^?^?^?}' name='context' declared_type='CFAllocatorContext*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAllocatorGetDefault'>
<retval type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
</function>
<function name='CFAllocatorGetPreferredSizeForSize'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='size' declared_type='CFIndex'/>
<arg type='L' name='hint' declared_type='CFOptionFlags'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFAllocatorGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFAllocatorReallocate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^v' name='ptr' declared_type='void*'/>
<arg type='l' name='newsize' declared_type='CFIndex'/>
<arg type='L' name='hint' declared_type='CFOptionFlags'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFAllocatorSetDefault'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayAppendArray'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFMutableArrayRef'/>
<arg type='^{__CFArray=}' name='otherArray' declared_type='CFArrayRef'/>
<arg type='{_CFRange=ii}' name='otherRange' declared_type='CFRange'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayAppendValue'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFMutableArrayRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayApplyFunction'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFArrayRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^?' name='applier' declared_type='CFArrayApplierFunction' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' name='context' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayBSearchValues'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFArrayRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<arg type='^?' name='comparator' declared_type='CFComparatorFunction' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='l' declared_type='CFComparisonResult'/>
</arg>
<arg type='^v' name='context' declared_type='void*'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFArrayContainsValue'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFArrayRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFArrayCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^^v' name='values' declared_type='void**' const='true'/>
<arg type='l' name='numValues' declared_type='CFIndex'/>
<arg type='^{_CFArrayCallBacks=i^?^?^?^?}' name='callBacks' declared_type='CFArrayCallBacks*' const='true'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFArrayCreateCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFArrayRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFArrayCreateMutable'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<arg type='^{_CFArrayCallBacks=i^?^?^?^?}' name='callBacks' declared_type='CFArrayCallBacks*' const='true'/>
<retval type='^{__CFArray=}' declared_type='CFMutableArrayRef'/>
</function>
<function name='CFArrayCreateMutableCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFArrayRef'/>
<retval type='^{__CFArray=}' declared_type='CFMutableArrayRef'/>
</function>
<function name='CFArrayExchangeValuesAtIndices'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFMutableArrayRef'/>
<arg type='l' name='idx1' declared_type='CFIndex'/>
<arg type='l' name='idx2' declared_type='CFIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayGetCount'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFArrayRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFArrayGetCountOfValue'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFArrayRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFArrayGetFirstIndexOfValue'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFArrayRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFArrayGetLastIndexOfValue'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFArrayRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFArrayGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFArrayGetValueAtIndex'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFArrayRef'/>
<arg type='l' name='idx' declared_type='CFIndex'/>
<retval type='^v' declared_type='void*' const='true'/>
</function>
<function name='CFArrayGetValues'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFArrayRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^^v' name='values' declared_type='void**' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayInsertValueAtIndex'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFMutableArrayRef'/>
<arg type='l' name='idx' declared_type='CFIndex'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayRemoveAllValues'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFMutableArrayRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayRemoveValueAtIndex'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFMutableArrayRef'/>
<arg type='l' name='idx' declared_type='CFIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayReplaceValues'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFMutableArrayRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^^v' name='newValues' declared_type='void**' const='true'/>
<arg type='l' name='newCount' declared_type='CFIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArraySetValueAtIndex'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFMutableArrayRef'/>
<arg type='l' name='idx' declared_type='CFIndex'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArraySortValues'>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFMutableArrayRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^?' name='comparator' declared_type='CFComparatorFunction' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='l' declared_type='CFComparisonResult'/>
</arg>
<arg type='^v' name='context' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringBeginEditing'>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFMutableAttributedStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringCreate'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='str' declared_type='CFStringRef'/>
<arg type='^{__CFDictionary=}' name='attributes' declared_type='CFDictionaryRef'/>
<retval type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef'/>
</function>
<function name='CFAttributedStringCreateCopy'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFAttributedStringRef'/>
<retval type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef'/>
</function>
<function name='CFAttributedStringCreateMutable'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='l' name='maxLength' declared_type='CFIndex'/>
<retval type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef'/>
</function>
<function name='CFAttributedStringCreateMutableCopy'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='l' name='maxLength' declared_type='CFIndex'/>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFAttributedStringRef'/>
<retval type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef'/>
</function>
<function name='CFAttributedStringCreateWithSubstring'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFAttributedStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<retval type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef'/>
</function>
<function name='CFAttributedStringEndEditing'>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFMutableAttributedStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringGetAttribute'>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFAttributedStringRef'/>
<arg type='l' name='loc' declared_type='CFIndex'/>
<arg type='^{__CFString=}' name='attrName' declared_type='CFStringRef'/>
<arg type='^{_CFRange=ii}' name='effectiveRange' declared_type='CFRange*'/>
<retval type='^v' declared_type='CFTypeRef'/>
</function>
<function name='CFAttributedStringGetAttributeAndLongestEffectiveRange'>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFAttributedStringRef'/>
<arg type='l' name='loc' declared_type='CFIndex'/>
<arg type='^{__CFString=}' name='attrName' declared_type='CFStringRef'/>
<arg type='{_CFRange=ii}' name='inRange' declared_type='CFRange'/>
<arg type='^{_CFRange=ii}' name='longestEffectiveRange' declared_type='CFRange*'/>
<retval type='^v' declared_type='CFTypeRef'/>
</function>
<function name='CFAttributedStringGetAttributes'>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFAttributedStringRef'/>
<arg type='l' name='loc' declared_type='CFIndex'/>
<arg type='^{_CFRange=ii}' name='effectiveRange' declared_type='CFRange*'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFAttributedStringGetAttributesAndLongestEffectiveRange'>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFAttributedStringRef'/>
<arg type='l' name='loc' declared_type='CFIndex'/>
<arg type='{_CFRange=ii}' name='inRange' declared_type='CFRange'/>
<arg type='^{_CFRange=ii}' name='longestEffectiveRange' declared_type='CFRange*'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFAttributedStringGetLength'>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFAttributedStringRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFAttributedStringGetMutableString'>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFMutableAttributedStringRef'/>
<retval type='^{__CFString=}' declared_type='CFMutableStringRef'/>
</function>
<function name='CFAttributedStringGetString'>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFAttributedStringRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFAttributedStringGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFAttributedStringRemoveAttribute'>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFMutableAttributedStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^{__CFString=}' name='attrName' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringReplaceAttributedString'>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFMutableAttributedStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^{__CFAttributedString=}' name='replacement' declared_type='CFAttributedStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringReplaceString'>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFMutableAttributedStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^{__CFString=}' name='replacement' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringSetAttribute'>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFMutableAttributedStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^{__CFString=}' name='attrName' declared_type='CFStringRef'/>
<arg type='^v' name='value' declared_type='CFTypeRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringSetAttributes'>
<arg type='^{__CFAttributedString=}' name='aStr' declared_type='CFMutableAttributedStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^{__CFDictionary=}' name='replacement' declared_type='CFDictionaryRef'/>
<arg type='B' name='clearOtherAttributes' declared_type='Boolean'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagAddValue'>
<arg type='^{__CFBag=}' name='theBag' declared_type='CFMutableBagRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagApplyFunction'>
<arg type='^{__CFBag=}' name='theBag' declared_type='CFBagRef'/>
<arg type='^?' name='applier' declared_type='CFBagApplierFunction' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' name='context' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagContainsValue'>
<arg type='^{__CFBag=}' name='theBag' declared_type='CFBagRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBagCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^^v' name='values' declared_type='void**' const='true'/>
<arg type='l' name='numValues' declared_type='CFIndex'/>
<arg type='^{_CFBagCallBacks=i^?^?^?^?^?}' name='callBacks' declared_type='CFBagCallBacks*' const='true'/>
<retval type='^{__CFBag=}' declared_type='CFBagRef'/>
</function>
<function name='CFBagCreateCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFBag=}' name='theBag' declared_type='CFBagRef'/>
<retval type='^{__CFBag=}' declared_type='CFBagRef'/>
</function>
<function name='CFBagCreateMutable'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<arg type='^{_CFBagCallBacks=i^?^?^?^?^?}' name='callBacks' declared_type='CFBagCallBacks*' const='true'/>
<retval type='^{__CFBag=}' declared_type='CFMutableBagRef'/>
</function>
<function name='CFBagCreateMutableCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<arg type='^{__CFBag=}' name='theBag' declared_type='CFBagRef'/>
<retval type='^{__CFBag=}' declared_type='CFMutableBagRef'/>
</function>
<function name='CFBagGetCount'>
<arg type='^{__CFBag=}' name='theBag' declared_type='CFBagRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFBagGetCountOfValue'>
<arg type='^{__CFBag=}' name='theBag' declared_type='CFBagRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFBagGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFBagGetValue'>
<arg type='^{__CFBag=}' name='theBag' declared_type='CFBagRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</function>
<function name='CFBagGetValueIfPresent'>
<arg type='^{__CFBag=}' name='theBag' declared_type='CFBagRef'/>
<arg type='^v' name='candidate' declared_type='void*' const='true'/>
<arg type='^^v' name='value' declared_type='void**' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBagGetValues'>
<arg type='^{__CFBag=}' name='theBag' declared_type='CFBagRef'/>
<arg type='^^v' name='values' declared_type='void**' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagRemoveAllValues'>
<arg type='^{__CFBag=}' name='theBag' declared_type='CFMutableBagRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagRemoveValue'>
<arg type='^{__CFBag=}' name='theBag' declared_type='CFMutableBagRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagReplaceValue'>
<arg type='^{__CFBag=}' name='theBag' declared_type='CFMutableBagRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagSetValue'>
<arg type='^{__CFBag=}' name='theBag' declared_type='CFMutableBagRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBinaryHeapAddValue'>
<arg type='^{__CFBinaryHeap=}' name='heap' declared_type='CFBinaryHeapRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBinaryHeapApplyFunction'>
<arg type='^{__CFBinaryHeap=}' name='heap' declared_type='CFBinaryHeapRef'/>
<arg type='^?' name='applier' declared_type='CFBinaryHeapApplierFunction' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' name='context' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBinaryHeapContainsValue'>
<arg type='^{__CFBinaryHeap=}' name='heap' declared_type='CFBinaryHeapRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBinaryHeapCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<arg type='^{_CFBinaryHeapCallBacks=i^?^?^?^?}' name='callBacks' declared_type='CFBinaryHeapCallBacks*' const='true'/>
<arg type='^{_CFBinaryHeapCompareContext=i^v^?^?^?}' name='compareContext' declared_type='CFBinaryHeapCompareContext*' const='true'/>
<retval type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef'/>
</function>
<function name='CFBinaryHeapCreateCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<arg type='^{__CFBinaryHeap=}' name='heap' declared_type='CFBinaryHeapRef'/>
<retval type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef'/>
</function>
<function name='CFBinaryHeapGetCount'>
<arg type='^{__CFBinaryHeap=}' name='heap' declared_type='CFBinaryHeapRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFBinaryHeapGetCountOfValue'>
<arg type='^{__CFBinaryHeap=}' name='heap' declared_type='CFBinaryHeapRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFBinaryHeapGetMinimum'>
<arg type='^{__CFBinaryHeap=}' name='heap' declared_type='CFBinaryHeapRef'/>
<retval type='^v' declared_type='void*' const='true'/>
</function>
<function name='CFBinaryHeapGetMinimumIfPresent'>
<arg type='^{__CFBinaryHeap=}' name='heap' declared_type='CFBinaryHeapRef'/>
<arg type='^^v' name='value' declared_type='void**' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBinaryHeapGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFBinaryHeapGetValues'>
<arg type='^{__CFBinaryHeap=}' name='heap' declared_type='CFBinaryHeapRef'/>
<arg type='^^v' name='values' declared_type='void**' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBinaryHeapRemoveAllValues'>
<arg type='^{__CFBinaryHeap=}' name='heap' declared_type='CFBinaryHeapRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBinaryHeapRemoveMinimumValue'>
<arg type='^{__CFBinaryHeap=}' name='heap' declared_type='CFBinaryHeapRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorContainsBit'>
<arg type='^{__CFBitVector=}' name='bv' declared_type='CFBitVectorRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='L' name='value' declared_type='CFBit'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBitVectorCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='*' name='bytes' declared_type='UInt8*' const='true'/>
<arg type='l' name='numBits' declared_type='CFIndex'/>
<retval type='^{__CFBitVector=}' declared_type='CFBitVectorRef'/>
</function>
<function name='CFBitVectorCreateCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFBitVector=}' name='bv' declared_type='CFBitVectorRef'/>
<retval type='^{__CFBitVector=}' declared_type='CFBitVectorRef'/>
</function>
<function name='CFBitVectorCreateMutable'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<retval type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef'/>
</function>
<function name='CFBitVectorCreateMutableCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<arg type='^{__CFBitVector=}' name='bv' declared_type='CFBitVectorRef'/>
<retval type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef'/>
</function>
<function name='CFBitVectorFlipBitAtIndex'>
<arg type='^{__CFBitVector=}' name='bv' declared_type='CFMutableBitVectorRef'/>
<arg type='l' name='idx' declared_type='CFIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorFlipBits'>
<arg type='^{__CFBitVector=}' name='bv' declared_type='CFMutableBitVectorRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorGetBitAtIndex'>
<arg type='^{__CFBitVector=}' name='bv' declared_type='CFBitVectorRef'/>
<arg type='l' name='idx' declared_type='CFIndex'/>
<retval type='L' declared_type='CFBit'/>
</function>
<function name='CFBitVectorGetBits'>
<arg type='^{__CFBitVector=}' name='bv' declared_type='CFBitVectorRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='*' name='bytes' declared_type='UInt8*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorGetCount'>
<arg type='^{__CFBitVector=}' name='bv' declared_type='CFBitVectorRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFBitVectorGetCountOfBit'>
<arg type='^{__CFBitVector=}' name='bv' declared_type='CFBitVectorRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='L' name='value' declared_type='CFBit'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFBitVectorGetFirstIndexOfBit'>
<arg type='^{__CFBitVector=}' name='bv' declared_type='CFBitVectorRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='L' name='value' declared_type='CFBit'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFBitVectorGetLastIndexOfBit'>
<arg type='^{__CFBitVector=}' name='bv' declared_type='CFBitVectorRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='L' name='value' declared_type='CFBit'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFBitVectorGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFBitVectorSetAllBits'>
<arg type='^{__CFBitVector=}' name='bv' declared_type='CFMutableBitVectorRef'/>
<arg type='L' name='value' declared_type='CFBit'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorSetBitAtIndex'>
<arg type='^{__CFBitVector=}' name='bv' declared_type='CFMutableBitVectorRef'/>
<arg type='l' name='idx' declared_type='CFIndex'/>
<arg type='L' name='value' declared_type='CFBit'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorSetBits'>
<arg type='^{__CFBitVector=}' name='bv' declared_type='CFMutableBitVectorRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='L' name='value' declared_type='CFBit'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorSetCount'>
<arg type='^{__CFBitVector=}' name='bv' declared_type='CFMutableBitVectorRef'/>
<arg type='l' name='count' declared_type='CFIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBooleanGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFBooleanGetValue'>
<arg type='^{__CFBoolean=}' name='boolean' declared_type='CFBooleanRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleCloseBundleResourceMap'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='s' name='refNum' declared_type='CFBundleRefNum'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBundleCopyAuxiliaryExecutableURL'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='^{__CFString=}' name='executableName' declared_type='CFStringRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyBuiltInPlugInsURL'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyBundleLocalizations'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyBundleURL'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyExecutableArchitectures'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyExecutableArchitecturesForURL'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyExecutableURL'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyInfoDictionaryForURL'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFBundleCopyInfoDictionaryInDirectory'>
<arg type='^{__CFURL=}' name='bundleURL' declared_type='CFURLRef'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFBundleCopyLocalizationsForPreferences'>
<arg type='^{__CFArray=}' name='locArray' declared_type='CFArrayRef'/>
<arg type='^{__CFArray=}' name='prefArray' declared_type='CFArrayRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyLocalizationsForURL'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyLocalizedString'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='value' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='tableName' declared_type='CFStringRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFBundleCopyPreferredLocalizationsFromArray'>
<arg type='^{__CFArray=}' name='locArray' declared_type='CFArrayRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyPrivateFrameworksURL'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyResourceURL'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='^{__CFString=}' name='resourceName' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='resourceType' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='subDirName' declared_type='CFStringRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyResourceURLForLocalization'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='^{__CFString=}' name='resourceName' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='resourceType' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='subDirName' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='localizationName' declared_type='CFStringRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyResourceURLInDirectory'>
<arg type='^{__CFURL=}' name='bundleURL' declared_type='CFURLRef'/>
<arg type='^{__CFString=}' name='resourceName' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='resourceType' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='subDirName' declared_type='CFStringRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyResourceURLsOfType'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='^{__CFString=}' name='resourceType' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='subDirName' declared_type='CFStringRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyResourceURLsOfTypeForLocalization'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='^{__CFString=}' name='resourceType' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='subDirName' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='localizationName' declared_type='CFStringRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyResourceURLsOfTypeInDirectory'>
<arg type='^{__CFURL=}' name='bundleURL' declared_type='CFURLRef'/>
<arg type='^{__CFString=}' name='resourceType' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='subDirName' declared_type='CFStringRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyResourcesDirectoryURL'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopySharedFrameworksURL'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopySharedSupportURL'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopySupportFilesDirectoryURL'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='bundleURL' declared_type='CFURLRef'/>
<retval type='^{__CFBundle=}' declared_type='CFBundleRef'/>
</function>
<function name='CFBundleCreateBundlesFromDirectory'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='directoryURL' declared_type='CFURLRef'/>
<arg type='^{__CFString=}' name='bundleType' declared_type='CFStringRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleGetAllBundles'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleGetBundleWithIdentifier'>
<arg type='^{__CFString=}' name='bundleID' declared_type='CFStringRef'/>
<retval type='^{__CFBundle=}' declared_type='CFBundleRef'/>
</function>
<function name='CFBundleGetDataPointerForName'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='^{__CFString=}' name='symbolName' declared_type='CFStringRef'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFBundleGetDataPointersForNames'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='^{__CFArray=}' name='symbolNames' declared_type='CFArrayRef'/>
<arg type='^^v' name='stbl' declared_type='void**'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBundleGetDevelopmentRegion'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFBundleGetFunctionPointerForName'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='^{__CFString=}' name='functionName' declared_type='CFStringRef'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFBundleGetFunctionPointersForNames'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='^{__CFArray=}' name='functionNames' declared_type='CFArrayRef'/>
<arg type='^^v' name='ftbl' declared_type='void**'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBundleGetIdentifier'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFBundleGetInfoDictionary'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFBundleGetLocalInfoDictionary'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFBundleGetMainBundle'>
<retval type='^{__CFBundle=}' declared_type='CFBundleRef'/>
</function>
<function name='CFBundleGetPackageInfo'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='^I' name='packageType' declared_type='UInt32*'/>
<arg type='^I' name='packageCreator' declared_type='UInt32*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBundleGetPackageInfoInDirectory'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^I' name='packageType' declared_type='UInt32*'/>
<arg type='^I' name='packageCreator' declared_type='UInt32*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleGetPlugIn'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='^{__CFBundle=}' declared_type='CFPlugInRef'/>
</function>
<function name='CFBundleGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFBundleGetValueForInfoDictionaryKey'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<retval type='^v' declared_type='CFTypeRef'/>
</function>
<function name='CFBundleGetVersionNumber'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='L' declared_type='UInt32'/>
</function>
<function name='CFBundleIsExecutableLoaded'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleLoadExecutable'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleLoadExecutableAndReturnError'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleOpenBundleResourceFiles'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='^s' name='refNum' declared_type='CFBundleRefNum*'/>
<arg type='^s' name='localizedRefNum' declared_type='CFBundleRefNum*'/>
<retval type='l' declared_type='SInt32'/>
</function>
<function name='CFBundleOpenBundleResourceMap'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='s' declared_type='CFBundleRefNum'/>
</function>
<function name='CFBundlePreflightExecutable'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleUnloadExecutable'>
<arg type='^{__CFBundle=}' name='bundle' declared_type='CFBundleRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFByteOrderGetCurrent' inline='true'>
<retval type='l' declared_type='CFByteOrder'/>
</function>
<function name='CFCalendarAddComponents' variadic='true'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<arg type='^d' name='at' declared_type='CFAbsoluteTime*'/>
<arg type='L' name='options' declared_type='CFOptionFlags'/>
<arg type='*' name='componentDesc' declared_type='char*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCalendarComposeAbsoluteTime' variadic='true'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<arg type='^d' name='at' declared_type='CFAbsoluteTime*'/>
<arg type='*' name='componentDesc' declared_type='char*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCalendarCopyCurrent'>
<retval type='^{__CFCalendar=}' declared_type='CFCalendarRef'/>
</function>
<function name='CFCalendarCopyLocale'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef'/>
</function>
<function name='CFCalendarCopyTimeZone'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<retval type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef'/>
</function>
<function name='CFCalendarCreateWithIdentifier'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='identifier' declared_type='CFStringRef'/>
<retval type='^{__CFCalendar=}' declared_type='CFCalendarRef'/>
</function>
<function name='CFCalendarDecomposeAbsoluteTime' variadic='true'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<arg type='*' name='componentDesc' declared_type='char*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCalendarGetComponentDifference' variadic='true'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<arg type='d' name='startingAT' declared_type='CFAbsoluteTime'/>
<arg type='d' name='resultAT' declared_type='CFAbsoluteTime'/>
<arg type='L' name='options' declared_type='CFOptionFlags'/>
<arg type='*' name='componentDesc' declared_type='char*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCalendarGetFirstWeekday'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFCalendarGetIdentifier'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFCalendarGetMaximumRangeOfUnit'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<arg type='L' name='unit' declared_type='CFCalendarUnit'/>
<retval type='{_CFRange=ii}' declared_type='CFRange'/>
</function>
<function name='CFCalendarGetMinimumDaysInFirstWeek'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFCalendarGetMinimumRangeOfUnit'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<arg type='L' name='unit' declared_type='CFCalendarUnit'/>
<retval type='{_CFRange=ii}' declared_type='CFRange'/>
</function>
<function name='CFCalendarGetOrdinalityOfUnit'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<arg type='L' name='smallerUnit' declared_type='CFCalendarUnit'/>
<arg type='L' name='biggerUnit' declared_type='CFCalendarUnit'/>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFCalendarGetRangeOfUnit'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<arg type='L' name='smallerUnit' declared_type='CFCalendarUnit'/>
<arg type='L' name='biggerUnit' declared_type='CFCalendarUnit'/>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<retval type='{_CFRange=ii}' declared_type='CFRange'/>
</function>
<function name='CFCalendarGetTimeRangeOfUnit'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<arg type='L' name='unit' declared_type='CFCalendarUnit'/>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<arg type='^d' name='startp' declared_type='CFAbsoluteTime*'/>
<arg type='^d' name='tip' declared_type='CFTimeInterval*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCalendarGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFCalendarSetFirstWeekday'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<arg type='l' name='wkdy' declared_type='CFIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCalendarSetLocale'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCalendarSetMinimumDaysInFirstWeek'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<arg type='l' name='mwd' declared_type='CFIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCalendarSetTimeZone'>
<arg type='^{__CFCalendar=}' name='calendar' declared_type='CFCalendarRef'/>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetAddCharactersInRange'>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFMutableCharacterSetRef'/>
<arg type='{_CFRange=ii}' name='theRange' declared_type='CFRange'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetAddCharactersInString'>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFMutableCharacterSetRef'/>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetCreateBitmapRepresentation'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFCharacterSetRef'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</function>
<function name='CFCharacterSetCreateCopy'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFCharacterSetRef'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef'/>
</function>
<function name='CFCharacterSetCreateInvertedSet'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFCharacterSetRef'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef'/>
</function>
<function name='CFCharacterSetCreateMutable'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef'/>
</function>
<function name='CFCharacterSetCreateMutableCopy'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFCharacterSetRef'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef'/>
</function>
<function name='CFCharacterSetCreateWithBitmapRepresentation'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFData=}' name='theData' declared_type='CFDataRef'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef'/>
</function>
<function name='CFCharacterSetCreateWithCharactersInRange'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='{_CFRange=ii}' name='theRange' declared_type='CFRange'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef'/>
</function>
<function name='CFCharacterSetCreateWithCharactersInString'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef'/>
</function>
<function name='CFCharacterSetGetPredefined'>
<arg type='l' name='theSetIdentifier' declared_type='CFCharacterSetPredefinedSet'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef'/>
</function>
<function name='CFCharacterSetGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFCharacterSetHasMemberInPlane'>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFCharacterSetRef'/>
<arg type='l' name='thePlane' declared_type='CFIndex'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCharacterSetIntersect'>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFMutableCharacterSetRef'/>
<arg type='^{__CFCharacterSet=}' name='theOtherSet' declared_type='CFCharacterSetRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetInvert'>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFMutableCharacterSetRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetIsCharacterMember'>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFCharacterSetRef'/>
<arg type='S' name='theChar' declared_type='UniChar'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCharacterSetIsLongCharacterMember'>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFCharacterSetRef'/>
<arg type='L' name='theChar' declared_type='UTF32Char'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCharacterSetIsSupersetOfSet'>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFCharacterSetRef'/>
<arg type='^{__CFCharacterSet=}' name='theOtherset' declared_type='CFCharacterSetRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCharacterSetRemoveCharactersInRange'>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFMutableCharacterSetRef'/>
<arg type='{_CFRange=ii}' name='theRange' declared_type='CFRange'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetRemoveCharactersInString'>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFMutableCharacterSetRef'/>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetUnion'>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFMutableCharacterSetRef'/>
<arg type='^{__CFCharacterSet=}' name='theOtherSet' declared_type='CFCharacterSetRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFConvertDoubleHostToSwapped' inline='true'>
<arg type='d' name='arg' declared_type='double'/>
<retval type='{_CFSwappedFloat64=Q}' declared_type='CFSwappedFloat64'/>
</function>
<function name='CFConvertDoubleSwappedToHost' inline='true'>
<arg type='{_CFSwappedFloat64=Q}' name='arg' declared_type='CFSwappedFloat64'/>
<retval type='d' declared_type='double'/>
</function>
<function name='CFConvertFloat32HostToSwapped' inline='true'>
<arg type='f' name='arg' declared_type='Float32'/>
<retval type='{_CFSwappedFloat32=I}' declared_type='CFSwappedFloat32'/>
</function>
<function name='CFConvertFloat32SwappedToHost' inline='true'>
<arg type='{_CFSwappedFloat32=I}' name='arg' declared_type='CFSwappedFloat32'/>
<retval type='f' declared_type='Float32'/>
</function>
<function name='CFConvertFloat64HostToSwapped' inline='true'>
<arg type='d' name='arg' declared_type='Float64'/>
<retval type='{_CFSwappedFloat64=Q}' declared_type='CFSwappedFloat64'/>
</function>
<function name='CFConvertFloat64SwappedToHost' inline='true'>
<arg type='{_CFSwappedFloat64=Q}' name='arg' declared_type='CFSwappedFloat64'/>
<retval type='d' declared_type='Float64'/>
</function>
<function name='CFConvertFloatHostToSwapped' inline='true'>
<arg type='f' name='arg' declared_type='float'/>
<retval type='{_CFSwappedFloat32=I}' declared_type='CFSwappedFloat32'/>
</function>
<function name='CFConvertFloatSwappedToHost' inline='true'>
<arg type='{_CFSwappedFloat32=I}' name='arg' declared_type='CFSwappedFloat32'/>
<retval type='f' declared_type='float'/>
</function>
<function name='CFCopyDescription'>
<arg type='^v' name='cf' declared_type='CFTypeRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFCopyHomeDirectoryURL'>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFCopyTypeIDDescription'>
<arg type='L' name='type_id' declared_type='CFTypeID'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFDataAppendBytes'>
<arg type='^{__CFData=}' name='theData' declared_type='CFMutableDataRef'/>
<arg type='*' name='bytes' declared_type='UInt8*' const='true'/>
<arg type='l' name='length' declared_type='CFIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDataCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='*' name='bytes' declared_type='UInt8*' const='true'/>
<arg type='l' name='length' declared_type='CFIndex'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</function>
<function name='CFDataCreateCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFData=}' name='theData' declared_type='CFDataRef'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</function>
<function name='CFDataCreateMutable'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<retval type='^{__CFData=}' declared_type='CFMutableDataRef'/>
</function>
<function name='CFDataCreateMutableCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<arg type='^{__CFData=}' name='theData' declared_type='CFDataRef'/>
<retval type='^{__CFData=}' declared_type='CFMutableDataRef'/>
</function>
<function name='CFDataCreateWithBytesNoCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='*' name='bytes' declared_type='UInt8*' const='true'/>
<arg type='l' name='length' declared_type='CFIndex'/>
<arg type='^{__CFAllocator=}' name='bytesDeallocator' declared_type='CFAllocatorRef'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</function>
<function name='CFDataDeleteBytes'>
<arg type='^{__CFData=}' name='theData' declared_type='CFMutableDataRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDataFind'>
<arg type='^{__CFData=}' name='theData' declared_type='CFDataRef'/>
<arg type='^{__CFData=}' name='dataToFind' declared_type='CFDataRef'/>
<arg type='{_CFRange=ii}' name='searchRange' declared_type='CFRange'/>
<arg type='L' name='compareOptions' declared_type='CFDataSearchFlags'/>
<retval type='{_CFRange=ii}' declared_type='CFRange'/>
</function>
<function name='CFDataGetBytePtr'>
<arg type='^{__CFData=}' name='theData' declared_type='CFDataRef'/>
<retval type='*' declared_type='UInt8*' const='true'/>
</function>
<function name='CFDataGetBytes'>
<arg type='^{__CFData=}' name='theData' declared_type='CFDataRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='*' name='buffer' declared_type='UInt8*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDataGetLength'>
<arg type='^{__CFData=}' name='theData' declared_type='CFDataRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFDataGetMutableBytePtr'>
<arg type='^{__CFData=}' name='theData' declared_type='CFMutableDataRef'/>
<retval type='*' declared_type='UInt8*'/>
</function>
<function name='CFDataGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFDataIncreaseLength'>
<arg type='^{__CFData=}' name='theData' declared_type='CFMutableDataRef'/>
<arg type='l' name='extraLength' declared_type='CFIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDataReplaceBytes'>
<arg type='^{__CFData=}' name='theData' declared_type='CFMutableDataRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='*' name='newBytes' declared_type='UInt8*' const='true'/>
<arg type='l' name='newLength' declared_type='CFIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDataSetLength'>
<arg type='^{__CFData=}' name='theData' declared_type='CFMutableDataRef'/>
<arg type='l' name='length' declared_type='CFIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDateCompare'>
<arg type='^{__CFDate=}' name='theDate' declared_type='CFDateRef'/>
<arg type='^{__CFDate=}' name='otherDate' declared_type='CFDateRef'/>
<arg type='^v' name='context' declared_type='void*'/>
<retval type='l' declared_type='CFComparisonResult'/>
</function>
<function name='CFDateCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<retval type='^{__CFDate=}' declared_type='CFDateRef'/>
</function>
<function name='CFDateFormatterCopyProperty'>
<arg type='^{__CFDateFormatter=}' name='formatter' declared_type='CFDateFormatterRef'/>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<retval type='^v' declared_type='CFTypeRef'/>
</function>
<function name='CFDateFormatterCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<arg type='l' name='dateStyle' declared_type='CFDateFormatterStyle'/>
<arg type='l' name='timeStyle' declared_type='CFDateFormatterStyle'/>
<retval type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef'/>
</function>
<function name='CFDateFormatterCreateDateFormatFromTemplate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='tmplate' declared_type='CFStringRef'/>
<arg type='L' name='options' declared_type='CFOptionFlags'/>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFDateFormatterCreateDateFromString'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFDateFormatter=}' name='formatter' declared_type='CFDateFormatterRef'/>
<arg type='^{__CFString=}' name='string' declared_type='CFStringRef'/>
<arg type='^{_CFRange=ii}' name='rangep' declared_type='CFRange*'/>
<retval type='^{__CFDate=}' declared_type='CFDateRef'/>
</function>
<function name='CFDateFormatterCreateStringWithAbsoluteTime'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFDateFormatter=}' name='formatter' declared_type='CFDateFormatterRef'/>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFDateFormatterCreateStringWithDate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFDateFormatter=}' name='formatter' declared_type='CFDateFormatterRef'/>
<arg type='^{__CFDate=}' name='date' declared_type='CFDateRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFDateFormatterGetAbsoluteTimeFromString'>
<arg type='^{__CFDateFormatter=}' name='formatter' declared_type='CFDateFormatterRef'/>
<arg type='^{__CFString=}' name='string' declared_type='CFStringRef'/>
<arg type='^{_CFRange=ii}' name='rangep' declared_type='CFRange*'/>
<arg type='^d' name='atp' declared_type='CFAbsoluteTime*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFDateFormatterGetDateStyle'>
<arg type='^{__CFDateFormatter=}' name='formatter' declared_type='CFDateFormatterRef'/>
<retval type='l' declared_type='CFDateFormatterStyle'/>
</function>
<function name='CFDateFormatterGetFormat'>
<arg type='^{__CFDateFormatter=}' name='formatter' declared_type='CFDateFormatterRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFDateFormatterGetLocale'>
<arg type='^{__CFDateFormatter=}' name='formatter' declared_type='CFDateFormatterRef'/>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef'/>
</function>
<function name='CFDateFormatterGetTimeStyle'>
<arg type='^{__CFDateFormatter=}' name='formatter' declared_type='CFDateFormatterRef'/>
<retval type='l' declared_type='CFDateFormatterStyle'/>
</function>
<function name='CFDateFormatterGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFDateFormatterSetFormat'>
<arg type='^{__CFDateFormatter=}' name='formatter' declared_type='CFDateFormatterRef'/>
<arg type='^{__CFString=}' name='formatString' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDateFormatterSetProperty'>
<arg type='^{__CFDateFormatter=}' name='formatter' declared_type='CFDateFormatterRef'/>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<arg type='^v' name='value' declared_type='CFTypeRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDateGetAbsoluteTime'>
<arg type='^{__CFDate=}' name='theDate' declared_type='CFDateRef'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFDateGetTimeIntervalSinceDate'>
<arg type='^{__CFDate=}' name='theDate' declared_type='CFDateRef'/>
<arg type='^{__CFDate=}' name='otherDate' declared_type='CFDateRef'/>
<retval type='d' declared_type='CFTimeInterval'/>
</function>
<function name='CFDateGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFDictionaryAddValue'>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFMutableDictionaryRef'/>
<arg type='^v' name='key' declared_type='void*' const='true'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionaryApplyFunction'>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFDictionaryRef'/>
<arg type='^?' name='applier' declared_type='CFDictionaryApplierFunction' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' name='context' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionaryContainsKey'>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFDictionaryRef'/>
<arg type='^v' name='key' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFDictionaryContainsValue'>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFDictionaryRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFDictionaryCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^^v' name='keys' declared_type='void**' const='true'/>
<arg type='^^v' name='values' declared_type='void**' const='true'/>
<arg type='l' name='numValues' declared_type='CFIndex'/>
<arg type='^{_CFDictionaryKeyCallBacks=i^?^?^?^?^?}' name='keyCallBacks' declared_type='CFDictionaryKeyCallBacks*' const='true'/>
<arg type='^{_CFDictionaryValueCallBacks=i^?^?^?^?}' name='valueCallBacks' declared_type='CFDictionaryValueCallBacks*' const='true'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFDictionaryCreateCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFDictionaryRef'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFDictionaryCreateMutable'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<arg type='^{_CFDictionaryKeyCallBacks=i^?^?^?^?^?}' name='keyCallBacks' declared_type='CFDictionaryKeyCallBacks*' const='true'/>
<arg type='^{_CFDictionaryValueCallBacks=i^?^?^?^?}' name='valueCallBacks' declared_type='CFDictionaryValueCallBacks*' const='true'/>
<retval type='^{__CFDictionary=}' declared_type='CFMutableDictionaryRef'/>
</function>
<function name='CFDictionaryCreateMutableCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFDictionaryRef'/>
<retval type='^{__CFDictionary=}' declared_type='CFMutableDictionaryRef'/>
</function>
<function name='CFDictionaryGetCount'>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFDictionaryRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFDictionaryGetCountOfKey'>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFDictionaryRef'/>
<arg type='^v' name='key' declared_type='void*' const='true'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFDictionaryGetCountOfValue'>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFDictionaryRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFDictionaryGetKeysAndValues'>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFDictionaryRef'/>
<arg type='^^v' name='keys' declared_type='void**' const='true'/>
<arg type='^^v' name='values' declared_type='void**' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionaryGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFDictionaryGetValue'>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFDictionaryRef'/>
<arg type='^v' name='key' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</function>
<function name='CFDictionaryGetValueIfPresent'>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFDictionaryRef'/>
<arg type='^v' name='key' declared_type='void*' const='true'/>
<arg type='^^v' name='value' declared_type='void**' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFDictionaryRemoveAllValues'>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFMutableDictionaryRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionaryRemoveValue'>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFMutableDictionaryRef'/>
<arg type='^v' name='key' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionaryReplaceValue'>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFMutableDictionaryRef'/>
<arg type='^v' name='key' declared_type='void*' const='true'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionarySetValue'>
<arg type='^{__CFDictionary=}' name='theDict' declared_type='CFMutableDictionaryRef'/>
<arg type='^v' name='key' declared_type='void*' const='true'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFEqual'>
<arg type='^v' name='cf1' declared_type='CFTypeRef'/>
<arg type='^v' name='cf2' declared_type='CFTypeRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFErrorCopyDescription'>
<arg type='^{__CFError=}' name='err' declared_type='CFErrorRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFErrorCopyFailureReason'>
<arg type='^{__CFError=}' name='err' declared_type='CFErrorRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFErrorCopyRecoverySuggestion'>
<arg type='^{__CFError=}' name='err' declared_type='CFErrorRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFErrorCopyUserInfo'>
<arg type='^{__CFError=}' name='err' declared_type='CFErrorRef'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFErrorCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='domain' declared_type='CFStringRef'/>
<arg type='l' name='code' declared_type='CFIndex'/>
<arg type='^{__CFDictionary=}' name='userInfo' declared_type='CFDictionaryRef'/>
<retval type='^{__CFError=}' declared_type='CFErrorRef'/>
</function>
<function name='CFErrorCreateWithUserInfoKeysAndValues'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='domain' declared_type='CFStringRef'/>
<arg type='l' name='code' declared_type='CFIndex'/>
<arg type='^^v' name='userInfoKeys' declared_type='void **' const='true'/>
<arg type='^^v' name='userInfoValues' declared_type='void **' const='true'/>
<arg type='l' name='numUserInfoValues' declared_type='CFIndex'/>
<retval type='^{__CFError=}' declared_type='CFErrorRef'/>
</function>
<function name='CFErrorGetCode'>
<arg type='^{__CFError=}' name='err' declared_type='CFErrorRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFErrorGetDomain'>
<arg type='^{__CFError=}' name='err' declared_type='CFErrorRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFErrorGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFFileDescriptorCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='i' name='fd' declared_type='CFFileDescriptorNativeDescriptor'/>
<arg type='B' name='closeOnInvalidate' declared_type='Boolean'/>
<arg type='^?' name='callout' declared_type='CFFileDescriptorCallBack' function_pointer='true'>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef'/>
<arg type='L' declared_type='CFOptionFlags'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFFileDescriptorContext=i^v^?^?^?}' name='context' declared_type='CFFileDescriptorContext*' const='true'/>
<retval type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef'/>
</function>
<function name='CFFileDescriptorCreateRunLoopSource'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFFileDescriptor=}' name='f' declared_type='CFFileDescriptorRef'/>
<arg type='l' name='order' declared_type='CFIndex'/>
<retval type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef'/>
</function>
<function name='CFFileDescriptorDisableCallBacks'>
<arg type='^{__CFFileDescriptor=}' name='f' declared_type='CFFileDescriptorRef'/>
<arg type='L' name='callBackTypes' declared_type='CFOptionFlags'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFFileDescriptorEnableCallBacks'>
<arg type='^{__CFFileDescriptor=}' name='f' declared_type='CFFileDescriptorRef'/>
<arg type='L' name='callBackTypes' declared_type='CFOptionFlags'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFFileDescriptorGetContext'>
<arg type='^{__CFFileDescriptor=}' name='f' declared_type='CFFileDescriptorRef'/>
<arg type='^{_CFFileDescriptorContext=i^v^?^?^?}' name='context' declared_type='CFFileDescriptorContext*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFFileDescriptorGetNativeDescriptor'>
<arg type='^{__CFFileDescriptor=}' name='f' declared_type='CFFileDescriptorRef'/>
<retval type='i' declared_type='CFFileDescriptorNativeDescriptor'/>
</function>
<function name='CFFileDescriptorGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFFileDescriptorInvalidate'>
<arg type='^{__CFFileDescriptor=}' name='f' declared_type='CFFileDescriptorRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFFileDescriptorIsValid'>
<arg type='^{__CFFileDescriptor=}' name='f' declared_type='CFFileDescriptorRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityCopyAccessControlList'>
<arg type='^{__CFFileSecurity=}' name='fileSec' declared_type='CFFileSecurityRef'/>
<arg type='^^{_acl}' name='accessControlList' declared_type='acl_t*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityCopyGroupUUID'>
<arg type='^{__CFFileSecurity=}' name='fileSec' declared_type='CFFileSecurityRef'/>
<arg type='^^{__CFUUID}' name='groupUUID' declared_type='CFUUIDRef*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityCopyOwnerUUID'>
<arg type='^{__CFFileSecurity=}' name='fileSec' declared_type='CFFileSecurityRef'/>
<arg type='^^{__CFUUID}' name='ownerUUID' declared_type='CFUUIDRef*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<retval type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef'/>
</function>
<function name='CFFileSecurityCreateCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFFileSecurity=}' name='fileSec' declared_type='CFFileSecurityRef'/>
<retval type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef'/>
</function>
<function name='CFFileSecurityGetGroup'>
<arg type='^{__CFFileSecurity=}' name='fileSec' declared_type='CFFileSecurityRef'/>
<arg type='^I' name='group' declared_type='gid_t*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityGetMode'>
<arg type='^{__CFFileSecurity=}' name='fileSec' declared_type='CFFileSecurityRef'/>
<arg type='^S' name='mode' declared_type='mode_t*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityGetOwner'>
<arg type='^{__CFFileSecurity=}' name='fileSec' declared_type='CFFileSecurityRef'/>
<arg type='^I' name='owner' declared_type='uid_t*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFFileSecuritySetAccessControlList'>
<arg type='^{__CFFileSecurity=}' name='fileSec' declared_type='CFFileSecurityRef'/>
<arg type='^{_acl=}' name='accessControlList' declared_type='acl_t'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecuritySetGroup'>
<arg type='^{__CFFileSecurity=}' name='fileSec' declared_type='CFFileSecurityRef'/>
<arg type='I' name='group' declared_type='gid_t'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecuritySetGroupUUID'>
<arg type='^{__CFFileSecurity=}' name='fileSec' declared_type='CFFileSecurityRef'/>
<arg type='^{__CFUUID=}' name='groupUUID' declared_type='CFUUIDRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecuritySetMode'>
<arg type='^{__CFFileSecurity=}' name='fileSec' declared_type='CFFileSecurityRef'/>
<arg type='S' name='mode' declared_type='mode_t'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecuritySetOwner'>
<arg type='^{__CFFileSecurity=}' name='fileSec' declared_type='CFFileSecurityRef'/>
<arg type='I' name='owner' declared_type='uid_t'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecuritySetOwnerUUID'>
<arg type='^{__CFFileSecurity=}' name='fileSec' declared_type='CFFileSecurityRef'/>
<arg type='^{__CFUUID=}' name='ownerUUID' declared_type='CFUUIDRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFGetAllocator'>
<arg type='^v' name='cf' declared_type='CFTypeRef'/>
<retval type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
</function>
<function name='CFGetRetainCount'>
<arg type='^v' name='cf' declared_type='CFTypeRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFGetTypeID'>
<arg type='^v' name='cf' declared_type='CFTypeRef'/>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFGregorianDateGetAbsoluteTime'>
<arg type='{_CFGregorianDate=iccccd}' name='gdate' declared_type='CFGregorianDate'/>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFGregorianDateIsValid'>
<arg type='{_CFGregorianDate=iccccd}' name='gdate' declared_type='CFGregorianDate'/>
<arg type='L' name='unitFlags' declared_type='CFOptionFlags'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFHash'>
<arg type='^v' name='cf' declared_type='CFTypeRef'/>
<retval type='L' declared_type='CFHashCode'/>
</function>
<function name='CFLocaleCopyAvailableLocaleIdentifiers'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFLocaleCopyCommonISOCurrencyCodes'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFLocaleCopyCurrent'>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef'/>
</function>
<function name='CFLocaleCopyDisplayNameForPropertyValue'>
<arg type='^{__CFLocale=}' name='displayLocale' declared_type='CFLocaleRef'/>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='value' declared_type='CFStringRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFLocaleCopyISOCountryCodes'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFLocaleCopyISOCurrencyCodes'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFLocaleCopyISOLanguageCodes'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFLocaleCopyPreferredLanguages'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFLocaleCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='localeIdentifier' declared_type='CFStringRef'/>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef'/>
</function>
<function name='CFLocaleCreateCanonicalLanguageIdentifierFromString'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='localeIdentifier' declared_type='CFStringRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='s' name='lcode' declared_type='LangCode'/>
<arg type='s' name='rcode' declared_type='RegionCode'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFLocaleCreateCanonicalLocaleIdentifierFromString'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='localeIdentifier' declared_type='CFStringRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFLocaleCreateComponentsFromLocaleIdentifier'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='localeID' declared_type='CFStringRef'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFLocaleCreateCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef'/>
</function>
<function name='CFLocaleCreateLocaleIdentifierFromComponents'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFDictionary=}' name='dictionary' declared_type='CFDictionaryRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='I' name='lcid' declared_type='uint32_t'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFLocaleGetIdentifier'>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFLocaleGetLanguageCharacterDirection'>
<arg type='^{__CFString=}' name='isoLangCode' declared_type='CFStringRef'/>
<retval type='l' declared_type='CFLocaleLanguageDirection'/>
</function>
<function name='CFLocaleGetLanguageLineDirection'>
<arg type='^{__CFString=}' name='isoLangCode' declared_type='CFStringRef'/>
<retval type='l' declared_type='CFLocaleLanguageDirection'/>
</function>
<function name='CFLocaleGetSystem'>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef'/>
</function>
<function name='CFLocaleGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFLocaleGetValue'>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<retval type='^v' declared_type='CFTypeRef'/>
</function>
<function name='CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier'>
<arg type='^{__CFString=}' name='localeIdentifier' declared_type='CFStringRef'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='CFMachPortCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^?' name='callout' declared_type='CFMachPortCallBack' function_pointer='true'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef'/>
<arg type='^v' declared_type='void*'/>
<arg type='l' declared_type='CFIndex'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFMachPortContext=i^v^?^?^?}' name='context' declared_type='CFMachPortContext*'/>
<arg type='^B' name='shouldFreeInfo' declared_type='Boolean*'/>
<retval type='^{__CFMachPort=}' declared_type='CFMachPortRef'/>
</function>
<function name='CFMachPortCreateRunLoopSource'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFMachPort=}' name='port' declared_type='CFMachPortRef'/>
<arg type='l' name='order' declared_type='CFIndex'/>
<retval type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef'/>
</function>
<function name='CFMachPortCreateWithPort'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='I' name='portNum' declared_type='mach_port_t'/>
<arg type='^?' name='callout' declared_type='CFMachPortCallBack' function_pointer='true'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef'/>
<arg type='^v' declared_type='void*'/>
<arg type='l' declared_type='CFIndex'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFMachPortContext=i^v^?^?^?}' name='context' declared_type='CFMachPortContext*'/>
<arg type='^B' name='shouldFreeInfo' declared_type='Boolean*'/>
<retval type='^{__CFMachPort=}' declared_type='CFMachPortRef'/>
</function>
<function name='CFMachPortGetContext'>
<arg type='^{__CFMachPort=}' name='port' declared_type='CFMachPortRef'/>
<arg type='^{_CFMachPortContext=i^v^?^?^?}' name='context' declared_type='CFMachPortContext*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMachPortGetInvalidationCallBack'>
<arg type='^{__CFMachPort=}' name='port' declared_type='CFMachPortRef'/>
<retval type='^?' declared_type='CFMachPortInvalidationCallBack' function_pointer='true'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</retval>
</function>
<function name='CFMachPortGetPort'>
<arg type='^{__CFMachPort=}' name='port' declared_type='CFMachPortRef'/>
<retval type='I' declared_type='mach_port_t'/>
</function>
<function name='CFMachPortGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFMachPortInvalidate'>
<arg type='^{__CFMachPort=}' name='port' declared_type='CFMachPortRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMachPortIsValid'>
<arg type='^{__CFMachPort=}' name='port' declared_type='CFMachPortRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFMachPortSetInvalidationCallBack'>
<arg type='^{__CFMachPort=}' name='port' declared_type='CFMachPortRef'/>
<arg type='^?' name='callout' declared_type='CFMachPortInvalidationCallBack' function_pointer='true'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMakeCollectable'>
<arg type='^v' name='cf' declared_type='CFTypeRef'/>
<retval type='^v' declared_type='CFTypeRef'/>
</function>
<function name='CFMessagePortCreateLocal'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='name' declared_type='CFStringRef'/>
<arg type='^?' name='callout' declared_type='CFMessagePortCallBack' function_pointer='true'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef'/>
<arg type='l' declared_type='SInt32'/>
<arg type='^{__CFData=}' declared_type='CFDataRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</arg>
<arg type='^{_CFMessagePortContext=i^v^?^?^?}' name='context' declared_type='CFMessagePortContext*'/>
<arg type='^B' name='shouldFreeInfo' declared_type='Boolean*'/>
<retval type='^{__CFMessagePort=}' declared_type='CFMessagePortRef'/>
</function>
<function name='CFMessagePortCreateRemote'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='name' declared_type='CFStringRef'/>
<retval type='^{__CFMessagePort=}' declared_type='CFMessagePortRef'/>
</function>
<function name='CFMessagePortCreateRunLoopSource'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFMessagePort=}' name='local' declared_type='CFMessagePortRef'/>
<arg type='l' name='order' declared_type='CFIndex'/>
<retval type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef'/>
</function>
<function name='CFMessagePortGetContext'>
<arg type='^{__CFMessagePort=}' name='ms' declared_type='CFMessagePortRef'/>
<arg type='^{_CFMessagePortContext=i^v^?^?^?}' name='context' declared_type='CFMessagePortContext*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMessagePortGetInvalidationCallBack'>
<arg type='^{__CFMessagePort=}' name='ms' declared_type='CFMessagePortRef'/>
<retval type='^?' declared_type='CFMessagePortInvalidationCallBack' function_pointer='true'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</retval>
</function>
<function name='CFMessagePortGetName'>
<arg type='^{__CFMessagePort=}' name='ms' declared_type='CFMessagePortRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFMessagePortGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFMessagePortInvalidate'>
<arg type='^{__CFMessagePort=}' name='ms' declared_type='CFMessagePortRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMessagePortIsRemote'>
<arg type='^{__CFMessagePort=}' name='ms' declared_type='CFMessagePortRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFMessagePortIsValid'>
<arg type='^{__CFMessagePort=}' name='ms' declared_type='CFMessagePortRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFMessagePortSendRequest'>
<arg type='^{__CFMessagePort=}' name='remote' declared_type='CFMessagePortRef'/>
<arg type='l' name='msgid' declared_type='SInt32'/>
<arg type='^{__CFData=}' name='data' declared_type='CFDataRef'/>
<arg type='d' name='sendTimeout' declared_type='CFTimeInterval'/>
<arg type='d' name='rcvTimeout' declared_type='CFTimeInterval'/>
<arg type='^{__CFString=}' name='replyMode' declared_type='CFStringRef'/>
<arg type='^^{__CFData}' name='returnData' declared_type='CFDataRef*'/>
<retval type='l' declared_type='SInt32'/>
</function>
<function name='CFMessagePortSetDispatchQueue'>
<arg type='^{__CFMessagePort=}' name='ms' declared_type='CFMessagePortRef'/>
<arg type='^{dispatch_queue_s=}' name='queue' declared_type='dispatch_queue_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMessagePortSetInvalidationCallBack'>
<arg type='^{__CFMessagePort=}' name='ms' declared_type='CFMessagePortRef'/>
<arg type='^?' name='callout' declared_type='CFMessagePortInvalidationCallBack' function_pointer='true'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMessagePortSetName'>
<arg type='^{__CFMessagePort=}' name='ms' declared_type='CFMessagePortRef'/>
<arg type='^{__CFString=}' name='newName' declared_type='CFStringRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFNotificationCenterAddObserver'>
<arg type='^{__CFNotificationCenter=}' name='center' declared_type='CFNotificationCenterRef'/>
<arg type='^v' name='observer' declared_type='void*' const='true'/>
<arg type='^?' name='callBack' declared_type='CFNotificationCallback' function_pointer='true'>
<arg type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef'/>
<arg type='^v' declared_type='void*'/>
<arg type='^{__CFString=}' declared_type='CFStringRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{__CFString=}' name='name' declared_type='CFStringRef'/>
<arg type='^v' name='object' declared_type='void*' const='true'/>
<arg type='l' name='suspensionBehavior' declared_type='CFNotificationSuspensionBehavior'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNotificationCenterGetDarwinNotifyCenter'>
<retval type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef'/>
</function>
<function name='CFNotificationCenterGetLocalCenter'>
<retval type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef'/>
</function>
<function name='CFNotificationCenterGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFNotificationCenterPostNotification'>
<arg type='^{__CFNotificationCenter=}' name='center' declared_type='CFNotificationCenterRef'/>
<arg type='^{__CFString=}' name='name' declared_type='CFStringRef'/>
<arg type='^v' name='object' declared_type='void*' const='true'/>
<arg type='^{__CFDictionary=}' name='userInfo' declared_type='CFDictionaryRef'/>
<arg type='B' name='deliverImmediately' declared_type='Boolean'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNotificationCenterPostNotificationWithOptions'>
<arg type='^{__CFNotificationCenter=}' name='center' declared_type='CFNotificationCenterRef'/>
<arg type='^{__CFString=}' name='name' declared_type='CFStringRef'/>
<arg type='^v' name='object' declared_type='void*' const='true'/>
<arg type='^{__CFDictionary=}' name='userInfo' declared_type='CFDictionaryRef'/>
<arg type='L' name='options' declared_type='CFOptionFlags'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNotificationCenterRemoveEveryObserver'>
<arg type='^{__CFNotificationCenter=}' name='center' declared_type='CFNotificationCenterRef'/>
<arg type='^v' name='observer' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNotificationCenterRemoveObserver'>
<arg type='^{__CFNotificationCenter=}' name='center' declared_type='CFNotificationCenterRef'/>
<arg type='^v' name='observer' declared_type='void*' const='true'/>
<arg type='^{__CFString=}' name='name' declared_type='CFStringRef'/>
<arg type='^v' name='object' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNullGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFNumberCompare'>
<arg type='^{__CFNumber=}' name='number' declared_type='CFNumberRef'/>
<arg type='^{__CFNumber=}' name='otherNumber' declared_type='CFNumberRef'/>
<arg type='^v' name='context' declared_type='void*'/>
<retval type='l' declared_type='CFComparisonResult'/>
</function>
<function name='CFNumberCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='theType' declared_type='CFNumberType'/>
<arg type='^v' name='valuePtr' declared_type='void*' const='true'/>
<retval type='^{__CFNumber=}' declared_type='CFNumberRef'/>
</function>
<function name='CFNumberFormatterCopyProperty'>
<arg type='^{__CFNumberFormatter=}' name='formatter' declared_type='CFNumberFormatterRef'/>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<retval type='^v' declared_type='CFTypeRef'/>
</function>
<function name='CFNumberFormatterCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<arg type='l' name='style' declared_type='CFNumberFormatterStyle'/>
<retval type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef'/>
</function>
<function name='CFNumberFormatterCreateNumberFromString'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFNumberFormatter=}' name='formatter' declared_type='CFNumberFormatterRef'/>
<arg type='^{__CFString=}' name='string' declared_type='CFStringRef'/>
<arg type='^{_CFRange=ii}' name='rangep' declared_type='CFRange*'/>
<arg type='L' name='options' declared_type='CFOptionFlags'/>
<retval type='^{__CFNumber=}' declared_type='CFNumberRef'/>
</function>
<function name='CFNumberFormatterCreateStringWithNumber'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFNumberFormatter=}' name='formatter' declared_type='CFNumberFormatterRef'/>
<arg type='^{__CFNumber=}' name='number' declared_type='CFNumberRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFNumberFormatterCreateStringWithValue'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFNumberFormatter=}' name='formatter' declared_type='CFNumberFormatterRef'/>
<arg type='l' name='numberType' declared_type='CFNumberType'/>
<arg type='^v' name='valuePtr' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFNumberFormatterGetDecimalInfoForCurrencyCode'>
<arg type='^{__CFString=}' name='currencyCode' declared_type='CFStringRef'/>
<arg type='^i' name='defaultFractionDigits' declared_type='int32_t*'/>
<arg type='^d' name='roundingIncrement' declared_type='double*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFNumberFormatterGetFormat'>
<arg type='^{__CFNumberFormatter=}' name='formatter' declared_type='CFNumberFormatterRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFNumberFormatterGetLocale'>
<arg type='^{__CFNumberFormatter=}' name='formatter' declared_type='CFNumberFormatterRef'/>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef'/>
</function>
<function name='CFNumberFormatterGetStyle'>
<arg type='^{__CFNumberFormatter=}' name='formatter' declared_type='CFNumberFormatterRef'/>
<retval type='l' declared_type='CFNumberFormatterStyle'/>
</function>
<function name='CFNumberFormatterGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFNumberFormatterGetValueFromString'>
<arg type='^{__CFNumberFormatter=}' name='formatter' declared_type='CFNumberFormatterRef'/>
<arg type='^{__CFString=}' name='string' declared_type='CFStringRef'/>
<arg type='^{_CFRange=ii}' name='rangep' declared_type='CFRange*'/>
<arg type='l' name='numberType' declared_type='CFNumberType'/>
<arg type='^v' name='valuePtr' declared_type='void*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFNumberFormatterSetFormat'>
<arg type='^{__CFNumberFormatter=}' name='formatter' declared_type='CFNumberFormatterRef'/>
<arg type='^{__CFString=}' name='formatString' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNumberFormatterSetProperty'>
<arg type='^{__CFNumberFormatter=}' name='formatter' declared_type='CFNumberFormatterRef'/>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<arg type='^v' name='value' declared_type='CFTypeRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNumberGetByteSize'>
<arg type='^{__CFNumber=}' name='number' declared_type='CFNumberRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFNumberGetType'>
<arg type='^{__CFNumber=}' name='number' declared_type='CFNumberRef'/>
<retval type='l' declared_type='CFNumberType'/>
</function>
<function name='CFNumberGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFNumberGetValue'>
<arg type='^{__CFNumber=}' name='number' declared_type='CFNumberRef'/>
<arg type='l' name='theType' declared_type='CFNumberType'/>
<arg type='^v' name='valuePtr' declared_type='void*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFNumberIsFloatType'>
<arg type='^{__CFNumber=}' name='number' declared_type='CFNumberRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInAddInstanceForFactory'>
<arg type='^{__CFUUID=}' name='factoryID' declared_type='CFUUIDRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPlugInCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='plugInURL' declared_type='CFURLRef'/>
<retval type='^{__CFBundle=}' declared_type='CFPlugInRef'/>
</function>
<function name='CFPlugInFindFactoriesForPlugInType'>
<arg type='^{__CFUUID=}' name='typeUUID' declared_type='CFUUIDRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFPlugInFindFactoriesForPlugInTypeInPlugIn'>
<arg type='^{__CFUUID=}' name='typeUUID' declared_type='CFUUIDRef'/>
<arg type='^{__CFBundle=}' name='plugIn' declared_type='CFPlugInRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFPlugInGetBundle'>
<arg type='^{__CFBundle=}' name='plugIn' declared_type='CFPlugInRef'/>
<retval type='^{__CFBundle=}' declared_type='CFBundleRef'/>
</function>
<function name='CFPlugInGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFPlugInInstanceCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFUUID=}' name='factoryUUID' declared_type='CFUUIDRef'/>
<arg type='^{__CFUUID=}' name='typeUUID' declared_type='CFUUIDRef'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFPlugInInstanceCreateWithInstanceDataSize'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='instanceDataSize' declared_type='CFIndex'/>
<arg type='^?' name='deallocateInstanceFunction' declared_type='CFPlugInInstanceDeallocateInstanceDataFunction' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{__CFString=}' name='factoryName' declared_type='CFStringRef'/>
<arg type='^?' name='getInterfaceFunction' declared_type='CFPlugInInstanceGetInterfaceFunction' function_pointer='true'>
<arg type='^{__CFPlugInInstance=}' declared_type='CFPlugInInstanceRef'/>
<arg type='^{__CFString=}' declared_type='CFStringRef'/>
<arg type='^^v' declared_type='void**'/>
<retval type='B' declared_type='Boolean'/>
</arg>
<retval type='^{__CFPlugInInstance=}' declared_type='CFPlugInInstanceRef'/>
</function>
<function name='CFPlugInInstanceGetFactoryName'>
<arg type='^{__CFPlugInInstance=}' name='instance' declared_type='CFPlugInInstanceRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFPlugInInstanceGetInstanceData'>
<arg type='^{__CFPlugInInstance=}' name='instance' declared_type='CFPlugInInstanceRef'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFPlugInInstanceGetInterfaceFunctionTable'>
<arg type='^{__CFPlugInInstance=}' name='instance' declared_type='CFPlugInInstanceRef'/>
<arg type='^{__CFString=}' name='interfaceName' declared_type='CFStringRef'/>
<arg type='^^v' name='ftbl' declared_type='void**'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInInstanceGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFPlugInIsLoadOnDemand'>
<arg type='^{__CFBundle=}' name='plugIn' declared_type='CFPlugInRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInRegisterFactoryFunction'>
<arg type='^{__CFUUID=}' name='factoryUUID' declared_type='CFUUIDRef'/>
<arg type='^?' name='func' declared_type='CFPlugInFactoryFunction' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef'/>
<retval type='^v' declared_type='void*'/>
</arg>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInRegisterFactoryFunctionByName'>
<arg type='^{__CFUUID=}' name='factoryUUID' declared_type='CFUUIDRef'/>
<arg type='^{__CFBundle=}' name='plugIn' declared_type='CFPlugInRef'/>
<arg type='^{__CFString=}' name='functionName' declared_type='CFStringRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInRegisterPlugInType'>
<arg type='^{__CFUUID=}' name='factoryUUID' declared_type='CFUUIDRef'/>
<arg type='^{__CFUUID=}' name='typeUUID' declared_type='CFUUIDRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInRemoveInstanceForFactory'>
<arg type='^{__CFUUID=}' name='factoryID' declared_type='CFUUIDRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPlugInSetLoadOnDemand'>
<arg type='^{__CFBundle=}' name='plugIn' declared_type='CFPlugInRef'/>
<arg type='B' name='flag' declared_type='Boolean'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPlugInUnregisterFactory'>
<arg type='^{__CFUUID=}' name='factoryUUID' declared_type='CFUUIDRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInUnregisterPlugInType'>
<arg type='^{__CFUUID=}' name='factoryUUID' declared_type='CFUUIDRef'/>
<arg type='^{__CFUUID=}' name='typeUUID' declared_type='CFUUIDRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPreferencesAddSuitePreferencesToApp'>
<arg type='^{__CFString=}' name='applicationID' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='suiteID' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPreferencesAppSynchronize'>
<arg type='^{__CFString=}' name='applicationID' declared_type='CFStringRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPreferencesAppValueIsForced'>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='applicationID' declared_type='CFStringRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPreferencesCopyAppValue'>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='applicationID' declared_type='CFStringRef'/>
<retval already_retained='true' type='@' declared_type='CFPropertyListRef'/>
</function>
<function name='CFPreferencesCopyApplicationList'>
<arg type='^{__CFString=}' name='userName' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='hostName' declared_type='CFStringRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFPreferencesCopyKeyList'>
<arg type='^{__CFString=}' name='applicationID' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='userName' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='hostName' declared_type='CFStringRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFPreferencesCopyMultiple'>
<arg type='^{__CFArray=}' name='keysToFetch' declared_type='CFArrayRef'/>
<arg type='^{__CFString=}' name='applicationID' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='userName' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='hostName' declared_type='CFStringRef'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFPreferencesCopyValue'>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='applicationID' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='userName' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='hostName' declared_type='CFStringRef'/>
<retval already_retained='true' type='@' declared_type='CFPropertyListRef'/>
</function>
<function name='CFPreferencesGetAppBooleanValue'>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='applicationID' declared_type='CFStringRef'/>
<arg type='^B' name='keyExistsAndHasValidFormat' declared_type='Boolean*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPreferencesGetAppIntegerValue'>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='applicationID' declared_type='CFStringRef'/>
<arg type='^B' name='keyExistsAndHasValidFormat' declared_type='Boolean*'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFPreferencesRemoveSuitePreferencesFromApp'>
<arg type='^{__CFString=}' name='applicationID' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='suiteID' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPreferencesSetAppValue'>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<arg type='@' name='value' declared_type='CFPropertyListRef'/>
<arg type='^{__CFString=}' name='applicationID' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPreferencesSetMultiple'>
<arg type='^{__CFDictionary=}' name='keysToSet' declared_type='CFDictionaryRef'/>
<arg type='^{__CFArray=}' name='keysToRemove' declared_type='CFArrayRef'/>
<arg type='^{__CFString=}' name='applicationID' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='userName' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='hostName' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPreferencesSetValue'>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<arg type='@' name='value' declared_type='CFPropertyListRef'/>
<arg type='^{__CFString=}' name='applicationID' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='userName' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='hostName' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPreferencesSynchronize'>
<arg type='^{__CFString=}' name='applicationID' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='userName' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='hostName' declared_type='CFStringRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPropertyListCreateData'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='@' name='propertyList' declared_type='CFPropertyListRef'/>
<arg type='l' name='format' declared_type='CFPropertyListFormat'/>
<arg type='L' name='options' declared_type='CFOptionFlags'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</function>
<function name='CFPropertyListCreateDeepCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='@' name='propertyList' declared_type='CFPropertyListRef'/>
<arg type='L' name='mutabilityOption' declared_type='CFOptionFlags'/>
<retval already_retained='true' type='@' declared_type='CFPropertyListRef'/>
</function>
<function name='CFPropertyListCreateFromStream'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFReadStream=}' name='stream' declared_type='CFReadStreamRef'/>
<arg type='l' name='streamLength' declared_type='CFIndex'/>
<arg type='L' name='mutabilityOption' declared_type='CFOptionFlags'/>
<arg type='^i' name='format' declared_type='CFPropertyListFormat*'/>
<arg type='^^{__CFString}' name='errorString' declared_type='CFStringRef*'/>
<retval already_retained='true' type='@' declared_type='CFPropertyListRef'/>
</function>
<function name='CFPropertyListCreateFromXMLData'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFData=}' name='xmlData' declared_type='CFDataRef'/>
<arg type='L' name='mutabilityOption' declared_type='CFOptionFlags'/>
<arg type='^^{__CFString}' name='errorString' declared_type='CFStringRef*'/>
<retval already_retained='true' type='@' declared_type='CFPropertyListRef'/>
</function>
<function name='CFPropertyListCreateWithData'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFData=}' name='data' declared_type='CFDataRef'/>
<arg type='L' name='options' declared_type='CFOptionFlags'/>
<arg type='^i' name='format' declared_type='CFPropertyListFormat*'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval already_retained='true' type='@' declared_type='CFPropertyListRef'/>
</function>
<function name='CFPropertyListCreateWithStream'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFReadStream=}' name='stream' declared_type='CFReadStreamRef'/>
<arg type='l' name='streamLength' declared_type='CFIndex'/>
<arg type='L' name='options' declared_type='CFOptionFlags'/>
<arg type='^i' name='format' declared_type='CFPropertyListFormat*'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval already_retained='true' type='@' declared_type='CFPropertyListRef'/>
</function>
<function name='CFPropertyListCreateXMLData'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='@' name='propertyList' declared_type='CFPropertyListRef'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</function>
<function name='CFPropertyListIsValid'>
<arg type='@' name='plist' declared_type='CFPropertyListRef'/>
<arg type='l' name='format' declared_type='CFPropertyListFormat'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPropertyListWrite'>
<arg type='@' name='propertyList' declared_type='CFPropertyListRef'/>
<arg type='^{__CFWriteStream=}' name='stream' declared_type='CFWriteStreamRef'/>
<arg type='l' name='format' declared_type='CFPropertyListFormat'/>
<arg type='L' name='options' declared_type='CFOptionFlags'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFPropertyListWriteToStream'>
<arg type='@' name='propertyList' declared_type='CFPropertyListRef'/>
<arg type='^{__CFWriteStream=}' name='stream' declared_type='CFWriteStreamRef'/>
<arg type='l' name='format' declared_type='CFPropertyListFormat'/>
<arg type='^^{__CFString}' name='errorString' declared_type='CFStringRef*'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFRangeMake' inline='true'>
<arg type='l' name='loc' declared_type='CFIndex'/>
<arg type='l' name='len' declared_type='CFIndex'/>
<retval type='{_CFRange=ii}' declared_type='CFRange'/>
</function>
<function name='CFReadStreamClose'>
<arg type='^{__CFReadStream=}' name='stream' declared_type='CFReadStreamRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFReadStreamCopyError'>
<arg type='^{__CFReadStream=}' name='stream' declared_type='CFReadStreamRef'/>
<retval type='^{__CFError=}' declared_type='CFErrorRef'/>
</function>
<function name='CFReadStreamCopyProperty'>
<arg type='^{__CFReadStream=}' name='stream' declared_type='CFReadStreamRef'/>
<arg type='^{__CFString=}' name='propertyName' declared_type='CFStringRef'/>
<retval type='^v' declared_type='CFTypeRef'/>
</function>
<function name='CFReadStreamCreateWithBytesNoCopy'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='*' name='bytes' declared_type='UInt8*' const='true'/>
<arg type='l' name='length' declared_type='CFIndex'/>
<arg type='^{__CFAllocator=}' name='bytesDeallocator' declared_type='CFAllocatorRef'/>
<retval type='^{__CFReadStream=}' declared_type='CFReadStreamRef'/>
</function>
<function name='CFReadStreamCreateWithFile'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='fileURL' declared_type='CFURLRef'/>
<retval type='^{__CFReadStream=}' declared_type='CFReadStreamRef'/>
</function>
<function name='CFReadStreamGetBuffer'>
<arg type='^{__CFReadStream=}' name='stream' declared_type='CFReadStreamRef'/>
<arg type='l' name='maxBytesToRead' declared_type='CFIndex'/>
<arg type='^i' name='numBytesRead' declared_type='CFIndex*'/>
<retval type='*' declared_type='UInt8*' const='true'/>
</function>
<function name='CFReadStreamGetError'>
<arg type='^{__CFReadStream=}' name='stream' declared_type='CFReadStreamRef'/>
<retval type='{_CFStreamError=ii}' declared_type='CFStreamError'/>
</function>
<function name='CFReadStreamGetStatus'>
<arg type='^{__CFReadStream=}' name='stream' declared_type='CFReadStreamRef'/>
<retval type='l' declared_type='CFStreamStatus'/>
</function>
<function name='CFReadStreamGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFReadStreamHasBytesAvailable'>
<arg type='^{__CFReadStream=}' name='stream' declared_type='CFReadStreamRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFReadStreamOpen'>
<arg type='^{__CFReadStream=}' name='stream' declared_type='CFReadStreamRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFReadStreamRead'>
<arg type='^{__CFReadStream=}' name='stream' declared_type='CFReadStreamRef'/>
<arg type='*' name='buffer' declared_type='UInt8*'/>
<arg type='l' name='bufferLength' declared_type='CFIndex'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFReadStreamScheduleWithRunLoop'>
<arg type='^{__CFReadStream=}' name='stream' declared_type='CFReadStreamRef'/>
<arg type='^{__CFRunLoop=}' name='runLoop' declared_type='CFRunLoopRef'/>
<arg type='^{__CFString=}' name='runLoopMode' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFReadStreamSetClient'>
<arg type='^{__CFReadStream=}' name='stream' declared_type='CFReadStreamRef'/>
<arg type='L' name='streamEvents' declared_type='CFOptionFlags'/>
<arg type='^?' name='clientCB' declared_type='CFReadStreamClientCallBack' function_pointer='true'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef'/>
<arg type='L' declared_type='CFStreamEventType'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFStreamClientContext=i^v^?^?^?}' name='clientContext' declared_type='CFStreamClientContext*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFReadStreamSetProperty'>
<arg type='^{__CFReadStream=}' name='stream' declared_type='CFReadStreamRef'/>
<arg type='^{__CFString=}' name='propertyName' declared_type='CFStringRef'/>
<arg type='^v' name='propertyValue' declared_type='CFTypeRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFReadStreamUnscheduleFromRunLoop'>
<arg type='^{__CFReadStream=}' name='stream' declared_type='CFReadStreamRef'/>
<arg type='^{__CFRunLoop=}' name='runLoop' declared_type='CFRunLoopRef'/>
<arg type='^{__CFString=}' name='runLoopMode' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRelease'>
<arg type='^v' name='cf' declared_type='CFTypeRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRetain'>
<arg type='^v' name='cf' declared_type='CFTypeRef'/>
<retval type='^v' declared_type='CFTypeRef'/>
</function>
<function name='CFRunLoopAddCommonMode'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<arg type='^{__CFString=}' name='mode' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopAddObserver'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<arg type='^{__CFRunLoopObserver=}' name='observer' declared_type='CFRunLoopObserverRef'/>
<arg type='^{__CFString=}' name='mode' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopAddSource'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<arg type='^{__CFRunLoopSource=}' name='source' declared_type='CFRunLoopSourceRef'/>
<arg type='^{__CFString=}' name='mode' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopAddTimer'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<arg type='^{__CFRunLoopTimer=}' name='timer' declared_type='CFRunLoopTimerRef'/>
<arg type='^{__CFString=}' name='mode' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopContainsObserver'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<arg type='^{__CFRunLoopObserver=}' name='observer' declared_type='CFRunLoopObserverRef'/>
<arg type='^{__CFString=}' name='mode' declared_type='CFStringRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopContainsSource'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<arg type='^{__CFRunLoopSource=}' name='source' declared_type='CFRunLoopSourceRef'/>
<arg type='^{__CFString=}' name='mode' declared_type='CFStringRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopContainsTimer'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<arg type='^{__CFRunLoopTimer=}' name='timer' declared_type='CFRunLoopTimerRef'/>
<arg type='^{__CFString=}' name='mode' declared_type='CFStringRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopCopyAllModes'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFRunLoopCopyCurrentMode'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFRunLoopGetCurrent'>
<retval type='^{__CFRunLoop=}' declared_type='CFRunLoopRef'/>
</function>
<function name='CFRunLoopGetMain'>
<retval type='^{__CFRunLoop=}' declared_type='CFRunLoopRef'/>
</function>
<function name='CFRunLoopGetNextTimerFireDate'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<arg type='^{__CFString=}' name='mode' declared_type='CFStringRef'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFRunLoopGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFRunLoopIsWaiting'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopObserverCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='L' name='activities' declared_type='CFOptionFlags'/>
<arg type='B' name='repeats' declared_type='Boolean'/>
<arg type='l' name='order' declared_type='CFIndex'/>
<arg type='^?' name='callout' declared_type='CFRunLoopObserverCallBack' function_pointer='true'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef'/>
<arg type='L' declared_type='CFRunLoopActivity'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFRunLoopObserverContext=i^v^?^?^?}' name='context' declared_type='CFRunLoopObserverContext*'/>
<retval type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef'/>
</function>
<function name='CFRunLoopObserverCreateWithHandler'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='L' name='activities' declared_type='CFOptionFlags'/>
<arg type='B' name='repeats' declared_type='Boolean'/>
<arg type='l' name='order' declared_type='CFIndex'/>
<arg type='@?' name='block' declared_type='void (^)(CFRunLoopObserverRef, CFRunLoopActivity)' function_pointer='true'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef'/>
<arg type='L' declared_type='CFRunLoopActivity'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef'/>
</function>
<function name='CFRunLoopObserverDoesRepeat'>
<arg type='^{__CFRunLoopObserver=}' name='observer' declared_type='CFRunLoopObserverRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopObserverGetActivities'>
<arg type='^{__CFRunLoopObserver=}' name='observer' declared_type='CFRunLoopObserverRef'/>
<retval type='L' declared_type='CFOptionFlags'/>
</function>
<function name='CFRunLoopObserverGetContext'>
<arg type='^{__CFRunLoopObserver=}' name='observer' declared_type='CFRunLoopObserverRef'/>
<arg type='^{_CFRunLoopObserverContext=i^v^?^?^?}' name='context' declared_type='CFRunLoopObserverContext*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopObserverGetOrder'>
<arg type='^{__CFRunLoopObserver=}' name='observer' declared_type='CFRunLoopObserverRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFRunLoopObserverGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFRunLoopObserverInvalidate'>
<arg type='^{__CFRunLoopObserver=}' name='observer' declared_type='CFRunLoopObserverRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopObserverIsValid'>
<arg type='^{__CFRunLoopObserver=}' name='observer' declared_type='CFRunLoopObserverRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopPerformBlock'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<arg type='^v' name='mode' declared_type='CFTypeRef'/>
<arg type='@?' name='block' declared_type='void (^)(void)' function_pointer='true'>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopRemoveObserver'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<arg type='^{__CFRunLoopObserver=}' name='observer' declared_type='CFRunLoopObserverRef'/>
<arg type='^{__CFString=}' name='mode' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopRemoveSource'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<arg type='^{__CFRunLoopSource=}' name='source' declared_type='CFRunLoopSourceRef'/>
<arg type='^{__CFString=}' name='mode' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopRemoveTimer'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<arg type='^{__CFRunLoopTimer=}' name='timer' declared_type='CFRunLoopTimerRef'/>
<arg type='^{__CFString=}' name='mode' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopRun'>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopRunInMode'>
<arg type='^{__CFString=}' name='mode' declared_type='CFStringRef'/>
<arg type='d' name='seconds' declared_type='CFTimeInterval'/>
<arg type='B' name='returnAfterSourceHandled' declared_type='Boolean'/>
<retval type='l' declared_type='SInt32'/>
</function>
<function name='CFRunLoopSourceCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='order' declared_type='CFIndex'/>
<arg type='^{_CFRunLoopSourceContext=i^v^?^?^?^?^?^?^?^?}' name='context' declared_type='CFRunLoopSourceContext*'/>
<retval type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef'/>
</function>
<function name='CFRunLoopSourceGetContext'>
<arg type='^{__CFRunLoopSource=}' name='source' declared_type='CFRunLoopSourceRef'/>
<arg type='^{_CFRunLoopSourceContext=i^v^?^?^?^?^?^?^?^?}' name='context' declared_type='CFRunLoopSourceContext*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopSourceGetOrder'>
<arg type='^{__CFRunLoopSource=}' name='source' declared_type='CFRunLoopSourceRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFRunLoopSourceGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFRunLoopSourceInvalidate'>
<arg type='^{__CFRunLoopSource=}' name='source' declared_type='CFRunLoopSourceRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopSourceIsValid'>
<arg type='^{__CFRunLoopSource=}' name='source' declared_type='CFRunLoopSourceRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopSourceSignal'>
<arg type='^{__CFRunLoopSource=}' name='source' declared_type='CFRunLoopSourceRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopStop'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopTimerCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='d' name='fireDate' declared_type='CFAbsoluteTime'/>
<arg type='d' name='interval' declared_type='CFTimeInterval'/>
<arg type='L' name='flags' declared_type='CFOptionFlags'/>
<arg type='l' name='order' declared_type='CFIndex'/>
<arg type='^?' name='callout' declared_type='CFRunLoopTimerCallBack' function_pointer='true'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFRunLoopTimerContext=i^v^?^?^?}' name='context' declared_type='CFRunLoopTimerContext*'/>
<retval type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef'/>
</function>
<function name='CFRunLoopTimerCreateWithHandler'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='d' name='fireDate' declared_type='CFAbsoluteTime'/>
<arg type='d' name='interval' declared_type='CFTimeInterval'/>
<arg type='L' name='flags' declared_type='CFOptionFlags'/>
<arg type='l' name='order' declared_type='CFIndex'/>
<arg type='@?' name='block' declared_type='void (^)(CFRunLoopTimerRef)' function_pointer='true'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef'/>
</function>
<function name='CFRunLoopTimerDoesRepeat'>
<arg type='^{__CFRunLoopTimer=}' name='timer' declared_type='CFRunLoopTimerRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopTimerGetContext'>
<arg type='^{__CFRunLoopTimer=}' name='timer' declared_type='CFRunLoopTimerRef'/>
<arg type='^{_CFRunLoopTimerContext=i^v^?^?^?}' name='context' declared_type='CFRunLoopTimerContext*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopTimerGetInterval'>
<arg type='^{__CFRunLoopTimer=}' name='timer' declared_type='CFRunLoopTimerRef'/>
<retval type='d' declared_type='CFTimeInterval'/>
</function>
<function name='CFRunLoopTimerGetNextFireDate'>
<arg type='^{__CFRunLoopTimer=}' name='timer' declared_type='CFRunLoopTimerRef'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFRunLoopTimerGetOrder'>
<arg type='^{__CFRunLoopTimer=}' name='timer' declared_type='CFRunLoopTimerRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFRunLoopTimerGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFRunLoopTimerInvalidate'>
<arg type='^{__CFRunLoopTimer=}' name='timer' declared_type='CFRunLoopTimerRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopTimerIsValid'>
<arg type='^{__CFRunLoopTimer=}' name='timer' declared_type='CFRunLoopTimerRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopTimerSetNextFireDate'>
<arg type='^{__CFRunLoopTimer=}' name='timer' declared_type='CFRunLoopTimerRef'/>
<arg type='d' name='fireDate' declared_type='CFAbsoluteTime'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopWakeUp'>
<arg type='^{__CFRunLoop=}' name='rl' declared_type='CFRunLoopRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetAddValue'>
<arg type='^{__CFSet=}' name='theSet' declared_type='CFMutableSetRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetApplyFunction'>
<arg type='^{__CFSet=}' name='theSet' declared_type='CFSetRef'/>
<arg type='^?' name='applier' declared_type='CFSetApplierFunction' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' name='context' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetContainsValue'>
<arg type='^{__CFSet=}' name='theSet' declared_type='CFSetRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFSetCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^^v' name='values' declared_type='void**' const='true'/>
<arg type='l' name='numValues' declared_type='CFIndex'/>
<arg type='^{_CFSetCallBacks=i^?^?^?^?^?}' name='callBacks' declared_type='CFSetCallBacks*' const='true'/>
<retval type='^{__CFSet=}' declared_type='CFSetRef'/>
</function>
<function name='CFSetCreateCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFSet=}' name='theSet' declared_type='CFSetRef'/>
<retval type='^{__CFSet=}' declared_type='CFSetRef'/>
</function>
<function name='CFSetCreateMutable'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<arg type='^{_CFSetCallBacks=i^?^?^?^?^?}' name='callBacks' declared_type='CFSetCallBacks*' const='true'/>
<retval type='^{__CFSet=}' declared_type='CFMutableSetRef'/>
</function>
<function name='CFSetCreateMutableCopy'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<arg type='^{__CFSet=}' name='theSet' declared_type='CFSetRef'/>
<retval type='^{__CFSet=}' declared_type='CFMutableSetRef'/>
</function>
<function name='CFSetGetCount'>
<arg type='^{__CFSet=}' name='theSet' declared_type='CFSetRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFSetGetCountOfValue'>
<arg type='^{__CFSet=}' name='theSet' declared_type='CFSetRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFSetGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFSetGetValue'>
<arg type='^{__CFSet=}' name='theSet' declared_type='CFSetRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</function>
<function name='CFSetGetValueIfPresent'>
<arg type='^{__CFSet=}' name='theSet' declared_type='CFSetRef'/>
<arg type='^v' name='candidate' declared_type='void*' const='true'/>
<arg type='^^v' name='value' declared_type='void**' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFSetGetValues'>
<arg type='^{__CFSet=}' name='theSet' declared_type='CFSetRef'/>
<arg type='^^v' name='values' declared_type='void**' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetRemoveAllValues'>
<arg type='^{__CFSet=}' name='theSet' declared_type='CFMutableSetRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetRemoveValue'>
<arg type='^{__CFSet=}' name='theSet' declared_type='CFMutableSetRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetReplaceValue'>
<arg type='^{__CFSet=}' name='theSet' declared_type='CFMutableSetRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetSetValue'>
<arg type='^{__CFSet=}' name='theSet' declared_type='CFMutableSetRef'/>
<arg type='^v' name='value' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFShow'>
<arg type='^v' name='obj' declared_type='CFTypeRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFShowStr'>
<arg type='^{__CFString=}' name='str' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketConnectToAddress'>
<arg type='^{__CFSocket=}' name='s' declared_type='CFSocketRef'/>
<arg type='^{__CFData=}' name='address' declared_type='CFDataRef'/>
<arg type='d' name='timeout' declared_type='CFTimeInterval'/>
<retval type='l' declared_type='CFSocketError'/>
</function>
<function name='CFSocketCopyAddress'>
<arg type='^{__CFSocket=}' name='s' declared_type='CFSocketRef'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</function>
<function name='CFSocketCopyPeerAddress'>
<arg type='^{__CFSocket=}' name='s' declared_type='CFSocketRef'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</function>
<function name='CFSocketCopyRegisteredSocketSignature'>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' name='nameServerSignature' declared_type='CFSocketSignature*' const='true'/>
<arg type='d' name='timeout' declared_type='CFTimeInterval'/>
<arg type='^{__CFString=}' name='name' declared_type='CFStringRef'/>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' name='signature' declared_type='CFSocketSignature*'/>
<arg type='^^{__CFData}' name='nameServerAddress' declared_type='CFDataRef*'/>
<retval type='l' declared_type='CFSocketError'/>
</function>
<function name='CFSocketCopyRegisteredValue'>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' name='nameServerSignature' declared_type='CFSocketSignature*' const='true'/>
<arg type='d' name='timeout' declared_type='CFTimeInterval'/>
<arg type='^{__CFString=}' name='name' declared_type='CFStringRef'/>
<arg type='^^v' name='value' declared_type='CFPropertyListRef*'/>
<arg type='^^{__CFData}' name='nameServerAddress' declared_type='CFDataRef*'/>
<retval type='l' declared_type='CFSocketError'/>
</function>
<function name='CFSocketCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='l' name='protocolFamily' declared_type='SInt32'/>
<arg type='l' name='socketType' declared_type='SInt32'/>
<arg type='l' name='protocol' declared_type='SInt32'/>
<arg type='L' name='callBackTypes' declared_type='CFOptionFlags'/>
<arg type='^?' name='callout' declared_type='CFSocketCallBack' function_pointer='true'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef'/>
<arg type='L' declared_type='CFSocketCallBackType'/>
<arg type='^{__CFData=}' declared_type='CFDataRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFSocketContext=i^v^?^?^?}' name='context' declared_type='CFSocketContext*' const='true'/>
<retval type='^{__CFSocket=}' declared_type='CFSocketRef'/>
</function>
<function name='CFSocketCreateConnectedToSocketSignature'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' name='signature' declared_type='CFSocketSignature*' const='true'/>
<arg type='L' name='callBackTypes' declared_type='CFOptionFlags'/>
<arg type='^?' name='callout' declared_type='CFSocketCallBack' function_pointer='true'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef'/>
<arg type='L' declared_type='CFSocketCallBackType'/>
<arg type='^{__CFData=}' declared_type='CFDataRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFSocketContext=i^v^?^?^?}' name='context' declared_type='CFSocketContext*' const='true'/>
<arg type='d' name='timeout' declared_type='CFTimeInterval'/>
<retval type='^{__CFSocket=}' declared_type='CFSocketRef'/>
</function>
<function name='CFSocketCreateRunLoopSource'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFSocket=}' name='s' declared_type='CFSocketRef'/>
<arg type='l' name='order' declared_type='CFIndex'/>
<retval type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef'/>
</function>
<function name='CFSocketCreateWithNative'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='i' name='sock' declared_type='CFSocketNativeHandle'/>
<arg type='L' name='callBackTypes' declared_type='CFOptionFlags'/>
<arg type='^?' name='callout' declared_type='CFSocketCallBack' function_pointer='true'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef'/>
<arg type='L' declared_type='CFSocketCallBackType'/>
<arg type='^{__CFData=}' declared_type='CFDataRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFSocketContext=i^v^?^?^?}' name='context' declared_type='CFSocketContext*' const='true'/>
<retval type='^{__CFSocket=}' declared_type='CFSocketRef'/>
</function>
<function name='CFSocketCreateWithSocketSignature'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' name='signature' declared_type='CFSocketSignature*' const='true'/>
<arg type='L' name='callBackTypes' declared_type='CFOptionFlags'/>
<arg type='^?' name='callout' declared_type='CFSocketCallBack' function_pointer='true'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef'/>
<arg type='L' declared_type='CFSocketCallBackType'/>
<arg type='^{__CFData=}' declared_type='CFDataRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFSocketContext=i^v^?^?^?}' name='context' declared_type='CFSocketContext*' const='true'/>
<retval type='^{__CFSocket=}' declared_type='CFSocketRef'/>
</function>
<function name='CFSocketDisableCallBacks'>
<arg type='^{__CFSocket=}' name='s' declared_type='CFSocketRef'/>
<arg type='L' name='callBackTypes' declared_type='CFOptionFlags'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketEnableCallBacks'>
<arg type='^{__CFSocket=}' name='s' declared_type='CFSocketRef'/>
<arg type='L' name='callBackTypes' declared_type='CFOptionFlags'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketGetContext'>
<arg type='^{__CFSocket=}' name='s' declared_type='CFSocketRef'/>
<arg type='^{_CFSocketContext=i^v^?^?^?}' name='context' declared_type='CFSocketContext*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketGetDefaultNameRegistryPortNumber'>
<retval type='S' declared_type='UInt16'/>
</function>
<function name='CFSocketGetNative'>
<arg type='^{__CFSocket=}' name='s' declared_type='CFSocketRef'/>
<retval type='i' declared_type='CFSocketNativeHandle'/>
</function>
<function name='CFSocketGetSocketFlags'>
<arg type='^{__CFSocket=}' name='s' declared_type='CFSocketRef'/>
<retval type='L' declared_type='CFOptionFlags'/>
</function>
<function name='CFSocketGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFSocketInvalidate'>
<arg type='^{__CFSocket=}' name='s' declared_type='CFSocketRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketIsValid'>
<arg type='^{__CFSocket=}' name='s' declared_type='CFSocketRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFSocketRegisterSocketSignature'>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' name='nameServerSignature' declared_type='CFSocketSignature*' const='true'/>
<arg type='d' name='timeout' declared_type='CFTimeInterval'/>
<arg type='^{__CFString=}' name='name' declared_type='CFStringRef'/>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' name='signature' declared_type='CFSocketSignature*' const='true'/>
<retval type='l' declared_type='CFSocketError'/>
</function>
<function name='CFSocketRegisterValue'>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' name='nameServerSignature' declared_type='CFSocketSignature*' const='true'/>
<arg type='d' name='timeout' declared_type='CFTimeInterval'/>
<arg type='^{__CFString=}' name='name' declared_type='CFStringRef'/>
<arg type='@' name='value' declared_type='CFPropertyListRef'/>
<retval type='l' declared_type='CFSocketError'/>
</function>
<function name='CFSocketSendData'>
<arg type='^{__CFSocket=}' name='s' declared_type='CFSocketRef'/>
<arg type='^{__CFData=}' name='address' declared_type='CFDataRef'/>
<arg type='^{__CFData=}' name='data' declared_type='CFDataRef'/>
<arg type='d' name='timeout' declared_type='CFTimeInterval'/>
<retval type='l' declared_type='CFSocketError'/>
</function>
<function name='CFSocketSetAddress'>
<arg type='^{__CFSocket=}' name='s' declared_type='CFSocketRef'/>
<arg type='^{__CFData=}' name='address' declared_type='CFDataRef'/>
<retval type='l' declared_type='CFSocketError'/>
</function>
<function name='CFSocketSetDefaultNameRegistryPortNumber'>
<arg type='S' name='port' declared_type='UInt16'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketSetSocketFlags'>
<arg type='^{__CFSocket=}' name='s' declared_type='CFSocketRef'/>
<arg type='L' name='flags' declared_type='CFOptionFlags'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketUnregister'>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' name='nameServerSignature' declared_type='CFSocketSignature*' const='true'/>
<arg type='d' name='timeout' declared_type='CFTimeInterval'/>
<arg type='^{__CFString=}' name='name' declared_type='CFStringRef'/>
<retval type='l' declared_type='CFSocketError'/>
</function>
<function name='CFStreamCreateBoundPair'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^^{__CFReadStream}' name='readStream' declared_type='CFReadStreamRef*'/>
<arg type='^^{__CFWriteStream}' name='writeStream' declared_type='CFWriteStreamRef*'/>
<arg type='l' name='transferBufferSize' declared_type='CFIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStreamCreatePairWithPeerSocketSignature'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' name='signature' declared_type='CFSocketSignature*' const='true'/>
<arg type='^^{__CFReadStream}' name='readStream' declared_type='CFReadStreamRef*'/>
<arg type='^^{__CFWriteStream}' name='writeStream' declared_type='CFWriteStreamRef*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStreamCreatePairWithSocket'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='i' name='sock' declared_type='CFSocketNativeHandle'/>
<arg type='^^{__CFReadStream}' name='readStream' declared_type='CFReadStreamRef*'/>
<arg type='^^{__CFWriteStream}' name='writeStream' declared_type='CFWriteStreamRef*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStreamCreatePairWithSocketToHost'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='host' declared_type='CFStringRef'/>
<arg type='L' name='port' declared_type='UInt32'/>
<arg type='^^{__CFReadStream}' name='readStream' declared_type='CFReadStreamRef*'/>
<arg type='^^{__CFWriteStream}' name='writeStream' declared_type='CFWriteStreamRef*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppend'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='^{__CFString=}' name='appendedString' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppendCString'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='*' name='cStr' declared_type='char*' const='true'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppendCharacters'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='^S' name='chars' declared_type='UniChar*' const='true'/>
<arg type='l' name='numChars' declared_type='CFIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppendFormat' variadic='true'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='^{__CFDictionary=}' name='formatOptions' declared_type='CFDictionaryRef'/>
<arg printf_format='true' type='^{__CFString=}' name='format' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppendFormatAndArguments'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='^{__CFDictionary=}' name='formatOptions' declared_type='CFDictionaryRef'/>
<arg printf_format='true' type='^{__CFString=}' name='format' declared_type='CFStringRef'/>
<arg type='*' name='arguments' declared_type='va_list'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppendPascalString'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='*' name='pStr' declared_type='ConstStr255Param'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringCapitalize'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringCompare'>
<arg type='^{__CFString=}' name='theString1' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='theString2' declared_type='CFStringRef'/>
<arg type='L' name='compareOptions' declared_type='CFStringCompareFlags'/>
<retval type='l' declared_type='CFComparisonResult'/>
</function>
<function name='CFStringCompareWithOptions'>
<arg type='^{__CFString=}' name='theString1' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='theString2' declared_type='CFStringRef'/>
<arg type='{_CFRange=ii}' name='rangeToCompare' declared_type='CFRange'/>
<arg type='L' name='compareOptions' declared_type='CFStringCompareFlags'/>
<retval type='l' declared_type='CFComparisonResult'/>
</function>
<function name='CFStringCompareWithOptionsAndLocale'>
<arg type='^{__CFString=}' name='theString1' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='theString2' declared_type='CFStringRef'/>
<arg type='{_CFRange=ii}' name='rangeToCompare' declared_type='CFRange'/>
<arg type='L' name='compareOptions' declared_type='CFStringCompareFlags'/>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<retval type='l' declared_type='CFComparisonResult'/>
</function>
<function name='CFStringConvertEncodingToIANACharSetName'>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringConvertEncodingToNSStringEncoding'>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='L' declared_type='unsigned long'/>
</function>
<function name='CFStringConvertEncodingToWindowsCodepage'>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='L' declared_type='UInt32'/>
</function>
<function name='CFStringConvertIANACharSetNameToEncoding'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<retval type='L' declared_type='CFStringEncoding'/>
</function>
<function name='CFStringConvertNSStringEncodingToEncoding'>
<arg type='L' name='encoding' declared_type='unsigned long'/>
<retval type='L' declared_type='CFStringEncoding'/>
</function>
<function name='CFStringConvertWindowsCodepageToEncoding'>
<arg type='L' name='codepage' declared_type='UInt32'/>
<retval type='L' declared_type='CFStringEncoding'/>
</function>
<function name='CFStringCreateArrayBySeparatingStrings'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='separatorString' declared_type='CFStringRef'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFStringCreateArrayWithFindResults'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='stringToFind' declared_type='CFStringRef'/>
<arg type='{_CFRange=ii}' name='rangeToSearch' declared_type='CFRange'/>
<arg type='L' name='compareOptions' declared_type='CFStringCompareFlags'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFStringCreateByCombiningStrings'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFArray=}' name='theArray' declared_type='CFArrayRef'/>
<arg type='^{__CFString=}' name='separatorString' declared_type='CFStringRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateCopy'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateExternalRepresentation'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<arg type='C' name='lossByte' declared_type='UInt8'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</function>
<function name='CFStringCreateFromExternalRepresentation'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFData=}' name='data' declared_type='CFDataRef'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateMutable'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='l' name='maxLength' declared_type='CFIndex'/>
<retval type='^{__CFString=}' declared_type='CFMutableStringRef'/>
</function>
<function name='CFStringCreateMutableCopy'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='l' name='maxLength' declared_type='CFIndex'/>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<retval type='^{__CFString=}' declared_type='CFMutableStringRef'/>
</function>
<function name='CFStringCreateMutableWithExternalCharactersNoCopy'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^S' name='chars' declared_type='UniChar*'/>
<arg type='l' name='numChars' declared_type='CFIndex'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<arg type='^{__CFAllocator=}' name='externalCharactersAllocator' declared_type='CFAllocatorRef'/>
<retval type='^{__CFString=}' declared_type='CFMutableStringRef'/>
</function>
<function name='CFStringCreateWithBytes'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='*' name='bytes' declared_type='UInt8*' const='true'/>
<arg type='l' name='numBytes' declared_type='CFIndex'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<arg type='B' name='isExternalRepresentation' declared_type='Boolean'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithBytesNoCopy'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='*' name='bytes' declared_type='UInt8*' const='true'/>
<arg type='l' name='numBytes' declared_type='CFIndex'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<arg type='B' name='isExternalRepresentation' declared_type='Boolean'/>
<arg type='^{__CFAllocator=}' name='contentsDeallocator' declared_type='CFAllocatorRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithCString'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='*' name='cStr' declared_type='char*' const='true'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithCStringNoCopy'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='*' name='cStr' declared_type='char*' const='true'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<arg type='^{__CFAllocator=}' name='contentsDeallocator' declared_type='CFAllocatorRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithCharacters'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^S' name='chars' declared_type='UniChar*' const='true'/>
<arg type='l' name='numChars' declared_type='CFIndex'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithCharactersNoCopy'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^S' name='chars' declared_type='UniChar*' const='true'/>
<arg type='l' name='numChars' declared_type='CFIndex'/>
<arg type='^{__CFAllocator=}' name='contentsDeallocator' declared_type='CFAllocatorRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithFileSystemRepresentation'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='*' name='buffer' declared_type='char*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithFormat' variadic='true'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFDictionary=}' name='formatOptions' declared_type='CFDictionaryRef'/>
<arg printf_format='true' type='^{__CFString=}' name='format' declared_type='CFStringRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithFormatAndArguments'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFDictionary=}' name='formatOptions' declared_type='CFDictionaryRef'/>
<arg printf_format='true' type='^{__CFString=}' name='format' declared_type='CFStringRef'/>
<arg type='*' name='arguments' declared_type='va_list'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithPascalString'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='*' name='pStr' declared_type='ConstStr255Param'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithPascalStringNoCopy'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='*' name='pStr' declared_type='ConstStr255Param'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<arg type='^{__CFAllocator=}' name='contentsDeallocator' declared_type='CFAllocatorRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithSubstring'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='str' declared_type='CFStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringDelete'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringFind'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='stringToFind' declared_type='CFStringRef'/>
<arg type='L' name='compareOptions' declared_type='CFStringCompareFlags'/>
<retval type='{_CFRange=ii}' declared_type='CFRange'/>
</function>
<function name='CFStringFindAndReplace'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='^{__CFString=}' name='stringToFind' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='replacementString' declared_type='CFStringRef'/>
<arg type='{_CFRange=ii}' name='rangeToSearch' declared_type='CFRange'/>
<arg type='L' name='compareOptions' declared_type='CFStringCompareFlags'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFStringFindCharacterFromSet'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='^{__CFCharacterSet=}' name='theSet' declared_type='CFCharacterSetRef'/>
<arg type='{_CFRange=ii}' name='rangeToSearch' declared_type='CFRange'/>
<arg type='L' name='searchOptions' declared_type='CFStringCompareFlags'/>
<arg type='^{_CFRange=ii}' name='result' declared_type='CFRange*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringFindWithOptions'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='stringToFind' declared_type='CFStringRef'/>
<arg type='{_CFRange=ii}' name='rangeToSearch' declared_type='CFRange'/>
<arg type='L' name='searchOptions' declared_type='CFStringCompareFlags'/>
<arg type='^{_CFRange=ii}' name='result' declared_type='CFRange*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringFindWithOptionsAndLocale'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='stringToFind' declared_type='CFStringRef'/>
<arg type='{_CFRange=ii}' name='rangeToSearch' declared_type='CFRange'/>
<arg type='L' name='searchOptions' declared_type='CFStringCompareFlags'/>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<arg type='^{_CFRange=ii}' name='result' declared_type='CFRange*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringFold'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='L' name='theFlags' declared_type='CFOptionFlags'/>
<arg type='^{__CFLocale=}' name='theLocale' declared_type='CFLocaleRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringGetBytes'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<arg type='C' name='lossByte' declared_type='UInt8'/>
<arg type='B' name='isExternalRepresentation' declared_type='Boolean'/>
<arg type='*' name='buffer' declared_type='UInt8*'/>
<arg type='l' name='maxBufLen' declared_type='CFIndex'/>
<arg type='^i' name='usedBufLen' declared_type='CFIndex*'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFStringGetCString'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='*' name='buffer' declared_type='char*'/>
<arg type='l' name='bufferSize' declared_type='CFIndex'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringGetCStringPtr'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='*' declared_type='char*' const='true'/>
</function>
<function name='CFStringGetCharacterAtIndex'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='l' name='idx' declared_type='CFIndex'/>
<retval type='S' declared_type='UniChar'/>
</function>
<function name='CFStringGetCharacterFromInlineBuffer' inline='true'>
<arg type='^{_CFStringInlineBuffer=[64S]^{__CFString}^S{_CFRange=ii}ii}' name='buf' declared_type='CFStringInlineBuffer*'/>
<arg type='l' name='idx' declared_type='CFIndex'/>
<retval type='S' declared_type='UniChar'/>
</function>
<function name='CFStringGetCharacters'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^S' name='buffer' declared_type='UniChar*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringGetCharactersPtr'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<retval type='^S' declared_type='UniChar*' const='true'/>
</function>
<function name='CFStringGetDoubleValue'>
<arg type='^{__CFString=}' name='str' declared_type='CFStringRef'/>
<retval type='d' declared_type='double'/>
</function>
<function name='CFStringGetFastestEncoding'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<retval type='L' declared_type='CFStringEncoding'/>
</function>
<function name='CFStringGetFileSystemRepresentation'>
<arg type='^{__CFString=}' name='string' declared_type='CFStringRef'/>
<arg type='*' name='buffer' declared_type='char*'/>
<arg type='l' name='maxBufLen' declared_type='CFIndex'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringGetHyphenationLocationBeforeIndex'>
<arg type='^{__CFString=}' name='string' declared_type='CFStringRef'/>
<arg type='l' name='location' declared_type='CFIndex'/>
<arg type='{_CFRange=ii}' name='limitRange' declared_type='CFRange'/>
<arg type='L' name='options' declared_type='CFOptionFlags'/>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<arg type='^I' name='character' declared_type='UTF32Char*'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFStringGetIntValue'>
<arg type='^{__CFString=}' name='str' declared_type='CFStringRef'/>
<retval type='l' declared_type='SInt32'/>
</function>
<function name='CFStringGetLength'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFStringGetLineBounds'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^i' name='lineBeginIndex' declared_type='CFIndex*'/>
<arg type='^i' name='lineEndIndex' declared_type='CFIndex*'/>
<arg type='^i' name='contentsEndIndex' declared_type='CFIndex*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringGetListOfAvailableEncodings'>
<retval type='^I' declared_type='CFStringEncoding*' const='true'/>
</function>
<function name='CFStringGetLongCharacterForSurrogatePair' inline='true'>
<arg type='S' name='surrogateHigh' declared_type='UniChar'/>
<arg type='S' name='surrogateLow' declared_type='UniChar'/>
<retval type='L' declared_type='UTF32Char'/>
</function>
<function name='CFStringGetMaximumSizeForEncoding'>
<arg type='l' name='length' declared_type='CFIndex'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFStringGetMaximumSizeOfFileSystemRepresentation'>
<arg type='^{__CFString=}' name='string' declared_type='CFStringRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFStringGetMostCompatibleMacStringEncoding'>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='L' declared_type='CFStringEncoding'/>
</function>
<function name='CFStringGetNameOfEncoding'>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringGetParagraphBounds'>
<arg type='^{__CFString=}' name='string' declared_type='CFStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^i' name='parBeginIndex' declared_type='CFIndex*'/>
<arg type='^i' name='parEndIndex' declared_type='CFIndex*'/>
<arg type='^i' name='contentsEndIndex' declared_type='CFIndex*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringGetPascalString'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='*' name='buffer' declared_type='StringPtr'/>
<arg type='l' name='bufferSize' declared_type='CFIndex'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringGetPascalStringPtr'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='*' declared_type='ConstStringPtr'/>
</function>
<function name='CFStringGetRangeOfComposedCharactersAtIndex'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='l' name='theIndex' declared_type='CFIndex'/>
<retval type='{_CFRange=ii}' declared_type='CFRange'/>
</function>
<function name='CFStringGetSmallestEncoding'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<retval type='L' declared_type='CFStringEncoding'/>
</function>
<function name='CFStringGetSurrogatePairForLongCharacter' inline='true'>
<arg type='L' name='character' declared_type='UTF32Char'/>
<arg type='^S' name='surrogates' declared_type='UniChar*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringGetSystemEncoding'>
<retval type='L' declared_type='CFStringEncoding'/>
</function>
<function name='CFStringGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFStringHasPrefix'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='prefix' declared_type='CFStringRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringHasSuffix'>
<arg type='^{__CFString=}' name='theString' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='suffix' declared_type='CFStringRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringInitInlineBuffer' inline='true'>
<arg type='^{__CFString=}' name='str' declared_type='CFStringRef'/>
<arg type='^{_CFStringInlineBuffer=[64S]^{__CFString}^S{_CFRange=ii}ii}' name='buf' declared_type='CFStringInlineBuffer*'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringInsert'>
<arg type='^{__CFString=}' name='str' declared_type='CFMutableStringRef'/>
<arg type='l' name='idx' declared_type='CFIndex'/>
<arg type='^{__CFString=}' name='insertedStr' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringIsEncodingAvailable'>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringIsHyphenationAvailableForLocale'>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringIsSurrogateHighCharacter' inline='true'>
<arg type='S' name='character' declared_type='UniChar'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringIsSurrogateLowCharacter' inline='true'>
<arg type='S' name='character' declared_type='UniChar'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringLowercase'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringNormalize'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='l' name='theForm' declared_type='CFStringNormalizationForm'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringPad'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='^{__CFString=}' name='padString' declared_type='CFStringRef'/>
<arg type='l' name='length' declared_type='CFIndex'/>
<arg type='l' name='indexIntoPad' declared_type='CFIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringReplace'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='^{__CFString=}' name='replacement' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringReplaceAll'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='^{__CFString=}' name='replacement' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringSetExternalCharactersNoCopy'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='^S' name='chars' declared_type='UniChar*'/>
<arg type='l' name='length' declared_type='CFIndex'/>
<arg type='l' name='capacity' declared_type='CFIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringTokenizerAdvanceToNextToken'>
<arg type='^{__CFStringTokenizer=}' name='tokenizer' declared_type='CFStringTokenizerRef'/>
<retval type='L' declared_type='CFStringTokenizerTokenType'/>
</function>
<function name='CFStringTokenizerCopyBestStringLanguage'>
<arg type='^{__CFString=}' name='string' declared_type='CFStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringTokenizerCopyCurrentTokenAttribute'>
<arg type='^{__CFStringTokenizer=}' name='tokenizer' declared_type='CFStringTokenizerRef'/>
<arg type='L' name='attribute' declared_type='CFOptionFlags'/>
<retval type='^v' declared_type='CFTypeRef'/>
</function>
<function name='CFStringTokenizerCreate'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='string' declared_type='CFStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<arg type='L' name='options' declared_type='CFOptionFlags'/>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<retval type='^{__CFStringTokenizer=}' declared_type='CFStringTokenizerRef'/>
</function>
<function name='CFStringTokenizerGetCurrentSubTokens'>
<arg type='^{__CFStringTokenizer=}' name='tokenizer' declared_type='CFStringTokenizerRef'/>
<arg type='^{_CFRange=ii}' name='ranges' declared_type='CFRange*'/>
<arg type='l' name='maxRangeLength' declared_type='CFIndex'/>
<arg type='^{__CFArray=}' name='derivedSubTokens' declared_type='CFMutableArrayRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFStringTokenizerGetCurrentTokenRange'>
<arg type='^{__CFStringTokenizer=}' name='tokenizer' declared_type='CFStringTokenizerRef'/>
<retval type='{_CFRange=ii}' declared_type='CFRange'/>
</function>
<function name='CFStringTokenizerGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFStringTokenizerGoToTokenAtIndex'>
<arg type='^{__CFStringTokenizer=}' name='tokenizer' declared_type='CFStringTokenizerRef'/>
<arg type='l' name='index' declared_type='CFIndex'/>
<retval type='L' declared_type='CFStringTokenizerTokenType'/>
</function>
<function name='CFStringTokenizerSetString'>
<arg type='^{__CFStringTokenizer=}' name='tokenizer' declared_type='CFStringTokenizerRef'/>
<arg type='^{__CFString=}' name='string' declared_type='CFStringRef'/>
<arg type='{_CFRange=ii}' name='range' declared_type='CFRange'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringTransform'>
<arg type='^{__CFString=}' name='string' declared_type='CFMutableStringRef'/>
<arg type='^{_CFRange=ii}' name='range' declared_type='CFRange*'/>
<arg type='^{__CFString=}' name='transform' declared_type='CFStringRef'/>
<arg type='B' name='reverse' declared_type='Boolean'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringTrim'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='^{__CFString=}' name='trimString' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringTrimWhitespace'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringUppercase'>
<arg type='^{__CFString=}' name='theString' declared_type='CFMutableStringRef'/>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSwapInt16' inline='true'>
<arg type='S' name='arg' declared_type='uint16_t'/>
<retval type='S' declared_type='uint16_t'/>
</function>
<function name='CFSwapInt16BigToHost' inline='true'>
<arg type='S' name='arg' declared_type='uint16_t'/>
<retval type='S' declared_type='uint16_t'/>
</function>
<function name='CFSwapInt16HostToBig' inline='true'>
<arg type='S' name='arg' declared_type='uint16_t'/>
<retval type='S' declared_type='uint16_t'/>
</function>
<function name='CFSwapInt16HostToLittle' inline='true'>
<arg type='S' name='arg' declared_type='uint16_t'/>
<retval type='S' declared_type='uint16_t'/>
</function>
<function name='CFSwapInt16LittleToHost' inline='true'>
<arg type='S' name='arg' declared_type='uint16_t'/>
<retval type='S' declared_type='uint16_t'/>
</function>
<function name='CFSwapInt32' inline='true'>
<arg type='I' name='arg' declared_type='uint32_t'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='CFSwapInt32BigToHost' inline='true'>
<arg type='I' name='arg' declared_type='uint32_t'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='CFSwapInt32HostToBig' inline='true'>
<arg type='I' name='arg' declared_type='uint32_t'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='CFSwapInt32HostToLittle' inline='true'>
<arg type='I' name='arg' declared_type='uint32_t'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='CFSwapInt32LittleToHost' inline='true'>
<arg type='I' name='arg' declared_type='uint32_t'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='CFSwapInt64' inline='true'>
<arg type='Q' name='arg' declared_type='uint64_t'/>
<retval type='Q' declared_type='uint64_t'/>
</function>
<function name='CFSwapInt64BigToHost' inline='true'>
<arg type='Q' name='arg' declared_type='uint64_t'/>
<retval type='Q' declared_type='uint64_t'/>
</function>
<function name='CFSwapInt64HostToBig' inline='true'>
<arg type='Q' name='arg' declared_type='uint64_t'/>
<retval type='Q' declared_type='uint64_t'/>
</function>
<function name='CFSwapInt64HostToLittle' inline='true'>
<arg type='Q' name='arg' declared_type='uint64_t'/>
<retval type='Q' declared_type='uint64_t'/>
</function>
<function name='CFSwapInt64LittleToHost' inline='true'>
<arg type='Q' name='arg' declared_type='uint64_t'/>
<retval type='Q' declared_type='uint64_t'/>
</function>
<function name='CFTimeZoneCopyAbbreviation'>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFTimeZoneCopyAbbreviationDictionary'>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFTimeZoneCopyDefault'>
<retval type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef'/>
</function>
<function name='CFTimeZoneCopyKnownNames'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFTimeZoneCopyLocalizedName'>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<arg type='l' name='style' declared_type='CFTimeZoneNameStyle'/>
<arg type='^{__CFLocale=}' name='locale' declared_type='CFLocaleRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFTimeZoneCopySystem'>
<retval type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef'/>
</function>
<function name='CFTimeZoneCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='name' declared_type='CFStringRef'/>
<arg type='^{__CFData=}' name='data' declared_type='CFDataRef'/>
<retval type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef'/>
</function>
<function name='CFTimeZoneCreateWithName'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='name' declared_type='CFStringRef'/>
<arg type='B' name='tryAbbrev' declared_type='Boolean'/>
<retval type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef'/>
</function>
<function name='CFTimeZoneCreateWithTimeIntervalFromGMT'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='d' name='ti' declared_type='CFTimeInterval'/>
<retval type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef'/>
</function>
<function name='CFTimeZoneGetData'>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</function>
<function name='CFTimeZoneGetDaylightSavingTimeOffset'>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<retval type='d' declared_type='CFTimeInterval'/>
</function>
<function name='CFTimeZoneGetName'>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFTimeZoneGetNextDaylightSavingTimeTransition'>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFTimeZoneGetSecondsFromGMT'>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<retval type='d' declared_type='CFTimeInterval'/>
</function>
<function name='CFTimeZoneGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFTimeZoneIsDaylightSavingTime'>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<arg type='d' name='at' declared_type='CFAbsoluteTime'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFTimeZoneResetSystem'>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTimeZoneSetAbbreviationDictionary'>
<arg type='^{__CFDictionary=}' name='dict' declared_type='CFDictionaryRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTimeZoneSetDefault'>
<arg type='^{__CFTimeZone=}' name='tz' declared_type='CFTimeZoneRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeAppendChild'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<arg type='^{__CFTree=}' name='newChild' declared_type='CFTreeRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeApplyFunctionToChildren'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<arg type='^?' name='applier' declared_type='CFTreeApplierFunction' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' name='context' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeCreate'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{_CFTreeContext=i^v^?^?^?}' name='context' declared_type='CFTreeContext*' const='true'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeFindRoot'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeGetChildAtIndex'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<arg type='l' name='idx' declared_type='CFIndex'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeGetChildCount'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFTreeGetChildren'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<arg type='^^{__CFTree}' name='children' declared_type='CFTreeRef*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeGetContext'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<arg type='^{_CFTreeContext=i^v^?^?^?}' name='context' declared_type='CFTreeContext*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeGetFirstChild'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeGetNextSibling'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeGetParent'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFTreeInsertSibling'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<arg type='^{__CFTree=}' name='newSibling' declared_type='CFTreeRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreePrependChild'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<arg type='^{__CFTree=}' name='newChild' declared_type='CFTreeRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeRemove'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeRemoveAllChildren'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeSetContext'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<arg type='^{_CFTreeContext=i^v^?^?^?}' name='context' declared_type='CFTreeContext*' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeSortChildren'>
<arg type='^{__CFTree=}' name='tree' declared_type='CFTreeRef'/>
<arg type='^?' name='comparator' declared_type='CFComparatorFunction' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='l' declared_type='CFComparisonResult'/>
</arg>
<arg type='^v' name='context' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLCanBeDecomposed'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLClearResourcePropertyCache'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLClearResourcePropertyCacheForKey'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLCopyAbsoluteURL'>
<arg type='^{__CFURL=}' name='relativeURL' declared_type='CFURLRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLCopyFileSystemPath'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<arg type='l' name='pathStyle' declared_type='CFURLPathStyle'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyFragment'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<arg type='^{__CFString=}' name='charactersToLeaveEscaped' declared_type='CFStringRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyHostName'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyLastPathComponent'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyNetLocation'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyParameterString'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<arg type='^{__CFString=}' name='charactersToLeaveEscaped' declared_type='CFStringRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyPassword'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyPath'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyPathExtension'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyQueryString'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<arg type='^{__CFString=}' name='charactersToLeaveEscaped' declared_type='CFStringRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyResourcePropertiesForKeys'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^{__CFArray=}' name='keys' declared_type='CFArrayRef'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFURLCopyResourcePropertyForKey'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<arg type='^v' name='propertyValueTypeRefPtr' declared_type='void*'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLCopyResourceSpecifier'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyScheme'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyStrictPath'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<arg type='^B' name='isAbsolute' declared_type='Boolean*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyUserName'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCreateAbsoluteURLWithBytes'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='*' name='relativeURLBytes' declared_type='UInt8*' const='true'/>
<arg type='l' name='length' declared_type='CFIndex'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<arg type='^{__CFURL=}' name='baseURL' declared_type='CFURLRef'/>
<arg type='B' name='useCompatibilityMode' declared_type='Boolean'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateBookmarkData'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='L' name='options' declared_type='CFURLBookmarkCreationOptions'/>
<arg type='^{__CFArray=}' name='resourcePropertiesToInclude' declared_type='CFArrayRef'/>
<arg type='^{__CFURL=}' name='relativeToURL' declared_type='CFURLRef'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</function>
<function name='CFURLCreateBookmarkDataFromFile'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='fileURL' declared_type='CFURLRef'/>
<arg type='^^{__CFError}' name='errorRef' declared_type='CFErrorRef*'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</function>
<function name='CFURLCreateByResolvingBookmarkData'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFData=}' name='bookmark' declared_type='CFDataRef'/>
<arg type='L' name='options' declared_type='CFURLBookmarkResolutionOptions'/>
<arg type='^{__CFURL=}' name='relativeToURL' declared_type='CFURLRef'/>
<arg type='^{__CFArray=}' name='resourcePropertiesToInclude' declared_type='CFArrayRef'/>
<arg type='^B' name='isStale' declared_type='Boolean*'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateCopyAppendingPathComponent'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^{__CFString=}' name='pathComponent' declared_type='CFStringRef'/>
<arg type='B' name='isDirectory' declared_type='Boolean'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateCopyAppendingPathExtension'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^{__CFString=}' name='extension' declared_type='CFStringRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateCopyDeletingLastPathComponent'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateCopyDeletingPathExtension'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateData'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<arg type='B' name='escapeWhitespace' declared_type='Boolean'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</function>
<function name='CFURLCreateDataAndPropertiesFromResource'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^^{__CFData}' name='resourceData' declared_type='CFDataRef*'/>
<arg type='^^{__CFDictionary}' name='properties' declared_type='CFDictionaryRef*'/>
<arg type='^{__CFArray=}' name='desiredProperties' declared_type='CFArrayRef'/>
<arg type='^i' name='errorCode' declared_type='SInt32*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLCreateFilePathURL'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateFileReferenceURL'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateFromFSRef'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{FSRef=}' name='fsRef' declared_type='struct FSRef*' const='true'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateFromFileSystemRepresentation'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='*' name='buffer' declared_type='UInt8*' const='true'/>
<arg type='l' name='bufLen' declared_type='CFIndex'/>
<arg type='B' name='isDirectory' declared_type='Boolean'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateFromFileSystemRepresentationRelativeToBase'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='*' name='buffer' declared_type='UInt8*' const='true'/>
<arg type='l' name='bufLen' declared_type='CFIndex'/>
<arg type='B' name='isDirectory' declared_type='Boolean'/>
<arg type='^{__CFURL=}' name='baseURL' declared_type='CFURLRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreatePropertyFromResource'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^{__CFString=}' name='property' declared_type='CFStringRef'/>
<arg type='^i' name='errorCode' declared_type='SInt32*'/>
<retval type='^v' declared_type='CFTypeRef'/>
</function>
<function name='CFURLCreateResourcePropertiesForKeysFromBookmarkData'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFArray=}' name='resourcePropertiesToReturn' declared_type='CFArrayRef'/>
<arg type='^{__CFData=}' name='bookmark' declared_type='CFDataRef'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFURLCreateResourcePropertyForKeyFromBookmarkData'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='resourcePropertyKey' declared_type='CFStringRef'/>
<arg type='^{__CFData=}' name='bookmark' declared_type='CFDataRef'/>
<retval type='^v' declared_type='CFTypeRef'/>
</function>
<function name='CFURLCreateStringByAddingPercentEscapes'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='originalString' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='charactersToLeaveUnescaped' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='legalURLCharactersToBeEscaped' declared_type='CFStringRef'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCreateStringByReplacingPercentEscapes'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='originalString' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='charactersToLeaveEscaped' declared_type='CFStringRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCreateStringByReplacingPercentEscapesUsingEncoding'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='origString' declared_type='CFStringRef'/>
<arg type='^{__CFString=}' name='charsToLeaveEscaped' declared_type='CFStringRef'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLCreateWithBytes'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='*' name='URLBytes' declared_type='UInt8*' const='true'/>
<arg type='l' name='length' declared_type='CFIndex'/>
<arg type='L' name='encoding' declared_type='CFStringEncoding'/>
<arg type='^{__CFURL=}' name='baseURL' declared_type='CFURLRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateWithFileSystemPath'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='filePath' declared_type='CFStringRef'/>
<arg type='l' name='pathStyle' declared_type='CFURLPathStyle'/>
<arg type='B' name='isDirectory' declared_type='Boolean'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateWithFileSystemPathRelativeToBase'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='filePath' declared_type='CFStringRef'/>
<arg type='l' name='pathStyle' declared_type='CFURLPathStyle'/>
<arg type='B' name='isDirectory' declared_type='Boolean'/>
<arg type='^{__CFURL=}' name='baseURL' declared_type='CFURLRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateWithString'>
<arg type='^{__CFAllocator=}' name='allocator' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='URLString' declared_type='CFStringRef'/>
<arg type='^{__CFURL=}' name='baseURL' declared_type='CFURLRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLDestroyResource'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^i' name='errorCode' declared_type='SInt32*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLEnumeratorCreateForDirectoryURL'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='directoryURL' declared_type='CFURLRef'/>
<arg type='L' name='option' declared_type='CFURLEnumeratorOptions'/>
<arg type='^{__CFArray=}' name='propertyKeys' declared_type='CFArrayRef'/>
<retval type='^{__CFURLEnumerator=}' declared_type='CFURLEnumeratorRef'/>
</function>
<function name='CFURLEnumeratorCreateForMountedVolumes'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='L' name='option' declared_type='CFURLEnumeratorOptions'/>
<arg type='^{__CFArray=}' name='propertyKeys' declared_type='CFArrayRef'/>
<retval type='^{__CFURLEnumerator=}' declared_type='CFURLEnumeratorRef'/>
</function>
<function name='CFURLEnumeratorGetDescendentLevel'>
<arg type='^{__CFURLEnumerator=}' name='enumerator' declared_type='CFURLEnumeratorRef'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFURLEnumeratorGetNextURL'>
<arg type='^{__CFURLEnumerator=}' name='enumerator' declared_type='CFURLEnumeratorRef'/>
<arg type='^^{__CFURL}' name='url' declared_type='CFURLRef*'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval type='l' declared_type='CFURLEnumeratorResult'/>
</function>
<function name='CFURLEnumeratorGetSourceDidChange'>
<arg type='^{__CFURLEnumerator=}' name='enumerator' declared_type='CFURLEnumeratorRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLEnumeratorGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFURLEnumeratorSkipDescendents'>
<arg type='^{__CFURLEnumerator=}' name='enumerator' declared_type='CFURLEnumeratorRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLGetBaseURL'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLGetByteRangeForComponent'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='l' name='component' declared_type='CFURLComponentType'/>
<arg type='^{_CFRange=ii}' name='rangeIncludingSeparators' declared_type='CFRange*'/>
<retval type='{_CFRange=ii}' declared_type='CFRange'/>
</function>
<function name='CFURLGetBytes'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='*' name='buffer' declared_type='UInt8*'/>
<arg type='l' name='bufferLength' declared_type='CFIndex'/>
<retval type='l' declared_type='CFIndex'/>
</function>
<function name='CFURLGetFSRef'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^{FSRef=}' name='fsRef' declared_type='struct FSRef*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLGetFileSystemRepresentation'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='B' name='resolveAgainstBase' declared_type='Boolean'/>
<arg type='*' name='buffer' declared_type='UInt8*'/>
<arg type='l' name='maxBufLen' declared_type='CFIndex'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLGetPortNumber'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<retval type='l' declared_type='SInt32'/>
</function>
<function name='CFURLGetString'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFURLHasDirectoryPath'>
<arg type='^{__CFURL=}' name='anURL' declared_type='CFURLRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLResourceIsReachable'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLSetResourcePropertiesForKeys'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^{__CFDictionary=}' name='keyedPropertyValues' declared_type='CFDictionaryRef'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLSetResourcePropertyForKey'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<arg type='^v' name='propertyValue' declared_type='CFTypeRef'/>
<arg type='^^{__CFError}' name='error' declared_type='CFErrorRef*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLSetTemporaryResourcePropertyForKey'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^{__CFString=}' name='key' declared_type='CFStringRef'/>
<arg type='^v' name='propertyValue' declared_type='CFTypeRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLWriteBookmarkDataToFile'>
<arg type='^{__CFData=}' name='bookmarkRef' declared_type='CFDataRef'/>
<arg type='^{__CFURL=}' name='fileURL' declared_type='CFURLRef'/>
<arg type='L' name='options' declared_type='CFURLBookmarkFileCreationOptions'/>
<arg type='^^{__CFError}' name='errorRef' declared_type='CFErrorRef*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLWriteDataAndPropertiesToResource'>
<arg type='^{__CFURL=}' name='url' declared_type='CFURLRef'/>
<arg type='^{__CFData=}' name='dataToWrite' declared_type='CFDataRef'/>
<arg type='^{__CFDictionary=}' name='propertiesToWrite' declared_type='CFDictionaryRef'/>
<arg type='^i' name='errorCode' declared_type='SInt32*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFUUIDCreate'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<retval type='^{__CFUUID=}' declared_type='CFUUIDRef'/>
</function>
<function name='CFUUIDCreateFromString'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFString=}' name='uuidStr' declared_type='CFStringRef'/>
<retval type='^{__CFUUID=}' declared_type='CFUUIDRef'/>
</function>
<function name='CFUUIDCreateFromUUIDBytes'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='{_CFUUIDBytes=CCCCCCCCCCCCCCCC}' name='bytes' declared_type='CFUUIDBytes'/>
<retval type='^{__CFUUID=}' declared_type='CFUUIDRef'/>
</function>
<function name='CFUUIDCreateString'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFUUID=}' name='uuid' declared_type='CFUUIDRef'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFUUIDCreateWithBytes'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='C' name='byte0' declared_type='UInt8'/>
<arg type='C' name='byte1' declared_type='UInt8'/>
<arg type='C' name='byte2' declared_type='UInt8'/>
<arg type='C' name='byte3' declared_type='UInt8'/>
<arg type='C' name='byte4' declared_type='UInt8'/>
<arg type='C' name='byte5' declared_type='UInt8'/>
<arg type='C' name='byte6' declared_type='UInt8'/>
<arg type='C' name='byte7' declared_type='UInt8'/>
<arg type='C' name='byte8' declared_type='UInt8'/>
<arg type='C' name='byte9' declared_type='UInt8'/>
<arg type='C' name='byte10' declared_type='UInt8'/>
<arg type='C' name='byte11' declared_type='UInt8'/>
<arg type='C' name='byte12' declared_type='UInt8'/>
<arg type='C' name='byte13' declared_type='UInt8'/>
<arg type='C' name='byte14' declared_type='UInt8'/>
<arg type='C' name='byte15' declared_type='UInt8'/>
<retval type='^{__CFUUID=}' declared_type='CFUUIDRef'/>
</function>
<function name='CFUUIDGetConstantUUIDWithBytes'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='C' name='byte0' declared_type='UInt8'/>
<arg type='C' name='byte1' declared_type='UInt8'/>
<arg type='C' name='byte2' declared_type='UInt8'/>
<arg type='C' name='byte3' declared_type='UInt8'/>
<arg type='C' name='byte4' declared_type='UInt8'/>
<arg type='C' name='byte5' declared_type='UInt8'/>
<arg type='C' name='byte6' declared_type='UInt8'/>
<arg type='C' name='byte7' declared_type='UInt8'/>
<arg type='C' name='byte8' declared_type='UInt8'/>
<arg type='C' name='byte9' declared_type='UInt8'/>
<arg type='C' name='byte10' declared_type='UInt8'/>
<arg type='C' name='byte11' declared_type='UInt8'/>
<arg type='C' name='byte12' declared_type='UInt8'/>
<arg type='C' name='byte13' declared_type='UInt8'/>
<arg type='C' name='byte14' declared_type='UInt8'/>
<arg type='C' name='byte15' declared_type='UInt8'/>
<retval type='^{__CFUUID=}' declared_type='CFUUIDRef'/>
</function>
<function name='CFUUIDGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFUUIDGetUUIDBytes'>
<arg type='^{__CFUUID=}' name='uuid' declared_type='CFUUIDRef'/>
<retval type='{_CFUUIDBytes=CCCCCCCCCCCCCCCC}' declared_type='CFUUIDBytes'/>
</function>
<function name='CFWriteStreamCanAcceptBytes'>
<arg type='^{__CFWriteStream=}' name='stream' declared_type='CFWriteStreamRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFWriteStreamClose'>
<arg type='^{__CFWriteStream=}' name='stream' declared_type='CFWriteStreamRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFWriteStreamCopyError'>
<arg type='^{__CFWriteStream=}' name='stream' declared_type='CFWriteStreamRef'/>
<retval type='^{__CFError=}' declared_type='CFErrorRef'/>
</function>
<function name='CFWriteStreamCopyProperty'>
<arg type='^{__CFWriteStream=}' name='stream' declared_type='CFWriteStreamRef'/>
<arg type='^{__CFString=}' name='propertyName' declared_type='CFStringRef'/>
<retval type='^v' declared_type='CFTypeRef'/>
</function>
<function name='CFWriteStreamCreateWithAllocatedBuffers'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFAllocator=}' name='bufferAllocator' declared_type='CFAllocatorRef'/>
<retval type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef'/>
</function>
<function name='CFWriteStreamCreateWithBuffer'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='*' name='buffer' declared_type='UInt8*'/>
<arg type='l' name='bufferCapacity' declared_type='CFIndex'/>
<retval type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef'/>
</function>
<function name='CFWriteStreamCreateWithFile'>
<arg type='^{__CFAllocator=}' name='alloc' declared_type='CFAllocatorRef'/>
<arg type='^{__CFURL=}' name='fileURL' declared_type='CFURLRef'/>
<retval type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef'/>
</function>
<function name='CFWriteStreamGetError'>
<arg type='^{__CFWriteStream=}' name='stream' declared_type='CFWriteStreamRef'/>
<retval type='{_CFStreamError=ii}' declared_type='CFStreamError'/>
</function>
<function name='CFWriteStreamGetStatus'>
<arg type='^{__CFWriteStream=}' name='stream' declared_type='CFWriteStreamRef'/>
<retval type='l' declared_type='CFStreamStatus'/>
</function>
<function name='CFWriteStreamGetTypeID'>
<retval type='L' declared_type='CFTypeID'/>
</function>
<function name='CFWriteStreamOpen'>
<arg type='^{__CFWriteStream=}' name='stream' declared_type='CFWriteStreamRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFWriteStreamScheduleWithRunLoop'>
<arg type='^{__CFWriteStream=}' name='stream' declared_type='CFWriteStreamRef'/>
<arg type='^{__CFRunLoop=}' name='runLoop' declared_type='CFRunLoopRef'/>
<arg type='^{__CFString=}' name='runLoopMode' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFWriteStreamSetClient'>
<arg type='^{__CFWriteStream=}' name='stream' declared_type='CFWriteStreamRef'/>
<arg type='L' name='streamEvents' declared_type='CFOptionFlags'/>
<arg type='^?' name='clientCB' declared_type='CFWriteStreamClientCallBack' function_pointer='true'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef'/>
<arg type='L' declared_type='CFStreamEventType'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFStreamClientContext=i^v^?^?^?}' name='clientContext' declared_type='CFStreamClientContext*'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFWriteStreamSetProperty'>
<arg type='^{__CFWriteStream=}' name='stream' declared_type='CFWriteStreamRef'/>
<arg type='^{__CFString=}' name='propertyName' declared_type='CFStringRef'/>
<arg type='^v' name='propertyValue' declared_type='CFTypeRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFWriteStreamUnscheduleFromRunLoop'>
<arg type='^{__CFWriteStream=}' name='stream' declared_type='CFWriteStreamRef'/>
<arg type='^{__CFRunLoop=}' name='runLoop' declared_type='CFRunLoopRef'/>
<arg type='^{__CFString=}' name='runLoopMode' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFWriteStreamWrite'>
<arg type='^{__CFWriteStream=}' name='stream' declared_type='CFWriteStreamRef'/>
<arg type='*' name='buffer' declared_type='UInt8*' const='true'/>
<arg type='l' name='bufferLength' declared_type='CFIndex'/>
<retval type='l' declared_type='CFIndex'/>
</function>
</signatures>
